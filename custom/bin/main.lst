ARM GAS  main.s 			page 1


   1              		.arch armv6-m
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.file 1 "main.c"
  17              		.section	.text.my_memcpy,"ax",%progbits
  18              		.align	1
  19              		.global	my_memcpy
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	my_memcpy:
  25              	.LVL0:
  26              	.LFB0:
   1:main.c        **** // Provided under the GPL v2 license. See the included LICENSE.txt for details.
   2:main.c        **** 
   3:main.c        **** // src/custom.h defines the following:
   4:main.c        **** //
   5:main.c        **** // queue[]     - points to the 4K Display Data Bank
   6:main.c        **** //             - treat as RAM
   7:main.c        **** //             - Any data passed to/from the ARM and 6507 must be done via queue[]
   8:main.c        **** //
   9:main.c        **** // flashdata[] - points to the 24K that comprises the six 4K banks.
  10:main.c        **** //             - treat as ROM
  11:main.c        **** #include "src/custom.h"
  12:main.c        **** 
  13:main.c        **** 
  14:main.c        **** // types of variables, storage used and range
  15:main.c        **** // const              = constant, which is compiled into the ROM section and cannot be changed duri
  16:main.c        **** // char               =  8 bit, 1 byte  per value.  Range is           -128 to           127
  17:main.c        **** // unsigned char      =  8 bit, 1 byte  per value.  Range is              0 to           255
  18:main.c        **** // short int          = 16 bit, 2 bytes per value.  Range is        -32,768 to        32,767
  19:main.c        **** // unsigned short int = 16 bit, 2 bytes per value.  Range is              0 to        65,535
  20:main.c        **** // int                = 32 bit, 4 bytes per value.  Range is -2,147,483,648 to 2,147,483,647
  21:main.c        **** // unsigned int       = 32 bit, 4 bytes per value.  Range is              0 to 4,294,967,295
  22:main.c        **** // long int           = same as int
  23:main.c        **** // float              = 32 bit, 4 bytes.  Not Supported#
  24:main.c        **** // double             = 64 bit, 8 bytes.  Not Supported#
  25:main.c        **** // *                  = 32 bit, 4 bytes, pointer (ie: char*, int*)
  26:main.c        **** //
  27:main.c        **** // # - at least not supported with the compiler under OS X.  It might be supported by the Linux/Win
  28:main.c        **** //     compiler - but support would be implemented via software as the ARM in the Harmony Cartridge
  29:main.c        **** //     have an FPU (floating point unit).  As such, performance will most likely be as good as usin
  30:main.c        **** //     integer math based routines.
  31:main.c        **** //
  32:main.c        **** // NOTE : Only 448 bytes are allocated for use by variables (the rest of the 512 byte section is us
ARM GAS  main.s 			page 2


  33:main.c        **** //        as the stack).  If you use too many variables, you'll get a compile time error:  "region 
  34:main.c        **** //        You can use RAM in the Display Data to store values, see defines.h for queue[xxx] defines
  35:main.c        **** //
  36:main.c        **** // NOTE : Compiled code can be significantly smaller if you use INTs for your variables instead of
  37:main.c        **** //        SHORTs or CHARs.
  38:main.c        **** 
  39:main.c        **** volatile unsigned char *queue=(unsigned char *)0x10000C00;
  40:main.c        **** volatile unsigned char *flashdata=(unsigned char *)0x20000C00;
  41:main.c        **** volatile int *queue_int=(int *)0x10000C00;
  42:main.c        **** enum {
  43:main.c        **** SpriteGfxIndex,
  44:main.c        **** junk1,
  45:main.c        **** junk2,
  46:main.c        **** junk3,
  47:main.c        **** junk4, // placeholders
  48:main.c        **** junk5a, // placeholders
  49:main.c        **** junk6a, // placeholders
  50:main.c        **** junk78, // placeholders
  51:main.c        **** junk8a, // placeholders
  52:main.c        **** spritedisplay,
  53:main.c        **** player0x,
  54:main.c        **** player1x,
  55:main.c        **** player2x,
  56:main.c        **** player3x,
  57:main.c        **** player4x,
  58:main.c        **** player5x,
  59:main.c        **** player6x,
  60:main.c        **** player7x,
  61:main.c        **** player8x,
  62:main.c        **** player9x,
  63:main.c        **** player0y,
  64:main.c        **** player1y,
  65:main.c        **** player2y,
  66:main.c        **** player3y,
  67:main.c        **** player4y,
  68:main.c        **** player5y,
  69:main.c        **** player6y,
  70:main.c        **** player7y,
  71:main.c        **** player8y,
  72:main.c        **** player9y,
  73:main.c        **** player0color, junk5,
  74:main.c        **** player0height,
  75:main.c        **** player1height,
  76:main.c        **** player2height,
  77:main.c        **** player3height,
  78:main.c        **** player4height,
  79:main.c        **** player5height,
  80:main.c        **** player6height,
  81:main.c        **** player7height,
  82:main.c        **** player8height,
  83:main.c        **** player9height,
  84:main.c        **** _NUSIZ1,
  85:main.c        **** NUSIZ2,
  86:main.c        **** NUSIZ3,
  87:main.c        **** NUSIZ4,
  88:main.c        **** NUSIZ5,
  89:main.c        **** NUSIZ6,
ARM GAS  main.s 			page 3


  90:main.c        **** NUSIZ7,
  91:main.c        **** NUSIZ8,
  92:main.c        **** NUSIZ9,
  93:main.c        **** score,score2,score3,
  94:main.c        **** COLUM0,
  95:main.c        **** COLUM1,
  96:main.c        **** player0pointerlo,
  97:main.c        **** player0pointerhi,
  98:main.c        **** // end of RAM, start of playerpointers
  99:main.c        **** player1pointerlo,
 100:main.c        **** player1pointerhi,
 101:main.c        **** player2pointerlo,
 102:main.c        **** player2pointerhi,
 103:main.c        **** player3pointerlo,
 104:main.c        **** player3pointerhi,
 105:main.c        **** player4pointerlo,
 106:main.c        **** player4pointerhi,
 107:main.c        **** player5pointerlo,
 108:main.c        **** player5pointerhi,
 109:main.c        **** player6pointerlo,
 110:main.c        **** player6pointerhi,
 111:main.c        **** player7pointerlo,
 112:main.c        **** player7pointerhi,
 113:main.c        **** player8pointerlo,
 114:main.c        **** player8pointerhi,
 115:main.c        **** player9pointerlo,
 116:main.c        **** player9pointerhi,
 117:main.c        **** player1color, junk6,
 118:main.c        **** player2color, junk7,
 119:main.c        **** player3color, junk8,
 120:main.c        **** player4color, junk9,
 121:main.c        **** player5color, junk10,
 122:main.c        **** player6color, junk11,
 123:main.c        **** player7color, junk12,
 124:main.c        **** player8color, junk13,
 125:main.c        **** player9color, junk14
 126:main.c        **** };
 127:main.c        **** 
 128:main.c        ****  enum {SKIP,OVERLAP,NOOVERLAP};
 129:main.c        **** 
 130:main.c        **** // global variables are those found outside of any function.  They can be used by any function.
 131:main.c        **** // The Harmony Cartridge preserves these values for you between ARM code calls.
 132:main.c        **** 
 133:main.c        **** unsigned char *C_function=(unsigned int *)(0x10000C00 + 0x1A4);
 134:main.c        **** unsigned short *fetcher_address_table=(unsigned short *)(0x20000C00 + 0x61A0);
 135:main.c        **** unsigned char *RIOT=(unsigned char *)(0x10000C00 + 0x1A8);
 136:main.c        **** //unsigned char *HMdiv=(unsigned char *)(0x20000c00+0x1000);
 137:main.c        **** unsigned char *fetcheraddr;
 138:main.c        **** unsigned char *pfpixel;
 139:main.c        **** int count;
 140:main.c        **** //int Gfxindex;
 141:main.c        **** //signed int temp1;
 142:main.c        **** //int temp2; 
 143:main.c        **** //int temp3;
 144:main.c        **** int temp4;
 145:main.c        **** int temp5;
 146:main.c        **** unsigned int mask;
ARM GAS  main.s 			page 4


 147:main.c        **** 
 148:main.c        ****  // masking: NUSIZ bit 7=off/on, NUSIZ 6=L/R
 149:main.c        ****  // no-mask entries replaced by later if...then which is a bit smaller.
 150:main.c        ****  // in their place is masking for reflected sprites.
 151:main.c        **** const unsigned char maskdata[32]=
 152:main.c        **** 	{
 153:main.c        **** 	 0,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,
 154:main.c        **** 	 0xFE,0xFC,0xF8,0xF0,0xE0,0xC0,0x80,0,
 155:main.c        ****          0,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,
 156:main.c        ****          0x7F,0x3F,0x1F,0x0F,0x07,0x03,0x01,0
 157:main.c        ****           };
 158:main.c        **** 
 159:main.c        **** char spritesort[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 160:main.c        **** char myGfxIndex[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 161:main.c        **** 
 162:main.c        **** // changed maxsprites to a variable value, so unused sprite memory can be claimed
 163:main.c        **** char maxsprites;
 164:main.c        **** 
 165:main.c        **** #define    kernello(a) fetcheraddr[(a)]
 166:main.c        **** #define    kernelhi(a) fetcheraddr[(a)+11]
 167:main.c        **** #define    dflow(a) fetcheraddr[(a)+22]
 168:main.c        **** #define    dfhigh(a)  fetcheraddr[(a)+30]
 169:main.c        **** #define    dffraclo(a)  fetcheraddr[(a)+38]
 170:main.c        **** #define    dffrachi(a)  fetcheraddr[(a)+46]
 171:main.c        **** #define    scoregraphics(a)  fetcheraddr[(a)+54]
 172:main.c        **** #define    scorepointer(a)  fetcheraddr[(a)+56]
 173:main.c        **** #define    Hmval(a)  fetcheraddr[(a)+58]
 174:main.c        **** #define    Hmval74(a)  fetcheraddr[(a)+66]
 175:main.c        **** 
 176:main.c        **** void my_memcpy(unsigned char* destination, unsigned char* source, int offset, int count)
 177:main.c        **** { 
  27              		.loc 1 177 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
 178:main.c        ****         int i; //saves a few bytes
  31              		.loc 1 178 9 view .LVU1
 179:main.c        ****         for(i=0;i<count;i++)
  32              		.loc 1 179 9 view .LVU2
 177:main.c        ****         int i; //saves a few bytes
  33              		.loc 1 177 1 is_stmt 0 view .LVU3
  34 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
  35              		.cfi_def_cfa_offset 32
  36              		.cfi_offset 0, -32
  37              		.cfi_offset 1, -28
  38              		.cfi_offset 2, -24
  39              		.cfi_offset 4, -20
  40              		.cfi_offset 5, -16
  41              		.cfi_offset 6, -12
  42              		.cfi_offset 7, -8
  43              		.cfi_offset 14, -4
 177:main.c        ****         int i; //saves a few bytes
  44              		.loc 1 177 1 view .LVU4
  45 0002 0193     		str	r3, [sp, #4]
  46              		.loc 1 179 14 view .LVU5
  47 0004 0023     		movs	r3, #0
  48              	.LVL1:
ARM GAS  main.s 			page 5


 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  49              		.loc 1 180 56 view .LVU6
  50 0006 074F     		ldr	r7, .L4
  51              	.LVL2:
  52              	.L2:
 179:main.c        ****         for(i=0;i<count;i++)
  53              		.loc 1 179 18 is_stmt 1 discriminator 1 view .LVU7
  54 0008 019C     		ldr	r4, [sp, #4]
  55 000a A342     		cmp	r3, r4
  56 000c 00DB     		blt	.L3
 181:main.c        **** } 
  57              		.loc 1 181 1 is_stmt 0 view .LVU8
  58              		@ sp needed
  59 000e F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  60              	.L3:
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  61              		.loc 1 180 17 is_stmt 1 discriminator 3 view .LVU9
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  62              		.loc 1 180 28 is_stmt 0 discriminator 3 view .LVU10
  63 0010 FF25     		movs	r5, #255
  64 0012 D418     		adds	r4, r2, r3
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  65              		.loc 1 180 56 discriminator 3 view .LVU11
  66 0014 CE5C     		ldrb	r6, [r1, r3]
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  67              		.loc 1 180 28 discriminator 3 view .LVU12
  68 0016 2C40     		ands	r4, r5
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  69              		.loc 1 180 56 discriminator 3 view .LVU13
  70 0018 3D68     		ldr	r5, [r7]
 179:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  71              		.loc 1 179 26 discriminator 3 view .LVU14
  72 001a 0133     		adds	r3, r3, #1
  73              	.LVL3:
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  74              		.loc 1 180 56 discriminator 3 view .LVU15
  75 001c 3540     		ands	r5, r6
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  76              		.loc 1 180 45 discriminator 3 view .LVU16
  77 001e 0555     		strb	r5, [r0, r4]
 179:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  78              		.loc 1 179 26 is_stmt 1 discriminator 3 view .LVU17
  79              	.LVL4:
 179:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  80              		.loc 1 179 26 is_stmt 0 discriminator 3 view .LVU18
  81 0020 F2E7     		b	.L2
  82              	.L5:
  83 0022 C046     		.align	2
  84              	.L4:
  85 0024 00000000 		.word	.LANCHOR0
  86              		.cfi_endproc
  87              	.LFE0:
  89              		.section	.text.my_memset,"ax",%progbits
  90              		.align	1
  91              		.global	my_memset
  92              		.syntax unified
  93              		.code	16
ARM GAS  main.s 			page 6


  94              		.thumb_func
  96              	my_memset:
  97              	.LVL5:
  98              	.LFB1:
 182:main.c        **** 
 183:main.c        **** void my_memset(unsigned char* destination, int fill_value, int count)
 184:main.c        **** {
  99              		.loc 1 184 1 is_stmt 1 view -0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 185:main.c        ****         int i; //saves a few bytes
 104              		.loc 1 185 9 view .LVU20
 186:main.c        ****         for (i=0;i<count;i++)
 105              		.loc 1 186 9 view .LVU21
 106              		.loc 1 186 15 is_stmt 0 view .LVU22
 107 0000 0023     		movs	r3, #0
 108              	.LVL6:
 109              	.L7:
 110              		.loc 1 186 19 is_stmt 1 discriminator 1 view .LVU23
 111 0002 9342     		cmp	r3, r2
 112 0004 00DB     		blt	.L8
 187:main.c        ****                 destination[i]=fill_value;
 188:main.c        **** }
 113              		.loc 1 188 1 is_stmt 0 view .LVU24
 114              		@ sp needed
 115 0006 7047     		bx	lr
 116              	.L8:
 187:main.c        ****                 destination[i]=fill_value;
 117              		.loc 1 187 17 is_stmt 1 discriminator 3 view .LVU25
 187:main.c        ****                 destination[i]=fill_value;
 118              		.loc 1 187 31 is_stmt 0 discriminator 3 view .LVU26
 119 0008 C154     		strb	r1, [r0, r3]
 186:main.c        ****         for (i=0;i<count;i++)
 120              		.loc 1 186 27 is_stmt 1 discriminator 3 view .LVU27
 121 000a 0133     		adds	r3, r3, #1
 122              	.LVL7:
 186:main.c        ****         for (i=0;i<count;i++)
 123              		.loc 1 186 27 is_stmt 0 discriminator 3 view .LVU28
 124 000c F9E7     		b	.L7
 125              		.cfi_endproc
 126              	.LFE1:
 128              		.section	.text.reverse,"ax",%progbits
 129              		.align	1
 130              		.global	reverse
 131              		.syntax unified
 132              		.code	16
 133              		.thumb_func
 135              	reverse:
 136              	.LVL8:
 137              	.LFB2:
 189:main.c        **** 
 190:main.c        **** void reverse(int i, int j, unsigned char* x)
 191:main.c        **** { 
 138              		.loc 1 191 1 is_stmt 1 view -0
 139              		.cfi_startproc
ARM GAS  main.s 			page 7


 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		.loc 1 191 1 is_stmt 0 view .LVU30
 143 0000 10B5     		push	{r4, lr}
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 4, -8
 146              		.cfi_offset 14, -4
 192:main.c        ****         int t;
 147              		.loc 1 192 9 is_stmt 1 view .LVU31
 193:main.c        ****         while (i < j) 
 148              		.loc 1 193 9 view .LVU32
 149              	.L10:
 150              		.loc 1 193 18 view .LVU33
 151 0002 8842     		cmp	r0, r1
 152 0004 00DB     		blt	.L11
 194:main.c        ****         {
 195:main.c        ****               t = x[i]; x[i] = x[j]; x[j] = t;
 196:main.c        ****               i++;
 197:main.c        ****               j--;
 198:main.c        ****         }
 199:main.c        **** }
 153              		.loc 1 199 1 is_stmt 0 view .LVU34
 154              		@ sp needed
 155 0006 10BD     		pop	{r4, pc}
 156              	.L11:
 195:main.c        ****               i++;
 157              		.loc 1 195 15 is_stmt 1 view .LVU35
 195:main.c        ****               i++;
 158              		.loc 1 195 20 is_stmt 0 view .LVU36
 159 0008 135C     		ldrb	r3, [r2, r0]
 160              	.LVL9:
 195:main.c        ****               i++;
 161              		.loc 1 195 25 is_stmt 1 view .LVU37
 195:main.c        ****               i++;
 162              		.loc 1 195 33 is_stmt 0 view .LVU38
 163 000a 545C     		ldrb	r4, [r2, r1]
 195:main.c        ****               i++;
 164              		.loc 1 195 30 view .LVU39
 165 000c 1454     		strb	r4, [r2, r0]
 195:main.c        ****               i++;
 166              		.loc 1 195 38 is_stmt 1 view .LVU40
 195:main.c        ****               i++;
 167              		.loc 1 195 43 is_stmt 0 view .LVU41
 168 000e 5354     		strb	r3, [r2, r1]
 196:main.c        ****               j--;
 169              		.loc 1 196 15 is_stmt 1 view .LVU42
 196:main.c        ****               j--;
 170              		.loc 1 196 16 is_stmt 0 view .LVU43
 171 0010 0130     		adds	r0, r0, #1
 172              	.LVL10:
 197:main.c        ****         }
 173              		.loc 1 197 15 is_stmt 1 view .LVU44
 197:main.c        ****         }
 174              		.loc 1 197 16 is_stmt 0 view .LVU45
 175 0012 0139     		subs	r1, r1, #1
 176              	.LVL11:
 197:main.c        ****         }
ARM GAS  main.s 			page 8


 177              		.loc 1 197 16 view .LVU46
 178 0014 F5E7     		b	.L10
 179              		.cfi_endproc
 180              	.LFE2:
 182              		.section	.text.memscroll,"ax",%progbits
 183              		.align	1
 184              		.global	memscroll
 185              		.syntax unified
 186              		.code	16
 187              		.thumb_func
 189              	memscroll:
 190              	.LVL12:
 191              	.LFB3:
 200:main.c        **** 
 201:main.c        **** void memscroll(unsigned char* qmemory, unsigned char offset)
 202:main.c        **** {
 192              		.loc 1 202 1 is_stmt 1 view -0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 203:main.c        ****         // the classic "shift N elements through reversal" algorithm
 204:main.c        ****         reverse(0,offset-1,qmemory);
 196              		.loc 1 204 9 view .LVU48
 202:main.c        ****         // the classic "shift N elements through reversal" algorithm
 197              		.loc 1 202 1 is_stmt 0 view .LVU49
 198 0000 70B5     		push	{r4, r5, r6, lr}
 199              		.cfi_def_cfa_offset 16
 200              		.cfi_offset 4, -16
 201              		.cfi_offset 5, -12
 202              		.cfi_offset 6, -8
 203              		.cfi_offset 14, -4
 202:main.c        ****         // the classic "shift N elements through reversal" algorithm
 204              		.loc 1 202 1 view .LVU50
 205 0002 0400     		movs	r4, r0
 205:main.c        ****         reverse(offset,255,qmemory);
 206:main.c        ****         reverse(0,255,qmemory);
 207:main.c        **** }
 206              		.loc 1 207 1 view .LVU51
 207              		@ sp needed
 202:main.c        ****         // the classic "shift N elements through reversal" algorithm
 208              		.loc 1 202 1 view .LVU52
 209 0004 0D00     		movs	r5, r1
 204:main.c        ****         reverse(offset,255,qmemory);
 210              		.loc 1 204 9 view .LVU53
 211 0006 0200     		movs	r2, r0
 212 0008 0139     		subs	r1, r1, #1
 213              	.LVL13:
 204:main.c        ****         reverse(offset,255,qmemory);
 214              		.loc 1 204 9 view .LVU54
 215 000a 0020     		movs	r0, #0
 216              	.LVL14:
 204:main.c        ****         reverse(offset,255,qmemory);
 217              		.loc 1 204 9 view .LVU55
 218 000c FFF7FEFF 		bl	reverse
 219              	.LVL15:
 205:main.c        ****         reverse(offset,255,qmemory);
 220              		.loc 1 205 9 is_stmt 1 view .LVU56
ARM GAS  main.s 			page 9


 221 0010 2800     		movs	r0, r5
 222 0012 2200     		movs	r2, r4
 223 0014 FF21     		movs	r1, #255
 224 0016 FFF7FEFF 		bl	reverse
 225              	.LVL16:
 206:main.c        **** }
 226              		.loc 1 206 9 view .LVU57
 227 001a 2200     		movs	r2, r4
 228 001c FF21     		movs	r1, #255
 229 001e 0020     		movs	r0, #0
 230 0020 FFF7FEFF 		bl	reverse
 231              	.LVL17:
 232              	.LVL18:
 233              		.loc 1 207 1 is_stmt 0 view .LVU58
 234 0024 70BD     		pop	{r4, r5, r6, pc}
 235              		.cfi_endproc
 236              	.LFE3:
 238              		.section	.text.get32bitdff,"ax",%progbits
 239              		.align	1
 240              		.global	get32bitdff
 241              		.syntax unified
 242              		.code	16
 243              		.thumb_func
 245              	get32bitdff:
 246              	.LVL19:
 247              	.LFB4:
 208:main.c        **** 
 209:main.c        **** unsigned int get32bitdff(int offset)
 210:main.c        **** {
 248              		.loc 1 210 1 is_stmt 1 view -0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 211:main.c        ****   return((dffrachi(offset)<<8)+dffraclo(offset));
 253              		.loc 1 211 3 view .LVU60
 254              		.loc 1 211 22 is_stmt 0 view .LVU61
 255 0000 054B     		ldr	r3, .L14
 212:main.c        **** }
 256              		.loc 1 212 1 view .LVU62
 257              		@ sp needed
 211:main.c        ****   return((dffrachi(offset)<<8)+dffraclo(offset));
 258              		.loc 1 211 22 view .LVU63
 259 0002 5B68     		ldr	r3, [r3, #4]
 260 0004 1B18     		adds	r3, r3, r0
 261 0006 1A00     		movs	r2, r3
 262 0008 2E32     		adds	r2, r2, #46
 263 000a 1078     		ldrb	r0, [r2]
 264              	.LVL20:
 211:main.c        ****   return((dffrachi(offset)<<8)+dffraclo(offset));
 265              		.loc 1 211 51 view .LVU64
 266 000c 0733     		adds	r3, r3, #7
 267 000e DB7F     		ldrb	r3, [r3, #31]
 211:main.c        ****   return((dffrachi(offset)<<8)+dffraclo(offset));
 268              		.loc 1 211 35 view .LVU65
 269 0010 0002     		lsls	r0, r0, #8
 211:main.c        ****   return((dffrachi(offset)<<8)+dffraclo(offset));
ARM GAS  main.s 			page 10


 270              		.loc 1 211 39 view .LVU66
 271 0012 C018     		adds	r0, r0, r3
 272              		.loc 1 212 1 view .LVU67
 273 0014 7047     		bx	lr
 274              	.L15:
 275 0016 C046     		.align	2
 276              	.L14:
 277 0018 00000000 		.word	.LANCHOR0
 278              		.cfi_endproc
 279              	.LFE4:
 281              		.section	.text.get32bitdf,"ax",%progbits
 282              		.align	1
 283              		.global	get32bitdf
 284              		.syntax unified
 285              		.code	16
 286              		.thumb_func
 288              	get32bitdf:
 289              	.LVL21:
 290              	.LFB5:
 213:main.c        **** 
 214:main.c        **** unsigned int get32bitdf(int offset)
 215:main.c        **** {
 291              		.loc 1 215 1 is_stmt 1 view -0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 216:main.c        ****   return((dfhigh(offset)<<8)+dflow(offset));
 296              		.loc 1 216 3 view .LVU69
 297              		.loc 1 216 22 is_stmt 0 view .LVU70
 298 0000 034B     		ldr	r3, .L17
 217:main.c        **** }
 299              		.loc 1 217 1 view .LVU71
 300              		@ sp needed
 216:main.c        ****   return((dfhigh(offset)<<8)+dflow(offset));
 301              		.loc 1 216 22 view .LVU72
 302 0002 5B68     		ldr	r3, [r3, #4]
 303 0004 1B18     		adds	r3, r3, r0
 304 0006 987F     		ldrb	r0, [r3, #30]
 305              	.LVL22:
 216:main.c        ****   return((dfhigh(offset)<<8)+dflow(offset));
 306              		.loc 1 216 51 view .LVU73
 307 0008 9B7D     		ldrb	r3, [r3, #22]
 216:main.c        ****   return((dfhigh(offset)<<8)+dflow(offset));
 308              		.loc 1 216 35 view .LVU74
 309 000a 0002     		lsls	r0, r0, #8
 216:main.c        ****   return((dfhigh(offset)<<8)+dflow(offset));
 310              		.loc 1 216 39 view .LVU75
 311 000c C018     		adds	r0, r0, r3
 312              		.loc 1 217 1 view .LVU76
 313 000e 7047     		bx	lr
 314              	.L18:
 315              		.align	2
 316              	.L17:
 317 0010 00000000 		.word	.LANCHOR0
 318              		.cfi_endproc
 319              	.LFE5:
ARM GAS  main.s 			page 11


 321              		.section	.text.checkwrap,"ax",%progbits
 322              		.align	1
 323              		.global	checkwrap
 324              		.syntax unified
 325              		.code	16
 326              		.thumb_func
 328              	checkwrap:
 329              	.LVL23:
 330              	.LFB6:
 218:main.c        **** 
 219:main.c        **** /* void shiftnumbers(int xreg) */
 220:main.c        **** /* { */
 221:main.c        **** /*   while (xreg!=maxsprites-1) */
 222:main.c        **** /*   { */
 223:main.c        **** /*     myGfxIndex[xreg]=myGfxIndex[xreg+1]; */
 224:main.c        **** /*     xreg++; */
 225:main.c        **** /*   } */
 226:main.c        **** /* } */
 227:main.c        **** 
 228:main.c        **** char checkwrap(char a, char b)
 229:main.c        **** {
 331              		.loc 1 229 1 is_stmt 1 view -0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 230:main.c        ****   if (((a+b)&255)<b) return 0;
 336              		.loc 1 230 3 view .LVU78
 337              		.loc 1 230 13 is_stmt 0 view .LVU79
 338 0000 4318     		adds	r3, r0, r1
 339              		.loc 1 230 6 view .LVU80
 340 0002 DBB2     		uxtb	r3, r3
 341 0004 8B42     		cmp	r3, r1
 342 0006 00D2     		bcs	.L20
 343              		.loc 1 230 29 view .LVU81
 344 0008 0020     		movs	r0, #0
 345              	.LVL24:
 346              	.L20:
 231:main.c        ****   return a;
 232:main.c        **** }
 347              		.loc 1 232 1 view .LVU82
 348              		@ sp needed
 349 000a 7047     		bx	lr
 350              		.cfi_endproc
 351              	.LFE6:
 353              		.section	.text.checkswap,"ax",%progbits
 354              		.align	1
 355              		.global	checkswap
 356              		.syntax unified
 357              		.code	16
 358              		.thumb_func
 360              	checkswap:
 361              	.LVL25:
 362              	.LFB7:
 233:main.c        **** 
 234:main.c        **** int checkswap(int a, int b)
 235:main.c        **** {
ARM GAS  main.s 			page 12


 363              		.loc 1 235 1 is_stmt 1 view -0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 236:main.c        ****   signed int temp1;
 367              		.loc 1 236 3 view .LVU84
 237:main.c        ****   char s1,s2;
 368              		.loc 1 237 3 view .LVU85
 238:main.c        **** 
 239:main.c        ****   s1=checkwrap(RIOT[player1y+a],RIOT[player1height+a]);
 369              		.loc 1 239 3 view .LVU86
 235:main.c        ****   signed int temp1;
 370              		.loc 1 235 1 is_stmt 0 view .LVU87
 371 0000 10B5     		push	{r4, lr}
 372              		.cfi_def_cfa_offset 8
 373              		.cfi_offset 4, -8
 374              		.cfi_offset 14, -4
 375              		.loc 1 239 20 view .LVU88
 376 0002 104B     		ldr	r3, .L29
 377 0004 1A68     		ldr	r2, [r3]
 378              		.loc 1 239 6 view .LVU89
 379 0006 1018     		adds	r0, r2, r0
 380              	.LVL26:
 381              		.loc 1 239 6 view .LVU90
 382 0008 437D     		ldrb	r3, [r0, #21]
 383 000a 0230     		adds	r0, r0, #2
 384 000c C47F     		ldrb	r4, [r0, #31]
 385              	.LVL27:
 386              	.LBB6:
 387              	.LBI6:
 228:main.c        **** {
 388              		.loc 1 228 6 is_stmt 1 view .LVU91
 389              	.LBB7:
 230:main.c        ****   return a;
 390              		.loc 1 230 3 view .LVU92
 230:main.c        ****   return a;
 391              		.loc 1 230 13 is_stmt 0 view .LVU93
 392 000e 1819     		adds	r0, r3, r4
 230:main.c        ****   return a;
 393              		.loc 1 230 6 view .LVU94
 394 0010 C0B2     		uxtb	r0, r0
 395 0012 8442     		cmp	r4, r0
 396 0014 00D9     		bls	.L23
 230:main.c        ****   return a;
 397              		.loc 1 230 29 view .LVU95
 398 0016 0023     		movs	r3, #0
 399              	.LVL28:
 400              	.L23:
 230:main.c        ****   return a;
 401              		.loc 1 230 29 view .LVU96
 402              	.LBE7:
 403              	.LBE6:
 240:main.c        ****   s2=checkwrap(RIOT[player1y+b],RIOT[player1height+b]);
 404              		.loc 1 240 3 is_stmt 1 view .LVU97
 405              		.loc 1 240 6 is_stmt 0 view .LVU98
 406 0018 5218     		adds	r2, r2, r1
 407 001a 517D     		ldrb	r1, [r2, #21]
ARM GAS  main.s 			page 13


 408              	.LVL29:
 409              		.loc 1 240 6 view .LVU99
 410 001c 0232     		adds	r2, r2, #2
 411 001e D27F     		ldrb	r2, [r2, #31]
 412              	.LVL30:
 413              	.LBB8:
 414              	.LBI8:
 228:main.c        **** {
 415              		.loc 1 228 6 is_stmt 1 view .LVU100
 416              	.LBB9:
 230:main.c        ****   return a;
 417              		.loc 1 230 3 view .LVU101
 230:main.c        ****   return a;
 418              		.loc 1 230 13 is_stmt 0 view .LVU102
 419 0020 8818     		adds	r0, r1, r2
 230:main.c        ****   return a;
 420              		.loc 1 230 6 view .LVU103
 421 0022 C0B2     		uxtb	r0, r0
 422 0024 8242     		cmp	r2, r0
 423 0026 00D9     		bls	.L24
 230:main.c        ****   return a;
 424              		.loc 1 230 29 view .LVU104
 425 0028 0021     		movs	r1, #0
 426              	.LVL31:
 427              	.L24:
 230:main.c        ****   return a;
 428              		.loc 1 230 29 view .LVU105
 429              	.LBE9:
 430              	.LBE8:
 241:main.c        **** 
 242:main.c        ****   temp1=s1-s2;
 431              		.loc 1 242 3 is_stmt 1 view .LVU106
 243:main.c        ****   if (temp1>0)
 244:main.c        ****   { // larger is higher
 245:main.c        ****     if ((temp1-=5)>0)
 246:main.c        ****     {// not overlapping
 247:main.c        ****       if (temp1>RIOT[player1height+b])
 248:main.c        **** 	return SKIP;
 249:main.c        ****       else return OVERLAP;
 432              		.loc 1 249 19 is_stmt 0 view .LVU107
 433 002a 0120     		movs	r0, #1
 242:main.c        ****   if (temp1>0)
 434              		.loc 1 242 8 view .LVU108
 435 002c 5B1A     		subs	r3, r3, r1
 436              	.LVL32:
 243:main.c        ****   if (temp1>0)
 437              		.loc 1 243 3 is_stmt 1 view .LVU109
 243:main.c        ****   if (temp1>0)
 438              		.loc 1 243 6 is_stmt 0 view .LVU110
 439 002e 002B     		cmp	r3, #0
 440 0030 06DD     		ble	.L22
 245:main.c        ****     {// not overlapping
 441              		.loc 1 245 5 is_stmt 1 view .LVU111
 245:main.c        ****     {// not overlapping
 442              		.loc 1 245 15 is_stmt 0 view .LVU112
 443 0032 053B     		subs	r3, r3, #5
 444              	.LVL33:
ARM GAS  main.s 			page 14


 245:main.c        ****     {// not overlapping
 445              		.loc 1 245 8 view .LVU113
 446 0034 002B     		cmp	r3, #0
 447 0036 03DD     		ble	.L22
 247:main.c        **** 	return SKIP;
 448              		.loc 1 247 7 is_stmt 1 view .LVU114
 247:main.c        **** 	return SKIP;
 449              		.loc 1 247 10 is_stmt 0 view .LVU115
 450 0038 D017     		asrs	r0, r2, #31
 451 003a D90F     		lsrs	r1, r3, #31
 452              	.LVL34:
 247:main.c        **** 	return SKIP;
 453              		.loc 1 247 10 view .LVU116
 454 003c 9A42     		cmp	r2, r3
 455 003e 4841     		adcs	r0, r0, r1
 456              	.L22:
 250:main.c        ****     }
 251:main.c        ****     else
 252:main.c        ****       return OVERLAP;
 253:main.c        ****   }
 254:main.c        ****   else // largerXislower
 255:main.c        ****   {
 256:main.c        ****     if ((temp1=(temp1^0xFF)-5)>0)
 257:main.c        ****       return OVERLAP;
 258:main.c        ****     else
 259:main.c        ****     {//notoverlapping
 260:main.c        ****       if (temp1>RIOT[player1height+b])
 261:main.c        ****         return NOOVERLAP;
 262:main.c        ****       else return OVERLAP;
 263:main.c        ****     }
 264:main.c        ****   }
 265:main.c        **** }
 457              		.loc 1 265 1 view .LVU117
 458              		@ sp needed
 459 0040 10BD     		pop	{r4, pc}
 460              	.L30:
 461 0042 C046     		.align	2
 462              	.L29:
 463 0044 00000000 		.word	.LANCHOR1
 464              		.cfi_endproc
 465              	.LFE7:
 467              		.section	.text.copynybble,"ax",%progbits
 468              		.align	1
 469              		.global	copynybble
 470              		.syntax unified
 471              		.code	16
 472              		.thumb_func
 474              	copynybble:
 475              	.LVL35:
 476              	.LFB8:
 266:main.c        **** 
 267:main.c        **** void copynybble(unsigned char num)
 268:main.c        **** {
 477              		.loc 1 268 1 is_stmt 1 view -0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 8
 480              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  main.s 			page 15


 269:main.c        ****     int i;
 481              		.loc 1 269 5 view .LVU119
 270:main.c        ****     unsigned char *destination;
 482              		.loc 1 270 5 view .LVU120
 271:main.c        ****     unsigned char *source;
 483              		.loc 1 271 5 view .LVU121
 272:main.c        ****     destination=queue+(scorepointer(1)<<8)+scorepointer(0)+((temp5++)<<3);
 484              		.loc 1 272 5 view .LVU122
 268:main.c        ****     int i;
 485              		.loc 1 268 1 is_stmt 0 view .LVU123
 486 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 487              		.cfi_def_cfa_offset 32
 488              		.cfi_offset 0, -32
 489              		.cfi_offset 1, -28
 490              		.cfi_offset 2, -24
 491              		.cfi_offset 4, -20
 492              		.cfi_offset 5, -16
 493              		.cfi_offset 6, -12
 494              		.cfi_offset 7, -8
 495              		.cfi_offset 14, -4
 496              		.loc 1 272 35 view .LVU124
 497 0002 144A     		ldr	r2, .L34
 498              		.loc 1 272 67 view .LVU125
 499 0004 144F     		ldr	r7, .L34+4
 500              		.loc 1 272 35 view .LVU126
 501 0006 5168     		ldr	r1, [r2, #4]
 268:main.c        ****     int i;
 502              		.loc 1 268 1 view .LVU127
 503 0008 0190     		str	r0, [sp, #4]
 504              		.loc 1 272 35 view .LVU128
 505 000a 0B00     		movs	r3, r1
 506 000c 3933     		adds	r3, r3, #57
 507              		.loc 1 272 43 view .LVU129
 508 000e 1D78     		ldrb	r5, [r3]
 509              		.loc 1 272 59 view .LVU130
 510 0010 013B     		subs	r3, r3, #1
 511 0012 1E78     		ldrb	r6, [r3]
 512              		.loc 1 272 75 view .LVU131
 513 0014 9368     		ldr	r3, [r2, #8]
 514              		.loc 1 272 67 view .LVU132
 515 0016 7C68     		ldr	r4, [r7, #4]
 516              		.loc 1 272 75 view .LVU133
 517 0018 581C     		adds	r0, r3, #1
 518              	.LVL36:
 519              		.loc 1 272 75 view .LVU134
 520 001a 9060     		str	r0, [r2, #8]
 273:main.c        ****     source=flashdata+(scoregraphics(1)<<8)+scoregraphics(0)+((num&0x0F)<<3);
 521              		.loc 1 273 66 view .LVU135
 522 001c BA68     		ldr	r2, [r7, #8]
 523              		.loc 1 273 78 view .LVU136
 524 001e 7827     		movs	r7, #120
 525 0020 0198     		ldr	r0, [sp, #4]
 272:main.c        ****     destination=queue+(scorepointer(1)<<8)+scorepointer(0)+((temp5++)<<3);
 526              		.loc 1 272 78 view .LVU137
 527 0022 DB00     		lsls	r3, r3, #3
 528              		.loc 1 273 78 view .LVU138
 529 0024 C000     		lsls	r0, r0, #3
ARM GAS  main.s 			page 16


 530 0026 3840     		ands	r0, r7
 531              		.loc 1 273 46 view .LVU139
 532 0028 0F00     		movs	r7, r1
 533 002a 3731     		adds	r1, r1, #55
 534 002c 0978     		ldrb	r1, [r1]
 535 002e 3637     		adds	r7, r7, #54
 536 0030 3F78     		ldrb	r7, [r7]
 537 0032 0902     		lsls	r1, r1, #8
 538 0034 3943     		orrs	r1, r7
 539              		.loc 1 273 66 view .LVU140
 540 0036 4018     		adds	r0, r0, r1
 272:main.c        ****     destination=queue+(scorepointer(1)<<8)+scorepointer(0)+((temp5++)<<3);
 541              		.loc 1 272 43 view .LVU141
 542 0038 2D02     		lsls	r5, r5, #8
 543              		.loc 1 273 5 is_stmt 1 view .LVU142
 544              	.LVL37:
 274:main.c        ****     for(i=0;i<8;i++)
 545              		.loc 1 274 5 view .LVU143
 546              		.loc 1 274 14 view .LVU144
 272:main.c        ****     source=flashdata+(scoregraphics(1)<<8)+scoregraphics(0)+((num&0x0F)<<3);
 547              		.loc 1 272 67 is_stmt 0 view .LVU145
 548 003a 9B19     		adds	r3, r3, r6
 549 003c 1118     		adds	r1, r2, r0
 550              	.LVL38:
 272:main.c        ****     source=flashdata+(scoregraphics(1)<<8)+scoregraphics(0)+((num&0x0F)<<3);
 551              		.loc 1 272 67 view .LVU146
 552 003e 5B19     		adds	r3, r3, r5
 553 0040 083A     		subs	r2, r2, #8
 554 0042 E418     		adds	r4, r4, r3
 555 0044 1218     		adds	r2, r2, r0
 556              	.LVL39:
 557              	.L32:
 275:main.c        ****       destination[i] = source[7-i];
 558              		.loc 1 275 7 is_stmt 1 discriminator 3 view .LVU147
 559              		.loc 1 275 30 is_stmt 0 discriminator 3 view .LVU148
 560 0046 CB79     		ldrb	r3, [r1, #7]
 274:main.c        ****     for(i=0;i<8;i++)
 561              		.loc 1 274 14 discriminator 3 view .LVU149
 562 0048 0139     		subs	r1, r1, #1
 563              		.loc 1 275 22 discriminator 3 view .LVU150
 564 004a 2370     		strb	r3, [r4]
 274:main.c        ****     for(i=0;i<8;i++)
 565              		.loc 1 274 18 is_stmt 1 discriminator 3 view .LVU151
 274:main.c        ****     for(i=0;i<8;i++)
 566              		.loc 1 274 14 discriminator 3 view .LVU152
 567 004c 0134     		adds	r4, r4, #1
 274:main.c        ****     for(i=0;i<8;i++)
 568              		.loc 1 274 14 is_stmt 0 discriminator 3 view .LVU153
 569 004e 9142     		cmp	r1, r2
 570 0050 F9D1     		bne	.L32
 276:main.c        **** }
 571              		.loc 1 276 1 view .LVU154
 572              		@ sp needed
 573              		.loc 1 276 1 view .LVU155
 574 0052 F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 575              	.L35:
 576              		.align	2
ARM GAS  main.s 			page 17


 577              	.L34:
 578 0054 00000000 		.word	.LANCHOR0
 579 0058 00000000 		.word	.LANCHOR1
 580              		.cfi_endproc
 581              	.LFE8:
 583              		.section	.text.on_off_flip,"ax",%progbits
 584              		.align	1
 585              		.global	on_off_flip
 586              		.syntax unified
 587              		.code	16
 588              		.thumb_func
 590              	on_off_flip:
 591              	.LVL40:
 592              	.LFB9:
 277:main.c        **** 
 278:main.c        **** void on_off_flip(unsigned int loc, unsigned int fnmask)
 279:main.c        **** {
 593              		.loc 1 279 1 is_stmt 1 view -0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 0
 596              		@ frame_needed = 0, uses_anonymous_args = 0
 597              		@ link register save eliminated.
 280:main.c        ****   switch(C_function[0]&3)
 598              		.loc 1 280 3 view .LVU157
 599 0000 0322     		movs	r2, #3
 600              		.loc 1 280 20 is_stmt 0 view .LVU158
 601 0002 0D4B     		ldr	r3, .L41
 602 0004 DB68     		ldr	r3, [r3, #12]
 603 0006 1B78     		ldrb	r3, [r3]
 604 0008 1340     		ands	r3, r2
 605              		.loc 1 280 3 view .LVU159
 606 000a 012B     		cmp	r3, #1
 607 000c 09D0     		beq	.L37
 608 000e 022B     		cmp	r3, #2
 609 0010 0CD0     		beq	.L38
 610 0012 002B     		cmp	r3, #0
 611 0014 04D1     		bne	.L36
 281:main.c        ****   {
 282:main.c        ****     case 0://on
 283:main.c        ****       pfpixel[loc]|=fnmask;
 612              		.loc 1 283 7 is_stmt 1 view .LVU160
 613              		.loc 1 283 14 is_stmt 0 view .LVU161
 614 0016 094B     		ldr	r3, .L41+4
 615 0018 DA68     		ldr	r2, [r3, #12]
 616              		.loc 1 283 19 view .LVU162
 617 001a 135C     		ldrb	r3, [r2, r0]
 618 001c 0B43     		orrs	r3, r1
 619              	.L40:
 284:main.c        ****       return;
 285:main.c        ****     case 1://off
 286:main.c        ****       pfpixel[loc]&=~fnmask;
 287:main.c        ****       return;
 288:main.c        ****     case 2://flip
 289:main.c        ****       pfpixel[loc]^=fnmask;
 620              		.loc 1 289 19 view .LVU163
 621 001e 1354     		strb	r3, [r2, r0]
 290:main.c        ****       return;
ARM GAS  main.s 			page 18


 622              		.loc 1 290 7 is_stmt 1 view .LVU164
 623              	.L36:
 291:main.c        ****     default://reserved (for what?)
 292:main.c        ****       break;
 293:main.c        ****   }
 294:main.c        **** }
 624              		.loc 1 294 1 is_stmt 0 view .LVU165
 625              		@ sp needed
 626 0020 7047     		bx	lr
 627              	.L37:
 286:main.c        ****       return;
 628              		.loc 1 286 7 is_stmt 1 view .LVU166
 286:main.c        ****       return;
 629              		.loc 1 286 14 is_stmt 0 view .LVU167
 630 0022 064B     		ldr	r3, .L41+4
 631 0024 DA68     		ldr	r2, [r3, #12]
 286:main.c        ****       return;
 632              		.loc 1 286 19 view .LVU168
 633 0026 135C     		ldrb	r3, [r2, r0]
 634 0028 8B43     		bics	r3, r1
 635 002a F8E7     		b	.L40
 636              	.L38:
 289:main.c        ****       return;
 637              		.loc 1 289 7 is_stmt 1 view .LVU169
 289:main.c        ****       return;
 638              		.loc 1 289 14 is_stmt 0 view .LVU170
 639 002c 034B     		ldr	r3, .L41+4
 640 002e DA68     		ldr	r2, [r3, #12]
 289:main.c        ****       return;
 641              		.loc 1 289 19 view .LVU171
 642 0030 135C     		ldrb	r3, [r2, r0]
 643 0032 4B40     		eors	r3, r1
 644 0034 F3E7     		b	.L40
 645              	.L42:
 646 0036 C046     		.align	2
 647              	.L41:
 648 0038 00000000 		.word	.LANCHOR1
 649 003c 00000000 		.word	.LANCHOR0
 650              		.cfi_endproc
 651              	.LFE9:
 653              		.section	.rodata.str1.1,"aMS",%progbits,1
 654              	.LC11:
 655 0000 80402010 		.ascii	"\200@ \020\010\004\002\001\001\002\004\010\020 @\200"
 655      08040201 
 655      01020408 
 655      10204080 
 656 0010 80402010 		.ascii	"\200@ \020\010\004\002\001\001\002\004\010\020 @\200"
 656      08040201 
 656      01020408 
 656      10204080 
 657 0020 00       		.ascii	"\000"
 658              		.section	.text.startup.main,"ax",%progbits
 659              		.align	1
 660              		.global	main
 661              		.syntax unified
 662              		.code	16
 663              		.thumb_func
ARM GAS  main.s 			page 19


 665              	main:
 666              	.LFB10:
 295:main.c        **** 
 296:main.c        **** // main() is what gets called when you store 0xFF into DPC+ register CALLFUNCTION in your 6507 code
 297:main.c        **** int main()
 298:main.c        **** {
 667              		.loc 1 298 1 is_stmt 1 view -0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 64
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 299:main.c        **** 
 300:main.c        ****   int i;
 671              		.loc 1 300 3 view .LVU173
 301:main.c        **** 
 302:main.c        ****   // moving the the scope of these variables saved a *lot* of space. 
 303:main.c        ****   int temp2;
 672              		.loc 1 303 3 view .LVU174
 304:main.c        ****   int temp3;
 673              		.loc 1 304 3 view .LVU175
 305:main.c        ****   int Gfxindex;
 674              		.loc 1 305 3 view .LVU176
 306:main.c        ****   unsigned char *HMdiv=(unsigned char *)(0x20000c00+0x1000);
 675              		.loc 1 306 3 view .LVU177
 676              	.LVL41:
 307:main.c        ****   const unsigned char setbyte[32]=
 677              		.loc 1 307 3 view .LVU178
 298:main.c        **** 
 678              		.loc 1 298 1 is_stmt 0 view .LVU179
 679 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 680              		.cfi_def_cfa_offset 20
 681              		.cfi_offset 4, -20
 682              		.cfi_offset 5, -16
 683              		.cfi_offset 6, -12
 684              		.cfi_offset 7, -8
 685              		.cfi_offset 14, -4
 686 0002 91B0     		sub	sp, sp, #68
 687              		.cfi_def_cfa_offset 88
 688              		.loc 1 307 23 view .LVU180
 689 0004 2022     		movs	r2, #32
 690 0006 CA49     		ldr	r1, .L104
 691 0008 08A8     		add	r0, sp, #32
 692 000a FFF7FEFF 		bl	memcpy
 693              	.LVL42:
 308:main.c        **** 	{0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01,
 309:main.c        **** 	 0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
 310:main.c        **** 	 0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01,
 311:main.c        **** 	 0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
 312:main.c        **** 
 313:main.c        ****   fetcheraddr=flashdata+fetcher_address_table[0];
 694              		.loc 1 313 3 is_stmt 1 view .LVU181
 695              		.loc 1 313 24 is_stmt 0 view .LVU182
 696 000e C94C     		ldr	r4, .L104+4
 697              		.loc 1 313 14 view .LVU183
 698 0010 C94E     		ldr	r6, .L104+8
 699              		.loc 1 313 46 view .LVU184
 700 0012 2369     		ldr	r3, [r4, #16]
 701 0014 1A88     		ldrh	r2, [r3]
ARM GAS  main.s 			page 20


 702              		.loc 1 313 24 view .LVU185
 703 0016 A368     		ldr	r3, [r4, #8]
 704 0018 9B18     		adds	r3, r3, r2
 705 001a 0322     		movs	r2, #3
 706              		.loc 1 313 14 view .LVU186
 707 001c 7360     		str	r3, [r6, #4]
 314:main.c        **** 
 315:main.c        ****   // preindex these to save some space...
 316:main.c        ****   unsigned char C_function1=C_function[1];
 708              		.loc 1 316 3 is_stmt 1 view .LVU187
 709              		.loc 1 316 17 is_stmt 0 view .LVU188
 710 001e E368     		ldr	r3, [r4, #12]
 711 0020 0293     		str	r3, [sp, #8]
 712 0022 5B78     		ldrb	r3, [r3, #1]
 713 0024 0193     		str	r3, [sp, #4]
 714              	.LVL43:
 317:main.c        ****   unsigned char C_function2=C_function[2];
 715              		.loc 1 317 3 is_stmt 1 view .LVU189
 716              		.loc 1 317 17 is_stmt 0 view .LVU190
 717 0026 029B     		ldr	r3, [sp, #8]
 718 0028 9D78     		ldrb	r5, [r3, #2]
 719              	.LVL44:
 318:main.c        ****   unsigned char C_function3=C_function[3];
 720              		.loc 1 318 3 is_stmt 1 view .LVU191
 721              		.loc 1 318 17 is_stmt 0 view .LVU192
 722 002a DF78     		ldrb	r7, [r3, #3]
 723              	.LVL45:
 319:main.c        **** 
 320:main.c        ****   switch (C_function[0]&0xFC)
 724              		.loc 1 320 3 is_stmt 1 view .LVU193
 725 002c 1B78     		ldrb	r3, [r3]
 726 002e 9343     		bics	r3, r2
 727 0030 142B     		cmp	r3, #20
 728 0032 00D1     		bne	.LCB589
 729 0034 DDE0     		b	.L44	@long jump
 730              	.LCB589:
 731 0036 00D9     		bls	.LCB591
 732 0038 90E0     		b	.L45	@long jump
 733              	.LCB591:
 734 003a 0C2B     		cmp	r3, #12
 735 003c 00D1     		bne	.LCB593
 736 003e CCE0     		b	.L46	@long jump
 737              	.LCB593:
 738 0040 00D9     		bls	.LCB595
 739 0042 82E0     		b	.L47	@long jump
 740              	.LCB595:
 741 0044 042B     		cmp	r3, #4
 742 0046 00D1     		bne	.LCB597
 743 0048 A3E0     		b	.L48	@long jump
 744              	.LCB597:
 745 004a 082B     		cmp	r3, #8
 746 004c 00D1     		bne	.LCB599
 747 004e C0E0     		b	.L58	@long jump
 748              	.LCB599:
 749              	.L50:
 321:main.c        ****   {
 322:main.c        ****     case 4: // pfvline xpos ypos endypos function
ARM GAS  main.s 			page 21


 323:main.c        ****     {
 324:main.c        ****       pfpixel=queue+get32bitdff(C_function3>>3); // physical addy of xpos (pf)
 325:main.c        ****       for (i=C_function2;i<=C_function1;++i)
 326:main.c        ****       {
 327:main.c        ****         on_off_flip(i,setbyte[C_function3]);
 328:main.c        ****       }
 329:main.c        ****       return;
 330:main.c        ****     }
 331:main.c        ****     case 8: // pfhline
 332:main.c        ****     {
 333:main.c        ****       for (i=C_function3;i<=C_function1;++i)
 334:main.c        ****       {
 335:main.c        ****         pfpixel=queue+get32bitdff(i>>3); // physical addy of xpos (pf)
 336:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 337:main.c        ****       }
 338:main.c        ****       return;
 339:main.c        ****     }
 340:main.c        ****     case 12: // pfpixel
 341:main.c        ****     {
 342:main.c        ****       pfpixel=queue+get32bitdff(C_function3>>3); // physical addy of xpos (pf)
 343:main.c        ****       on_off_flip(C_function2,setbyte[C_function3]);
 344:main.c        ****       return;
 345:main.c        ****     }
 346:main.c        ****     case 16: // zero-fill
 347:main.c        ****     {
 348:main.c        ****       my_memset(RIOT+player1pointerlo,0,4096-0x1a8-player1pointerlo);
 349:main.c        ****       return;
 350:main.c        ****     }
 351:main.c        ****     case 20: // collision check
 352:main.c        ****     {
 353:main.c        ****       // takes virtual sprite, returns coll
 354:main.c        ****       // syntax: sprite[1], sprite[2] (missiles, ball not yet, pf done another way)
 355:main.c        ****       // draw sprites in virtual area
 356:main.c        ****       C_function[3]=0;
 357:main.c        ****       temp2=0;
 358:main.c        ****       for (i=RIOT[player0y+C_function2];i<RIOT[player0y+C_function2]+RIOT[player0height+C_function2
 359:main.c        ****       {
 360:main.c        ****         if ((i>=RIOT[player0y+C_function1]) && (i<RIOT[player0y+C_function1]+RIOT[player0height+C_f
 361:main.c        **** 	{
 362:main.c        **** 
 363:main.c        ****           temp3=RIOT[player0x+C_function2]-RIOT[player0x+C_function1]+7; //-7 to +7 -> 0 to 14
 364:main.c        ****           if (temp3<15)
 365:main.c        **** 	  {
 366:main.c        ****             temp2=((flashdata[(RIOT[player0pointerhi+C_function2*2]<<8)+RIOT[player0pointerlo+C_fun
 367:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 368:main.c        **** 	  }
 369:main.c        **** 	  if (temp2) 
 370:main.c        **** 	  {
 371:main.c        **** 	    C_function[3]=255;
 372:main.c        **** 	    return;
 373:main.c        **** 	  }
 374:main.c        **** 	}
 375:main.c        ****       }
 376:main.c        ****       return;
 377:main.c        ****     }
 378:main.c        ****     case 24: // pfread 
 379:main.c        ****     {
ARM GAS  main.s 			page 22


 380:main.c        ****       pfpixel=queue+get32bitdff(C_function1>>3); // physical addy of xpos (pf)
 381:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 382:main.c        ****       return;
 383:main.c        ****     }
 384:main.c        ****     case 28: // pfclear
 385:main.c        ****     {
 386:main.c        ****       my_memset(queue+get32bitdff(0),C_function1,1024);
 387:main.c        ****       return;
 388:main.c        ****     }
 389:main.c        ****     case 32: // pfscroll
 390:main.c        ****     {
 391:main.c        ****       for(temp3=C_function2;temp3<C_function3;temp3++)
 392:main.c        ****         memscroll(queue+get32bitdff(temp3),C_function1);
 393:main.c        ****       return;
 394:main.c        ****     }
 395:main.c        **** 
 396:main.c        ****   default: // everything else
 397:main.c        ****    break;
 750              		.loc 1 397 4 view .LVU194
 398:main.c        ****   }
 399:main.c        **** 
 400:main.c        ****   //passed the sprite max as a parameter instead
 401:main.c        ****   maxsprites=C_function1;
 751              		.loc 1 401 3 view .LVU195
 402:main.c        **** 
 403:main.c        ****   for (i=0;i<maxsprites;i++)
 404:main.c        ****   {
 405:main.c        ****     myGfxIndex[i]=spritesort[i];
 752              		.loc 1 405 18 is_stmt 0 view .LVU196
 753 0050 2000     		movs	r0, r4
 401:main.c        **** 
 754              		.loc 1 401 13 view .LVU197
 755 0052 019B     		ldr	r3, [sp, #4]
 756              		.loc 1 405 18 view .LVU198
 757 0054 1E34     		adds	r4, r4, #30
 758 0056 1A00     		movs	r2, r3
 759 0058 2100     		movs	r1, r4
 760 005a 1430     		adds	r0, r0, #20
 401:main.c        **** 
 761              		.loc 1 401 13 view .LVU199
 762 005c 3374     		strb	r3, [r6, #16]
 403:main.c        ****   {
 763              		.loc 1 403 3 is_stmt 1 view .LVU200
 764              	.LVL46:
 765              		.loc 1 405 18 is_stmt 0 view .LVU201
 766 005e FFF7FEFF 		bl	memcpy
 767              	.LVL47:
 406:main.c        ****   }
 407:main.c        **** //loop
 408:main.c        ****   temp3=maxsprites-1;
 768              		.loc 1 408 3 is_stmt 1 view .LVU202
 769              		.loc 1 408 8 is_stmt 0 view .LVU203
 770 0062 019B     		ldr	r3, [sp, #4]
 771 0064 5F1E     		subs	r7, r3, #1
 772              	.LVL48:
 409:main.c        ****   temp2=maxsprites-2;
 773              		.loc 1 409 3 is_stmt 1 view .LVU204
ARM GAS  main.s 			page 23


 410:main.c        ****  while (temp2>=0)
 774              		.loc 1 410 2 view .LVU205
 775 0066 9D1E     		subs	r5, r3, #2
 776              	.LVL49:
 777              		.loc 1 410 2 is_stmt 0 view .LVU206
 778 0068 6619     		adds	r6, r4, r5
 408:main.c        ****   temp2=maxsprites-2;
 779              		.loc 1 408 8 view .LVU207
 780 006a 0297     		str	r7, [sp, #8]
 781              	.LVL50:
 782              	.L66:
 783              		.loc 1 410 14 is_stmt 1 view .LVU208
 784 006c 002D     		cmp	r5, #0
 785 006e 00DB     		blt	.LCB636
 786 0070 2CE1     		b	.L70	@long jump
 787              	.LCB636:
 411:main.c        ****  {
 412:main.c        ****   switch(checkswap(spritesort[temp2+1],spritesort[temp2]))
 413:main.c        ****   {
 414:main.c        ****     case OVERLAP:
 415:main.c        ****       temp3--;
 416:main.c        ****       /* shiftnumbers(temp2); */
 417:main.c        **** 	  temp4 = temp2;
 418:main.c        **** 	  while (temp4!=maxsprites-1)
 419:main.c        **** 	  {
 420:main.c        **** 		myGfxIndex[temp4]=myGfxIndex[temp4+1];
 421:main.c        **** 		temp4++;
 422:main.c        **** 	  }
 423:main.c        ****       break;
 424:main.c        ****     case NOOVERLAP:
 425:main.c        ****       break;
 426:main.c        ****     case SKIP:
 427:main.c        ****       temp2--;
 428:main.c        ****     default:
 429:main.c        ****       continue;
 430:main.c        ****   }
 431:main.c        ****   // skipswapgfxtable
 432:main.c        ****   i=spritesort[temp2+1];
 433:main.c        ****   spritesort[temp2+1]=spritesort[temp2];
 434:main.c        ****   spritesort[temp2]=i;
 435:main.c        ****   temp2--;
 436:main.c        ****  }
 437:main.c        ****   for (i=0;i<maxsprites;i++)
 788              		.loc 1 437 9 is_stmt 0 view .LVU209
 789 0072 0023     		movs	r3, #0
 438:main.c        ****     RIOT[SpriteGfxIndex+i]=myGfxIndex[i];
 790              		.loc 1 438 9 view .LVU210
 791 0074 AF4C     		ldr	r4, .L104+4
 437:main.c        ****     RIOT[SpriteGfxIndex+i]=myGfxIndex[i];
 792              		.loc 1 437 13 view .LVU211
 793 0076 B04D     		ldr	r5, .L104+8
 794              	.LVL51:
 795              		.loc 1 438 38 view .LVU212
 796 0078 B048     		ldr	r0, .L104+12
 797              	.L74:
 798              	.LVL52:
 437:main.c        ****     RIOT[SpriteGfxIndex+i]=myGfxIndex[i];
ARM GAS  main.s 			page 24


 799              		.loc 1 437 13 is_stmt 1 discriminator 1 view .LVU213
 800 007a 297C     		ldrb	r1, [r5, #16]
 801              		.loc 1 438 9 is_stmt 0 discriminator 1 view .LVU214
 802 007c 2268     		ldr	r2, [r4]
 437:main.c        ****     RIOT[SpriteGfxIndex+i]=myGfxIndex[i];
 803              		.loc 1 437 13 discriminator 1 view .LVU215
 804 007e 9942     		cmp	r1, r3
 805 0080 00DD     		ble	.LCB649
 806 0082 51E1     		b	.L75	@long jump
 807              	.LCB649:
 439:main.c        ****   RIOT[spritedisplay]=temp3;
 808              		.loc 1 439 3 is_stmt 1 view .LVU216
 809              		.loc 1 439 22 is_stmt 0 view .LVU217
 810 0084 029B     		ldr	r3, [sp, #8]
 811              	.LVL53:
 440:main.c        ****   // fetcher setup
 441:main.c        ****   //my_memset(queue+(dfhigh(3)<<8)+dflow(3),0,192);
 442:main.c        ****   my_memset(queue+get32bitdf(3),0,192);
 812              		.loc 1 442 19 view .LVU218
 813 0086 0320     		movs	r0, #3
 439:main.c        ****   RIOT[spritedisplay]=temp3;
 814              		.loc 1 439 22 view .LVU219
 815 0088 5372     		strb	r3, [r2, #9]
 816              		.loc 1 442 3 is_stmt 1 view .LVU220
 817              		.loc 1 442 19 is_stmt 0 view .LVU221
 818 008a FFF7FEFF 		bl	get32bitdf
 819              	.LVL54:
 820              		.loc 1 442 3 view .LVU222
 821 008e 6668     		ldr	r6, [r4, #4]
 822 0090 C022     		movs	r2, #192
 823 0092 0021     		movs	r1, #0
 824              		.loc 1 442 18 view .LVU223
 825 0094 3018     		adds	r0, r6, r0
 826              		.loc 1 442 3 view .LVU224
 827 0096 FFF7FEFF 		bl	my_memset
 828              	.LVL55:
 443:main.c        **** 
 444:main.c        ****   //my_memset(queue+(dfhigh(1)<<8)+dflow(1),RIOT[COLUM1],192); // clear multiplexed sprites and fil
 445:main.c        ****   my_memset(queue+get32bitdf(1),RIOT[COLUM1],192); // clear multiplexed sprites and fill colors
 829              		.loc 1 445 3 is_stmt 1 view .LVU225
 830              		.loc 1 445 19 is_stmt 0 view .LVU226
 831 009a 0120     		movs	r0, #1
 832 009c FFF7FEFF 		bl	get32bitdf
 833              	.LVL56:
 834              		.loc 1 445 37 view .LVU227
 835 00a0 2368     		ldr	r3, [r4]
 836              		.loc 1 445 3 view .LVU228
 837 00a2 6668     		ldr	r6, [r4, #4]
 838              		.loc 1 445 37 view .LVU229
 839 00a4 3733     		adds	r3, r3, #55
 840              		.loc 1 445 3 view .LVU230
 841 00a6 1978     		ldrb	r1, [r3]
 842 00a8 C022     		movs	r2, #192
 843              		.loc 1 445 18 view .LVU231
 844 00aa 3018     		adds	r0, r6, r0
 845              		.loc 1 445 3 view .LVU232
 846 00ac FFF7FEFF 		bl	my_memset
ARM GAS  main.s 			page 25


 847              	.LVL57:
 446:main.c        ****   //my_memset(queue+(dfhigh(0)<<8)+dflow(0)-1,RIOT[COLUM0],193); // fill COLUM0 colors
 447:main.c        ****   my_memset(queue+get32bitdf(0)-1,RIOT[COLUM0],193); // fill COLUM0 colors
 848              		.loc 1 447 3 is_stmt 1 view .LVU233
 849              		.loc 1 447 19 is_stmt 0 view .LVU234
 850 00b0 0020     		movs	r0, #0
 851 00b2 FFF7FEFF 		bl	get32bitdf
 852              	.LVL58:
 853              		.loc 1 447 39 view .LVU235
 854 00b6 2368     		ldr	r3, [r4]
 855              		.loc 1 447 3 view .LVU236
 856 00b8 6668     		ldr	r6, [r4, #4]
 857              		.loc 1 447 39 view .LVU237
 858 00ba 3633     		adds	r3, r3, #54
 859              		.loc 1 447 32 view .LVU238
 860 00bc 0138     		subs	r0, r0, #1
 861              		.loc 1 447 3 view .LVU239
 862 00be 1978     		ldrb	r1, [r3]
 863 00c0 C122     		movs	r2, #193
 864              		.loc 1 447 32 view .LVU240
 865 00c2 3018     		adds	r0, r6, r0
 866              		.loc 1 447 3 view .LVU241
 867 00c4 FFF7FEFF 		bl	my_memset
 868              	.LVL59:
 448:main.c        **** 
 449:main.c        ****   // fill color from player0, wrapping if necessary...
 450:main.c        ****   //my_memcpy(queue+(dfhigh(0)<<8)+dflow(0),
 451:main.c        ****   my_memcpy(queue+get32bitdf(0),
 869              		.loc 1 451 3 is_stmt 1 view .LVU242
 870              		.loc 1 451 19 is_stmt 0 view .LVU243
 871 00c8 0020     		movs	r0, #0
 872 00ca FFF7FEFF 		bl	get32bitdf
 873              	.LVL60:
 452:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 874              		.loc 1 452 28 view .LVU244
 875 00ce 2168     		ldr	r1, [r4]
 451:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 876              		.loc 1 451 3 view .LVU245
 877 00d0 6668     		ldr	r6, [r4, #4]
 878 00d2 0A7D     		ldrb	r2, [r1, #20]
 879              		.loc 1 452 48 view .LVU246
 880 00d4 8F7F     		ldrb	r7, [r1, #30]
 453:main.c        ****             RIOT[player0height]);
 881              		.loc 1 453 17 view .LVU247
 882 00d6 4B1C     		adds	r3, r1, #1
 452:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 883              		.loc 1 452 48 view .LVU248
 884 00d8 C97F     		ldrb	r1, [r1, #31]
 451:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 885              		.loc 1 451 3 view .LVU249
 886 00da DB7F     		ldrb	r3, [r3, #31]
 452:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 887              		.loc 1 452 48 view .LVU250
 888 00dc 0902     		lsls	r1, r1, #8
 889 00de 3943     		orrs	r1, r7
 890 00e0 A768     		ldr	r7, [r4, #8]
 451:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
ARM GAS  main.s 			page 26


 891              		.loc 1 451 18 view .LVU251
 892 00e2 3018     		adds	r0, r6, r0
 452:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 893              		.loc 1 452 48 view .LVU252
 894 00e4 7918     		adds	r1, r7, r1
 451:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 895              		.loc 1 451 3 view .LVU253
 896 00e6 FFF7FEFF 		bl	my_memcpy
 897              	.LVL61:
 454:main.c        **** 
 455:main.c        ****   //my_memcpy(queue+(dfhigh(2)<<8)+dflow(2),
 456:main.c        ****   my_memcpy(queue+get32bitdf(2),
 898              		.loc 1 456 3 is_stmt 1 view .LVU254
 899              		.loc 1 456 19 is_stmt 0 view .LVU255
 900 00ea 0220     		movs	r0, #2
 901 00ec FFF7FEFF 		bl	get32bitdf
 902              	.LVL62:
 457:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 903              		.loc 1 457 28 view .LVU256
 904 00f0 2268     		ldr	r2, [r4]
 456:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 905              		.loc 1 456 3 view .LVU257
 906 00f2 6668     		ldr	r6, [r4, #4]
 907              		.loc 1 457 50 view .LVU258
 908 00f4 1100     		movs	r1, r2
 458:main.c        ****             RIOT[player0height]);
 909              		.loc 1 458 17 view .LVU259
 910 00f6 531C     		adds	r3, r2, #1
 457:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 911              		.loc 1 457 50 view .LVU260
 912 00f8 3932     		adds	r2, r2, #57
 913 00fa 1278     		ldrb	r2, [r2]
 914 00fc 3831     		adds	r1, r1, #56
 915 00fe 0978     		ldrb	r1, [r1]
 916 0100 1202     		lsls	r2, r2, #8
 917 0102 0A43     		orrs	r2, r1
 918 0104 A168     		ldr	r1, [r4, #8]
 456:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 919              		.loc 1 456 3 view .LVU261
 920 0106 DB7F     		ldrb	r3, [r3, #31]
 457:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 921              		.loc 1 457 50 view .LVU262
 922 0108 8918     		adds	r1, r1, r2
 456:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 923              		.loc 1 456 18 view .LVU263
 924 010a 3018     		adds	r0, r6, r0
 456:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 925              		.loc 1 456 3 view .LVU264
 926 010c 0022     		movs	r2, #0
 927 010e FFF7FEFF 		bl	my_memcpy
 928              	.LVL63:
 459:main.c        **** 
 460:main.c        ****   count=0;
 929              		.loc 1 460 3 is_stmt 1 view .LVU265
 930              		.loc 1 460 8 is_stmt 0 view .LVU266
 931 0112 0023     		movs	r3, #0
 932 0114 AB61     		str	r3, [r5, #24]
ARM GAS  main.s 			page 27


 461:main.c        ****   temp4=0;
 933              		.loc 1 461 3 is_stmt 1 view .LVU267
 934              		.loc 1 461 8 is_stmt 0 view .LVU268
 935 0116 6B61     		str	r3, [r5, #20]
 462:main.c        ****   while (temp4 != 511)
 936              		.loc 1 462 3 is_stmt 1 view .LVU269
 937              	.LVL64:
 938              	.L76:
 939              		.loc 1 462 16 view .LVU270
 940 0118 8749     		ldr	r1, .L104+8
 463:main.c        ****   {
 464:main.c        ****     Gfxindex=myGfxIndex[count];
 465:main.c        **** //check if on screen, copy only if it is
 466:main.c        **** //    if (RIOT[player1y+Gfxindex]<175)
 467:main.c        ****   //  {
 468:main.c        **** 
 469:main.c        ****  // masking: NUSIZ bit 7=on/off, NUSIZ 6=L/R
 470:main.c        ****  // appears to happen @ 0x99-0x9F
 471:main.c        ****       mask = 0xFF;
 472:main.c        ****       if (RIOT[_NUSIZ1+Gfxindex]>127)
 941              		.loc 1 472 15 is_stmt 0 view .LVU271
 942 011a 864D     		ldr	r5, .L104+4
 462:main.c        ****   while (temp4 != 511)
 943              		.loc 1 462 16 view .LVU272
 944 011c 4B69     		ldr	r3, [r1, #20]
 945 011e 884A     		ldr	r2, .L104+16
 946              		.loc 1 472 15 view .LVU273
 947 0120 2C68     		ldr	r4, [r5]
 462:main.c        ****   while (temp4 != 511)
 948              		.loc 1 462 16 view .LVU274
 949 0122 9342     		cmp	r3, r2
 950 0124 00D0     		beq	.LCB743
 951 0126 0FE1     		b	.L82	@long jump
 952              	.LCB743:
 473:main.c        ****       {
 474:main.c        ****         if (RIOT[player1x+Gfxindex]>=0x99)
 475:main.c        ****         {
 476:main.c        ****            // modified to work with reflected sprites
 477:main.c        ****            mask=maskdata[((RIOT[_NUSIZ1+Gfxindex]&64)>>3)^((RIOT[_NUSIZ1+Gfxindex]&8)<<1)|(RIOT[pla
 478:main.c        ****         }
 479:main.c        ****       }
 480:main.c        ****       //my_memcpy(queue+(dfhigh(3)<<8)+dflow(3),
 481:main.c        ****       my_memcpy(queue+get32bitdf(3),
 482:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 483:main.c        ****               RIOT[player1y+Gfxindex],
 484:main.c        ****               RIOT[player1height+Gfxindex]);
 485:main.c        ****       mask = 0xFF;
 486:main.c        ****       //my_memcpy(queue+(dfhigh(1)<<8)+dflow(1),
 487:main.c        ****       my_memcpy(queue+get32bitdf(1),
 488:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 489:main.c        **** 	      RIOT[player1y+Gfxindex],
 490:main.c        ****               RIOT[player1height+Gfxindex]);
 491:main.c        ****     //}
 492:main.c        ****     temp5=temp4;
 493:main.c        ****     temp4=(RIOT[player1y+Gfxindex]+RIOT[player1height+Gfxindex])&255; // &255 to allow for wrapped 
 494:main.c        ****     Gfxindex=myGfxIndex[count+1];
 495:main.c        ****     if ((count == temp3) || (RIOT[player1y+Gfxindex]>175) )
ARM GAS  main.s 			page 28


 496:main.c        ****     {
 497:main.c        ****       temp4=511;
 498:main.c        ****       temp5=0;
 499:main.c        ****     }
 500:main.c        **** 
 501:main.c        ****     // it looks like if vertical positioning is tight, cumulative round-off 
 502:main.c        ****     // can occur and eventually coarse positioning will happen during sprite display...
 503:main.c        ****      //queue[(dfhigh(4)<<8)+dflow(4)+count]=(temp4-temp5-(count>>1))>>1;
 504:main.c        ****      queue[get32bitdf(4)+count]=(temp4-temp5-(count>>1))>>1;
 505:main.c        **** 
 506:main.c        ****     if (RIOT[player1x+Gfxindex]>159)
 507:main.c        ****       RIOT[player1x+Gfxindex]-=(RIOT[player1x+Gfxindex]>208)?96:160;
 508:main.c        ****     queue[get32bitdff(5)+count]=RIOT[_NUSIZ1+Gfxindex];
 509:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 510:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 511:main.c        ****     queue[get32bitdf(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 512:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 513:main.c        ****     queue[get32bitdf(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 514:main.c        ****     count++;
 515:main.c        ****   }
 516:main.c        ****   temp5=1;
 953              		.loc 1 516 3 is_stmt 1 view .LVU275
 954              		.loc 1 516 8 is_stmt 0 view .LVU276
 955 0128 0123     		movs	r3, #1
 517:main.c        **** 
 518:main.c        ****   for (i = score; i <= score3; i++) {
 956              		.loc 1 518 10 view .LVU277
 957 012a 3324     		movs	r4, #51
 516:main.c        **** 
 958              		.loc 1 516 8 view .LVU278
 959 012c 8B60     		str	r3, [r1, #8]
 960              		.loc 1 518 3 is_stmt 1 view .LVU279
 961              	.LVL65:
 962              		.loc 1 518 21 view .LVU280
 963              	.L83:
 519:main.c        ****     copynybble(RIOT[i]);
 964              		.loc 1 519 5 discriminator 3 view .LVU281
 965 012e 2B68     		ldr	r3, [r5]
 966 0130 185D     		ldrb	r0, [r3, r4]
 967 0132 FFF7FEFF 		bl	copynybble
 968              	.LVL66:
 520:main.c        ****     copynybble(RIOT[i] >> 4);
 969              		.loc 1 520 5 discriminator 3 view .LVU282
 970              		.loc 1 520 20 is_stmt 0 discriminator 3 view .LVU283
 971 0136 2B68     		ldr	r3, [r5]
 972              		.loc 1 520 5 discriminator 3 view .LVU284
 973 0138 185D     		ldrb	r0, [r3, r4]
 518:main.c        ****     copynybble(RIOT[i]);
 974              		.loc 1 518 33 discriminator 3 view .LVU285
 975 013a 0134     		adds	r4, r4, #1
 976              	.LVL67:
 977              		.loc 1 520 5 discriminator 3 view .LVU286
 978 013c 0009     		lsrs	r0, r0, #4
 979 013e FFF7FEFF 		bl	copynybble
 980              	.LVL68:
 518:main.c        ****     copynybble(RIOT[i]);
 981              		.loc 1 518 33 is_stmt 1 discriminator 3 view .LVU287
ARM GAS  main.s 			page 29


 518:main.c        ****     copynybble(RIOT[i]);
 982              		.loc 1 518 21 discriminator 3 view .LVU288
 983 0142 362C     		cmp	r4, #54
 984 0144 F3D1     		bne	.L83
 521:main.c        ****   }
 522:main.c        **** 
 523:main.c        ****   return 0;
 985              		.loc 1 523 3 view .LVU289
 524:main.c        **** }
 986              		.loc 1 524 1 is_stmt 0 view .LVU290
 987 0146 0020     		movs	r0, #0
 988 0148 2CE0     		b	.L43
 989              	.LVL69:
 990              	.L47:
 320:main.c        ****   {
 991              		.loc 1 320 3 view .LVU291
 992 014a 102B     		cmp	r3, #16
 993 014c 80D1     		bne	.L50
 348:main.c        ****       return;
 994              		.loc 1 348 7 is_stmt 1 view .LVU292
 995 014e 0021     		movs	r1, #0
 996 0150 2068     		ldr	r0, [r4]
 997 0152 7C4A     		ldr	r2, .L104+20
 998 0154 3A30     		adds	r0, r0, #58
 999              	.L103:
 386:main.c        ****       return;
 1000              		.loc 1 386 7 is_stmt 0 view .LVU293
 1001 0156 FFF7FEFF 		bl	my_memset
 1002              	.LVL70:
 387:main.c        ****     }
 1003              		.loc 1 387 7 is_stmt 1 view .LVU294
 1004 015a 23E0     		b	.L43
 1005              	.L45:
 320:main.c        ****   {
 1006              		.loc 1 320 3 is_stmt 0 view .LVU295
 1007 015c 1C2B     		cmp	r3, #28
 1008 015e 00D1     		bne	.LCB800
 1009 0160 9CE0     		b	.L52	@long jump
 1010              	.LCB800:
 391:main.c        ****         memscroll(queue+get32bitdff(temp3),C_function1);
 1011              		.loc 1 391 16 view .LVU296
 1012 0162 0395     		str	r5, [sp, #12]
 320:main.c        ****   {
 1013              		.loc 1 320 3 view .LVU297
 1014 0164 202B     		cmp	r3, #32
 1015 0166 00D1     		bne	.LCB803
 1016 0168 ACE0     		b	.L64	@long jump
 1017              	.LCB803:
 320:main.c        ****   {
 1018              		.loc 1 320 3 view .LVU298
 1019 016a 182B     		cmp	r3, #24
 1020 016c 00D0     		beq	.LCB806
 1021 016e 6FE7     		b	.L50	@long jump
 1022              	.LCB806:
 380:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 1023              		.loc 1 380 7 is_stmt 1 view .LVU299
 380:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
ARM GAS  main.s 			page 30


 1024              		.loc 1 380 21 is_stmt 0 view .LVU300
 1025 0170 019B     		ldr	r3, [sp, #4]
 380:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 1026              		.loc 1 380 20 view .LVU301
 1027 0172 6468     		ldr	r4, [r4, #4]
 380:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 1028              		.loc 1 380 21 view .LVU302
 1029 0174 D808     		lsrs	r0, r3, #3
 1030 0176 FFF7FEFF 		bl	get32bitdff
 1031              	.LVL71:
 381:main.c        ****       return;
 1032              		.loc 1 381 22 view .LVU303
 1033 017a 0199     		ldr	r1, [sp, #4]
 380:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 1034              		.loc 1 380 20 view .LVU304
 1035 017c 2418     		adds	r4, r4, r0
 380:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 1036              		.loc 1 380 14 view .LVU305
 1037 017e F460     		str	r4, [r6, #12]
 381:main.c        ****       return;
 1038              		.loc 1 381 7 is_stmt 1 view .LVU306
 381:main.c        ****       return;
 1039              		.loc 1 381 22 is_stmt 0 view .LVU307
 1040 0180 08AB     		add	r3, sp, #32
 1041 0182 625D     		ldrb	r2, [r4, r5]
 1042 0184 5B5C     		ldrb	r3, [r3, r1]
 1043 0186 1340     		ands	r3, r2
 1044 0188 5A42     		rsbs	r2, r3, #0
 1045 018a 5341     		adcs	r3, r3, r2
 1046 018c 029A     		ldr	r2, [sp, #8]
 1047 018e D370     		strb	r3, [r2, #3]
 382:main.c        ****     }
 1048              		.loc 1 382 7 is_stmt 1 view .LVU308
 1049 0190 08E0     		b	.L43
 1050              	.L48:
 324:main.c        ****       for (i=C_function2;i<=C_function1;++i)
 1051              		.loc 1 324 7 view .LVU309
 324:main.c        ****       for (i=C_function2;i<=C_function1;++i)
 1052              		.loc 1 324 21 is_stmt 0 view .LVU310
 1053 0192 F808     		lsrs	r0, r7, #3
 1054 0194 FFF7FEFF 		bl	get32bitdff
 1055              	.LVL72:
 324:main.c        ****       for (i=C_function2;i<=C_function1;++i)
 1056              		.loc 1 324 20 view .LVU311
 1057 0198 6468     		ldr	r4, [r4, #4]
 1058 019a 2418     		adds	r4, r4, r0
 324:main.c        ****       for (i=C_function2;i<=C_function1;++i)
 1059              		.loc 1 324 14 view .LVU312
 1060 019c F460     		str	r4, [r6, #12]
 325:main.c        ****       {
 1061              		.loc 1 325 7 is_stmt 1 view .LVU313
 1062              	.LVL73:
 1063              	.L55:
 325:main.c        ****       {
 1064              		.loc 1 325 27 discriminator 1 view .LVU314
 1065 019e 019B     		ldr	r3, [sp, #4]
 1066 01a0 AB42     		cmp	r3, r5
ARM GAS  main.s 			page 31


 1067 01a2 01DA     		bge	.L56
 1068              	.LVL74:
 1069              	.L43:
 1070              		.loc 1 524 1 is_stmt 0 view .LVU315
 1071 01a4 11B0     		add	sp, sp, #68
 1072              		@ sp needed
 1073 01a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 1074              	.LVL75:
 1075              	.L56:
 327:main.c        ****       }
 1076              		.loc 1 327 9 is_stmt 1 discriminator 3 view .LVU316
 1077 01a8 08AB     		add	r3, sp, #32
 1078 01aa 2800     		movs	r0, r5
 1079 01ac D95D     		ldrb	r1, [r3, r7]
 1080 01ae FFF7FEFF 		bl	on_off_flip
 1081              	.LVL76:
 325:main.c        ****       {
 1082              		.loc 1 325 41 discriminator 3 view .LVU317
 1083 01b2 0135     		adds	r5, r5, #1
 1084              	.LVL77:
 325:main.c        ****       {
 1085              		.loc 1 325 41 is_stmt 0 discriminator 3 view .LVU318
 1086 01b4 F3E7     		b	.L55
 1087              	.LVL78:
 1088              	.L59:
 335:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1089              		.loc 1 335 9 is_stmt 1 discriminator 3 view .LVU319
 335:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1090              		.loc 1 335 22 is_stmt 0 discriminator 3 view .LVU320
 1091 01b6 6368     		ldr	r3, [r4, #4]
 335:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1092              		.loc 1 335 23 discriminator 3 view .LVU321
 1093 01b8 F810     		asrs	r0, r7, #3
 335:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1094              		.loc 1 335 22 discriminator 3 view .LVU322
 1095 01ba 0293     		str	r3, [sp, #8]
 335:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1096              		.loc 1 335 23 discriminator 3 view .LVU323
 1097 01bc FFF7FEFF 		bl	get32bitdff
 1098              	.LVL79:
 335:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1099              		.loc 1 335 22 discriminator 3 view .LVU324
 1100 01c0 029B     		ldr	r3, [sp, #8]
 1101 01c2 1818     		adds	r0, r3, r0
 336:main.c        ****       }
 1102              		.loc 1 336 9 discriminator 3 view .LVU325
 1103 01c4 08AB     		add	r3, sp, #32
 1104 01c6 D95D     		ldrb	r1, [r3, r7]
 335:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1105              		.loc 1 335 16 discriminator 3 view .LVU326
 1106 01c8 F060     		str	r0, [r6, #12]
 336:main.c        ****       }
 1107              		.loc 1 336 9 is_stmt 1 discriminator 3 view .LVU327
 1108 01ca 2800     		movs	r0, r5
 1109 01cc FFF7FEFF 		bl	on_off_flip
 1110              	.LVL80:
 333:main.c        ****       {
ARM GAS  main.s 			page 32


 1111              		.loc 1 333 41 discriminator 3 view .LVU328
 1112 01d0 0137     		adds	r7, r7, #1
 1113              	.LVL81:
 1114              	.L58:
 333:main.c        ****       {
 1115              		.loc 1 333 27 discriminator 1 view .LVU329
 1116 01d2 019B     		ldr	r3, [sp, #4]
 1117 01d4 BB42     		cmp	r3, r7
 1118 01d6 EEDA     		bge	.L59
 1119 01d8 E4E7     		b	.L43
 1120              	.LVL82:
 1121              	.L46:
 342:main.c        ****       on_off_flip(C_function2,setbyte[C_function3]);
 1122              		.loc 1 342 7 view .LVU330
 342:main.c        ****       on_off_flip(C_function2,setbyte[C_function3]);
 1123              		.loc 1 342 21 is_stmt 0 view .LVU331
 1124 01da F808     		lsrs	r0, r7, #3
 1125 01dc FFF7FEFF 		bl	get32bitdff
 1126              	.LVL83:
 342:main.c        ****       on_off_flip(C_function2,setbyte[C_function3]);
 1127              		.loc 1 342 20 view .LVU332
 1128 01e0 6468     		ldr	r4, [r4, #4]
 343:main.c        ****       return;
 1129              		.loc 1 343 7 view .LVU333
 1130 01e2 08AB     		add	r3, sp, #32
 342:main.c        ****       on_off_flip(C_function2,setbyte[C_function3]);
 1131              		.loc 1 342 20 view .LVU334
 1132 01e4 2418     		adds	r4, r4, r0
 343:main.c        ****       return;
 1133              		.loc 1 343 7 view .LVU335
 1134 01e6 D95D     		ldrb	r1, [r3, r7]
 1135 01e8 2800     		movs	r0, r5
 342:main.c        ****       on_off_flip(C_function2,setbyte[C_function3]);
 1136              		.loc 1 342 14 view .LVU336
 1137 01ea F460     		str	r4, [r6, #12]
 343:main.c        ****       return;
 1138              		.loc 1 343 7 is_stmt 1 view .LVU337
 1139 01ec FFF7FEFF 		bl	on_off_flip
 1140              	.LVL84:
 344:main.c        ****     }
 1141              		.loc 1 344 7 view .LVU338
 1142 01f0 D8E7     		b	.L43
 1143              	.L44:
 356:main.c        ****       temp2=0;
 1144              		.loc 1 356 7 view .LVU339
 356:main.c        ****       temp2=0;
 1145              		.loc 1 356 20 is_stmt 0 view .LVU340
 1146 01f2 0023     		movs	r3, #0
 1147 01f4 029A     		ldr	r2, [sp, #8]
 1148 01f6 D370     		strb	r3, [r2, #3]
 357:main.c        ****       for (i=RIOT[player0y+C_function2];i<RIOT[player0y+C_function2]+RIOT[player0height+C_function2
 1149              		.loc 1 357 7 is_stmt 1 view .LVU341
 1150              	.LVL85:
 358:main.c        ****       {
 1151              		.loc 1 358 7 view .LVU342
 358:main.c        ****       {
 1152              		.loc 1 358 18 is_stmt 0 view .LVU343
ARM GAS  main.s 			page 33


 1153 01f8 2268     		ldr	r2, [r4]
 1154 01fa 5719     		adds	r7, r2, r5
 1155              	.LVL86:
 358:main.c        ****       {
 1156              		.loc 1 358 74 view .LVU344
 1157 01fc 7B1C     		adds	r3, r7, #1
 358:main.c        ****       {
 1158              		.loc 1 358 13 view .LVU345
 1159 01fe 3E7D     		ldrb	r6, [r7, #20]
 1160              	.LVL87:
 358:main.c        ****       {
 1161              		.loc 1 358 74 view .LVU346
 1162 0200 DB7F     		ldrb	r3, [r3, #31]
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1163              		.loc 1 366 65 view .LVU347
 1164 0202 6D00     		lsls	r5, r5, #1
 1165              	.LVL88:
 358:main.c        ****       {
 1166              		.loc 1 358 69 view .LVU348
 1167 0204 9B19     		adds	r3, r3, r6
 1168 0206 0693     		str	r3, [sp, #24]
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1169              		.loc 1 366 30 view .LVU349
 1170 0208 A368     		ldr	r3, [r4, #8]
 1171 020a 9C46     		mov	ip, r3
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1172              		.loc 1 366 53 view .LVU350
 1173 020c 2B00     		movs	r3, r5
 1174 020e 3933     		adds	r3, r3, #57
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1175              		.loc 1 366 36 view .LVU351
 1176 0210 D318     		adds	r3, r2, r3
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1177              		.loc 1 366 94 view .LVU352
 1178 0212 3835     		adds	r5, r5, #56
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1179              		.loc 1 366 36 view .LVU353
 1180 0214 0293     		str	r3, [sp, #8]
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1181              		.loc 1 366 77 view .LVU354
 1182 0216 5319     		adds	r3, r2, r5
 1183 0218 0393     		str	r3, [sp, #12]
 367:main.c        **** 	  }
 1184              		.loc 1 367 65 view .LVU355
 1185 021a 019B     		ldr	r3, [sp, #4]
 1186 021c 5B00     		lsls	r3, r3, #1
 367:main.c        **** 	  }
 1187              		.loc 1 367 53 view .LVU356
 1188 021e 1900     		movs	r1, r3
 1189 0220 3931     		adds	r1, r1, #57
 367:main.c        **** 	  }
 1190              		.loc 1 367 36 view .LVU357
 1191 0222 5118     		adds	r1, r2, r1
 1192 0224 0491     		str	r1, [sp, #16]
 358:main.c        ****       {
 1193              		.loc 1 358 13 view .LVU358
 1194 0226 3100     		movs	r1, r6
ARM GAS  main.s 			page 34


 367:main.c        **** 	  }
 1195              		.loc 1 367 94 view .LVU359
 1196 0228 3833     		adds	r3, r3, #56
 367:main.c        **** 	  }
 1197              		.loc 1 367 77 view .LVU360
 1198 022a D318     		adds	r3, r2, r3
 1199 022c 0593     		str	r3, [sp, #20]
 360:main.c        **** 	{
 1200              		.loc 1 360 21 view .LVU361
 1201 022e 019B     		ldr	r3, [sp, #4]
 1202 0230 D218     		adds	r2, r2, r3
 360:main.c        **** 	{
 1203              		.loc 1 360 82 view .LVU362
 1204 0232 531C     		adds	r3, r2, #1
 1205 0234 0793     		str	r3, [sp, #28]
 1206              	.LVL89:
 1207              	.L61:
 358:main.c        ****       {
 1208              		.loc 1 358 42 is_stmt 1 discriminator 1 view .LVU363
 1209 0236 069B     		ldr	r3, [sp, #24]
 1210 0238 8B42     		cmp	r3, r1
 1211 023a B3DD     		ble	.L43
 360:main.c        **** 	{
 1212              		.loc 1 360 9 view .LVU364
 360:main.c        **** 	{
 1213              		.loc 1 360 21 is_stmt 0 view .LVU365
 1214 023c 157D     		ldrb	r5, [r2, #20]
 360:main.c        **** 	{
 1215              		.loc 1 360 12 view .LVU366
 1216 023e 8D42     		cmp	r5, r1
 1217 0240 2ADC     		bgt	.L62
 360:main.c        **** 	{
 1218              		.loc 1 360 82 discriminator 1 view .LVU367
 1219 0242 079B     		ldr	r3, [sp, #28]
 1220 0244 DB7F     		ldrb	r3, [r3, #31]
 360:main.c        **** 	{
 1221              		.loc 1 360 77 discriminator 1 view .LVU368
 1222 0246 5B19     		adds	r3, r3, r5
 360:main.c        **** 	{
 1223              		.loc 1 360 45 discriminator 1 view .LVU369
 1224 0248 8B42     		cmp	r3, r1
 1225 024a 25DD     		ble	.L62
 363:main.c        ****           if (temp3<15)
 1226              		.loc 1 363 11 is_stmt 1 view .LVU370
 363:main.c        ****           if (temp3<15)
 1227              		.loc 1 363 21 is_stmt 0 view .LVU371
 1228 024c B87A     		ldrb	r0, [r7, #10]
 363:main.c        ****           if (temp3<15)
 1229              		.loc 1 363 48 view .LVU372
 1230 024e 937A     		ldrb	r3, [r2, #10]
 363:main.c        ****           if (temp3<15)
 1231              		.loc 1 363 43 view .LVU373
 1232 0250 C01A     		subs	r0, r0, r3
 363:main.c        ****           if (temp3<15)
 1233              		.loc 1 363 16 view .LVU374
 1234 0252 0730     		adds	r0, r0, #7
 1235              	.LVL90:
ARM GAS  main.s 			page 35


 364:main.c        **** 	  {
 1236              		.loc 1 364 11 is_stmt 1 view .LVU375
 364:main.c        **** 	  {
 1237              		.loc 1 364 14 is_stmt 0 view .LVU376
 1238 0254 0E28     		cmp	r0, #14
 1239 0256 1FDC     		bgt	.L62
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1240              		.loc 1 366 13 is_stmt 1 view .LVU377
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1241              		.loc 1 366 36 is_stmt 0 view .LVU378
 1242 0258 029B     		ldr	r3, [sp, #8]
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1243              		.loc 1 366 77 view .LVU379
 1244 025a 039C     		ldr	r4, [sp, #12]
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1245              		.loc 1 366 36 view .LVU380
 1246 025c 1B78     		ldrb	r3, [r3]
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1247              		.loc 1 366 77 view .LVU381
 1248 025e 2478     		ldrb	r4, [r4]
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1249              		.loc 1 366 68 view .LVU382
 1250 0260 1B02     		lsls	r3, r3, #8
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1251              		.loc 1 366 72 view .LVU383
 1252 0262 1B19     		adds	r3, r3, r4
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1253              		.loc 1 366 109 view .LVU384
 1254 0264 5B18     		adds	r3, r3, r1
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1255              		.loc 1 366 111 view .LVU385
 1256 0266 9B1B     		subs	r3, r3, r6
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1257              		.loc 1 366 30 view .LVU386
 1258 0268 6344     		add	r3, r3, ip
 1259 026a 1B78     		ldrb	r3, [r3]
 1260 026c 0193     		str	r3, [sp, #4]
 367:main.c        **** 	  }
 1261              		.loc 1 367 36 view .LVU387
 1262 026e 049B     		ldr	r3, [sp, #16]
 1263 0270 1B78     		ldrb	r3, [r3]
 367:main.c        **** 	  }
 1264              		.loc 1 367 68 view .LVU388
 1265 0272 1B02     		lsls	r3, r3, #8
 1266 0274 1C00     		movs	r4, r3
 367:main.c        **** 	  }
 1267              		.loc 1 367 77 view .LVU389
 1268 0276 059B     		ldr	r3, [sp, #20]
 1269 0278 1B78     		ldrb	r3, [r3]
 367:main.c        **** 	  }
 1270              		.loc 1 367 72 view .LVU390
 1271 027a E318     		adds	r3, r4, r3
 367:main.c        **** 	  }
 1272              		.loc 1 367 109 view .LVU391
 1273 027c 5B18     		adds	r3, r3, r1
 367:main.c        **** 	  }
 1274              		.loc 1 367 111 view .LVU392
ARM GAS  main.s 			page 36


 1275 027e 5B1B     		subs	r3, r3, r5
 367:main.c        **** 	  }
 1276              		.loc 1 367 30 view .LVU393
 1277 0280 6344     		add	r3, r3, ip
 1278 0282 1B78     		ldrb	r3, [r3]
 1279              	.LVL91:
 369:main.c        **** 	  {
 1280              		.loc 1 369 4 is_stmt 1 view .LVU394
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1281              		.loc 1 366 140 is_stmt 0 view .LVU395
 1282 0284 019C     		ldr	r4, [sp, #4]
 367:main.c        **** 	  }
 1283              		.loc 1 367 140 view .LVU396
 1284 0286 8340     		lsls	r3, r3, r0
 1285              	.LVL92:
 366:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1286              		.loc 1 366 140 view .LVU397
 1287 0288 E401     		lsls	r4, r4, #7
 369:main.c        **** 	  {
 1288              		.loc 1 369 7 view .LVU398
 1289 028a 2342     		tst	r3, r4
 1290 028c 04D0     		beq	.L62
 371:main.c        **** 	    return;
 1291              		.loc 1 371 6 is_stmt 1 view .LVU399
 371:main.c        **** 	    return;
 1292              		.loc 1 371 19 is_stmt 0 view .LVU400
 1293 028e FF22     		movs	r2, #255
 371:main.c        **** 	    return;
 1294              		.loc 1 371 16 view .LVU401
 1295 0290 284B     		ldr	r3, .L104+4
 1296 0292 DB68     		ldr	r3, [r3, #12]
 371:main.c        **** 	    return;
 1297              		.loc 1 371 19 view .LVU402
 1298 0294 DA70     		strb	r2, [r3, #3]
 372:main.c        **** 	  }
 1299              		.loc 1 372 6 is_stmt 1 view .LVU403
 1300 0296 85E7     		b	.L43
 1301              	.LVL93:
 1302              	.L62:
 358:main.c        ****       {
 1303              		.loc 1 358 102 discriminator 2 view .LVU404
 1304 0298 0131     		adds	r1, r1, #1
 1305              	.LVL94:
 358:main.c        ****       {
 1306              		.loc 1 358 102 is_stmt 0 discriminator 2 view .LVU405
 1307 029a CCE7     		b	.L61
 1308              	.LVL95:
 1309              	.L52:
 386:main.c        ****       return;
 1310              		.loc 1 386 7 is_stmt 1 view .LVU406
 386:main.c        ****       return;
 1311              		.loc 1 386 23 is_stmt 0 view .LVU407
 1312 029c 0020     		movs	r0, #0
 1313 029e FFF7FEFF 		bl	get32bitdff
 1314              	.LVL96:
 386:main.c        ****       return;
 1315              		.loc 1 386 7 view .LVU408
ARM GAS  main.s 			page 37


 1316 02a2 8022     		movs	r2, #128
 1317 02a4 6468     		ldr	r4, [r4, #4]
 1318 02a6 0199     		ldr	r1, [sp, #4]
 386:main.c        ****       return;
 1319              		.loc 1 386 22 view .LVU409
 1320 02a8 2018     		adds	r0, r4, r0
 386:main.c        ****       return;
 1321              		.loc 1 386 7 view .LVU410
 1322 02aa D200     		lsls	r2, r2, #3
 1323 02ac 53E7     		b	.L103
 1324              	.LVL97:
 1325              	.L65:
 392:main.c        ****       return;
 1326              		.loc 1 392 9 is_stmt 1 discriminator 3 view .LVU411
 392:main.c        ****       return;
 1327              		.loc 1 392 25 is_stmt 0 discriminator 3 view .LVU412
 1328 02ae 0398     		ldr	r0, [sp, #12]
 1329 02b0 FFF7FEFF 		bl	get32bitdff
 1330              	.LVL98:
 392:main.c        ****       return;
 1331              		.loc 1 392 9 discriminator 3 view .LVU413
 1332 02b4 6568     		ldr	r5, [r4, #4]
 1333 02b6 0199     		ldr	r1, [sp, #4]
 392:main.c        ****       return;
 1334              		.loc 1 392 24 discriminator 3 view .LVU414
 1335 02b8 2818     		adds	r0, r5, r0
 392:main.c        ****       return;
 1336              		.loc 1 392 9 discriminator 3 view .LVU415
 1337 02ba FFF7FEFF 		bl	memscroll
 1338              	.LVL99:
 391:main.c        ****         memscroll(queue+get32bitdff(temp3),C_function1);
 1339              		.loc 1 391 52 is_stmt 1 discriminator 3 view .LVU416
 1340 02be 039B     		ldr	r3, [sp, #12]
 1341 02c0 0133     		adds	r3, r3, #1
 1342 02c2 0393     		str	r3, [sp, #12]
 1343              	.LVL100:
 1344              	.L64:
 391:main.c        ****         memscroll(queue+get32bitdff(temp3),C_function1);
 1345              		.loc 1 391 34 discriminator 1 view .LVU417
 1346 02c4 039B     		ldr	r3, [sp, #12]
 1347 02c6 9F42     		cmp	r7, r3
 1348 02c8 F1DC     		bgt	.L65
 1349 02ca 6BE7     		b	.L43
 1350              	.LVL101:
 1351              	.L70:
 412:main.c        ****   {
 1352              		.loc 1 412 3 view .LVU418
 412:main.c        ****   {
 1353              		.loc 1 412 30 is_stmt 0 view .LVU419
 1354 02cc 7378     		ldrb	r3, [r6, #1]
 1355 02ce 0393     		str	r3, [sp, #12]
 412:main.c        ****   {
 1356              		.loc 1 412 50 view .LVU420
 1357 02d0 3378     		ldrb	r3, [r6]
 412:main.c        ****   {
 1358              		.loc 1 412 10 view .LVU421
 1359 02d2 0398     		ldr	r0, [sp, #12]
ARM GAS  main.s 			page 38


 1360 02d4 1900     		movs	r1, r3
 412:main.c        ****   {
 1361              		.loc 1 412 50 view .LVU422
 1362 02d6 0493     		str	r3, [sp, #16]
 412:main.c        ****   {
 1363              		.loc 1 412 10 view .LVU423
 1364 02d8 FFF7FEFF 		bl	checkswap
 1365              	.LVL102:
 412:main.c        ****   {
 1366              		.loc 1 412 3 view .LVU424
 1367 02dc 0128     		cmp	r0, #1
 1368 02de 06D0     		beq	.L67
 1369 02e0 0228     		cmp	r0, #2
 1370 02e2 15D0     		beq	.L68
 1371 02e4 0028     		cmp	r0, #0
 1372 02e6 F1D1     		bne	.L70
 1373              	.L69:
 1374 02e8 013E     		subs	r6, r6, #1
 1375 02ea 013D     		subs	r5, r5, #1
 1376 02ec BEE6     		b	.L66
 1377              	.L67:
 415:main.c        ****       /* shiftnumbers(temp2); */
 1378              		.loc 1 415 7 is_stmt 1 view .LVU425
 418:main.c        **** 	  {
 1379              		.loc 1 418 10 is_stmt 0 view .LVU426
 1380 02ee 2A00     		movs	r2, r5
 1381 02f0 0021     		movs	r1, #0
 415:main.c        ****       /* shiftnumbers(temp2); */
 1382              		.loc 1 415 12 view .LVU427
 1383 02f2 029B     		ldr	r3, [sp, #8]
 1384 02f4 013B     		subs	r3, r3, #1
 1385 02f6 0293     		str	r3, [sp, #8]
 1386              	.LVL103:
 417:main.c        **** 	  while (temp4!=maxsprites-1)
 1387              		.loc 1 417 4 is_stmt 1 view .LVU428
 417:main.c        **** 	  while (temp4!=maxsprites-1)
 1388              		.loc 1 417 10 is_stmt 0 view .LVU429
 1389 02f8 0F4B     		ldr	r3, .L104+8
 1390              	.LVL104:
 417:main.c        **** 	  while (temp4!=maxsprites-1)
 1391              		.loc 1 417 10 view .LVU430
 1392 02fa 5D61     		str	r5, [r3, #20]
 418:main.c        **** 	  {
 1393              		.loc 1 418 4 is_stmt 1 view .LVU431
 1394 02fc 0F4B     		ldr	r3, .L104+12
 1395 02fe 5B19     		adds	r3, r3, r5
 1396              	.L71:
 418:main.c        **** 	  {
 1397              		.loc 1 418 16 view .LVU432
 1398 0300 9742     		cmp	r7, r2
 1399 0302 0BD1     		bne	.L72
 1400 0304 0029     		cmp	r1, #0
 1401 0306 03D0     		beq	.L68
 1402 0308 019A     		ldr	r2, [sp, #4]
 1403 030a 0B4B     		ldr	r3, .L104+8
 1404 030c 013A     		subs	r2, r2, #1
 1405 030e 5A61     		str	r2, [r3, #20]
ARM GAS  main.s 			page 39


 1406              	.LVL105:
 1407              	.L68:
 432:main.c        ****   spritesort[temp2+1]=spritesort[temp2];
 1408              		.loc 1 432 3 view .LVU433
 433:main.c        ****   spritesort[temp2]=i;
 1409              		.loc 1 433 3 view .LVU434
 433:main.c        ****   spritesort[temp2]=i;
 1410              		.loc 1 433 22 is_stmt 0 view .LVU435
 1411 0310 049A     		ldr	r2, [sp, #16]
 1412 0312 6319     		adds	r3, r4, r5
 1413 0314 5A70     		strb	r2, [r3, #1]
 434:main.c        ****   temp2--;
 1414              		.loc 1 434 3 is_stmt 1 view .LVU436
 434:main.c        ****   temp2--;
 1415              		.loc 1 434 20 is_stmt 0 view .LVU437
 1416 0316 039B     		ldr	r3, [sp, #12]
 1417 0318 3370     		strb	r3, [r6]
 435:main.c        ****  }
 1418              		.loc 1 435 3 is_stmt 1 view .LVU438
 1419 031a E5E7     		b	.L69
 1420              	.LVL106:
 1421              	.L72:
 420:main.c        **** 		temp4++;
 1422              		.loc 1 420 3 view .LVU439
 420:main.c        **** 		temp4++;
 1423              		.loc 1 420 20 is_stmt 0 view .LVU440
 1424 031c 5978     		ldrb	r1, [r3, #1]
 1425 031e 0132     		adds	r2, r2, #1
 1426 0320 1970     		strb	r1, [r3]
 421:main.c        **** 	  }
 1427              		.loc 1 421 3 is_stmt 1 view .LVU441
 420:main.c        **** 		temp4++;
 1428              		.loc 1 420 20 is_stmt 0 view .LVU442
 1429 0322 0121     		movs	r1, #1
 1430 0324 0133     		adds	r3, r3, #1
 1431 0326 EBE7     		b	.L71
 1432              	.LVL107:
 1433              	.L75:
 438:main.c        ****   RIOT[spritedisplay]=temp3;
 1434              		.loc 1 438 5 is_stmt 1 discriminator 3 view .LVU443
 438:main.c        ****   RIOT[spritedisplay]=temp3;
 1435              		.loc 1 438 38 is_stmt 0 discriminator 3 view .LVU444
 1436 0328 195C     		ldrb	r1, [r3, r0]
 438:main.c        ****   RIOT[spritedisplay]=temp3;
 1437              		.loc 1 438 27 discriminator 3 view .LVU445
 1438 032a D154     		strb	r1, [r2, r3]
 437:main.c        ****     RIOT[SpriteGfxIndex+i]=myGfxIndex[i];
 1439              		.loc 1 437 26 is_stmt 1 discriminator 3 view .LVU446
 1440 032c 0133     		adds	r3, r3, #1
 1441              	.LVL108:
 437:main.c        ****     RIOT[SpriteGfxIndex+i]=myGfxIndex[i];
 1442              		.loc 1 437 26 is_stmt 0 discriminator 3 view .LVU447
 1443 032e A4E6     		b	.L74
 1444              	.L105:
 1445              		.align	2
 1446              	.L104:
 1447 0330 00000000 		.word	.LC11
ARM GAS  main.s 			page 40


 1448 0334 00000000 		.word	.LANCHOR1
 1449 0338 00000000 		.word	.LANCHOR0
 1450 033c 14000000 		.word	.LANCHOR1+20
 1451 0340 FF010000 		.word	511
 1452 0344 1E0E0000 		.word	3614
 1453              	.LVL109:
 1454              	.L82:
 464:main.c        **** //check if on screen, copy only if it is
 1455              		.loc 1 464 5 is_stmt 1 view .LVU448
 464:main.c        **** //check if on screen, copy only if it is
 1456              		.loc 1 464 24 is_stmt 0 view .LVU449
 1457 0348 8B69     		ldr	r3, [r1, #24]
 1458 034a EB18     		adds	r3, r5, r3
 464:main.c        **** //check if on screen, copy only if it is
 1459              		.loc 1 464 13 view .LVU450
 1460 034c 1D7D     		ldrb	r5, [r3, #20]
 1461              	.LVL110:
 471:main.c        ****       if (RIOT[_NUSIZ1+Gfxindex]>127)
 1462              		.loc 1 471 7 is_stmt 1 view .LVU451
 471:main.c        ****       if (RIOT[_NUSIZ1+Gfxindex]>127)
 1463              		.loc 1 471 12 is_stmt 0 view .LVU452
 1464 034e FF23     		movs	r3, #255
 1465 0350 0B60     		str	r3, [r1]
 472:main.c        ****       {
 1466              		.loc 1 472 7 is_stmt 1 view .LVU453
 472:main.c        ****       {
 1467              		.loc 1 472 15 is_stmt 0 view .LVU454
 1468 0352 6319     		adds	r3, r4, r5
 1469 0354 1800     		movs	r0, r3
 1470 0356 2A30     		adds	r0, r0, #42
 1471 0358 0278     		ldrb	r2, [r0]
 472:main.c        ****       {
 1472              		.loc 1 472 10 view .LVU455
 1473 035a 0078     		ldrb	r0, [r0]
 1474 035c 40B2     		sxtb	r0, r0
 1475 035e 0028     		cmp	r0, #0
 1476 0360 0EDA     		bge	.L77
 474:main.c        ****         {
 1477              		.loc 1 474 9 is_stmt 1 view .LVU456
 474:main.c        ****         {
 1478              		.loc 1 474 17 is_stmt 0 view .LVU457
 1479 0362 DE7A     		ldrb	r6, [r3, #11]
 474:main.c        ****         {
 1480              		.loc 1 474 12 view .LVU458
 1481 0364 982E     		cmp	r6, #152
 1482 0366 0BD9     		bls	.L77
 477:main.c        ****         }
 1483              		.loc 1 477 12 is_stmt 1 view .LVU459
 477:main.c        ****         }
 1484              		.loc 1 477 54 is_stmt 0 view .LVU460
 1485 0368 0827     		movs	r7, #8
 1486 036a D310     		asrs	r3, r2, #3
 1487 036c 3B40     		ands	r3, r7
 477:main.c        ****         }
 1488              		.loc 1 477 86 view .LVU461
 1489 036e 5200     		lsls	r2, r2, #1
 1490 0370 FF19     		adds	r7, r7, r7
ARM GAS  main.s 			page 41


 1491 0372 3A40     		ands	r2, r7
 477:main.c        ****         }
 1492              		.loc 1 477 25 view .LVU462
 1493 0374 5A48     		ldr	r0, .L106
 477:main.c        ****         }
 1494              		.loc 1 477 58 view .LVU463
 1495 0376 1343     		orrs	r3, r2
 477:main.c        ****         }
 1496              		.loc 1 477 115 view .LVU464
 1497 0378 993E     		subs	r6, r6, #153
 477:main.c        ****         }
 1498              		.loc 1 477 90 view .LVU465
 1499 037a 3343     		orrs	r3, r6
 477:main.c        ****         }
 1500              		.loc 1 477 25 view .LVU466
 1501 037c C35C     		ldrb	r3, [r0, r3]
 1502 037e 0B60     		str	r3, [r1]
 1503              	.L77:
 481:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1504              		.loc 1 481 7 is_stmt 1 view .LVU467
 481:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1505              		.loc 1 481 23 is_stmt 0 view .LVU468
 1506 0380 0320     		movs	r0, #3
 1507 0382 FFF7FEFF 		bl	get32bitdf
 1508              	.LVL111:
 482:main.c        ****               RIOT[player1y+Gfxindex],
 1509              		.loc 1 482 56 view .LVU469
 1510 0386 6B00     		lsls	r3, r5, #1
 1511 0388 0393     		str	r3, [sp, #12]
 483:main.c        ****               RIOT[player1height+Gfxindex]);
 1512              		.loc 1 483 28 view .LVU470
 1513 038a 2B00     		movs	r3, r5
 1514 038c 1533     		adds	r3, r3, #21
 1515 038e 0193     		str	r3, [sp, #4]
 482:main.c        ****               RIOT[player1y+Gfxindex],
 1516              		.loc 1 482 30 view .LVU471
 1517 0390 0399     		ldr	r1, [sp, #12]
 481:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1518              		.loc 1 481 7 view .LVU472
 1519 0392 019A     		ldr	r2, [sp, #4]
 484:main.c        ****       mask = 0xFF;
 1520              		.loc 1 484 33 view .LVU473
 1521 0394 2135     		adds	r5, r5, #33
 1522              	.LVL112:
 481:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1523              		.loc 1 481 7 view .LVU474
 1524 0396 635D     		ldrb	r3, [r4, r5]
 1525 0398 A25C     		ldrb	r2, [r4, r2]
 482:main.c        ****               RIOT[player1y+Gfxindex],
 1526              		.loc 1 482 30 view .LVU475
 1527 039a 6418     		adds	r4, r4, r1
 1528 039c 2100     		movs	r1, r4
 1529 039e 3B31     		adds	r1, r1, #59
 482:main.c        ****               RIOT[player1y+Gfxindex],
 1530              		.loc 1 482 59 view .LVU476
 1531 03a0 0978     		ldrb	r1, [r1]
 482:main.c        ****               RIOT[player1y+Gfxindex],
ARM GAS  main.s 			page 42


 1532              		.loc 1 482 68 view .LVU477
 1533 03a2 3A34     		adds	r4, r4, #58
 481:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1534              		.loc 1 481 7 view .LVU478
 1535 03a4 4F4F     		ldr	r7, .L106+4
 482:main.c        ****               RIOT[player1y+Gfxindex],
 1536              		.loc 1 482 68 view .LVU479
 1537 03a6 2478     		ldrb	r4, [r4]
 482:main.c        ****               RIOT[player1y+Gfxindex],
 1538              		.loc 1 482 59 view .LVU480
 1539 03a8 0902     		lsls	r1, r1, #8
 481:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1540              		.loc 1 481 7 view .LVU481
 1541 03aa 7E68     		ldr	r6, [r7, #4]
 482:main.c        ****               RIOT[player1y+Gfxindex],
 1542              		.loc 1 482 63 view .LVU482
 1543 03ac 0919     		adds	r1, r1, r4
 1544 03ae BC68     		ldr	r4, [r7, #8]
 481:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1545              		.loc 1 481 22 view .LVU483
 1546 03b0 3018     		adds	r0, r6, r0
 482:main.c        ****               RIOT[player1y+Gfxindex],
 1547              		.loc 1 482 63 view .LVU484
 1548 03b2 6118     		adds	r1, r4, r1
 481:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1549              		.loc 1 481 7 view .LVU485
 1550 03b4 FFF7FEFF 		bl	my_memcpy
 1551              	.LVL113:
 485:main.c        ****       //my_memcpy(queue+(dfhigh(1)<<8)+dflow(1),
 1552              		.loc 1 485 7 is_stmt 1 view .LVU486
 485:main.c        ****       //my_memcpy(queue+(dfhigh(1)<<8)+dflow(1),
 1553              		.loc 1 485 12 is_stmt 0 view .LVU487
 1554 03b8 FF23     		movs	r3, #255
 1555 03ba 4B4C     		ldr	r4, .L106+8
 487:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 1556              		.loc 1 487 23 view .LVU488
 1557 03bc 0120     		movs	r0, #1
 485:main.c        ****       //my_memcpy(queue+(dfhigh(1)<<8)+dflow(1),
 1558              		.loc 1 485 12 view .LVU489
 1559 03be 2360     		str	r3, [r4]
 487:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 1560              		.loc 1 487 7 is_stmt 1 view .LVU490
 1561 03c0 7B68     		ldr	r3, [r7, #4]
 1562 03c2 0493     		str	r3, [sp, #16]
 487:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 1563              		.loc 1 487 23 is_stmt 0 view .LVU491
 1564 03c4 FFF7FEFF 		bl	get32bitdf
 1565              	.LVL114:
 488:main.c        **** 	      RIOT[player1y+Gfxindex],
 1566              		.loc 1 488 30 view .LVU492
 1567 03c8 3E68     		ldr	r6, [r7]
 1568 03ca 0399     		ldr	r1, [sp, #12]
 487:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 1569              		.loc 1 487 7 view .LVU493
 1570 03cc 019A     		ldr	r2, [sp, #4]
 1571 03ce 735D     		ldrb	r3, [r6, r5]
 1572 03d0 B25C     		ldrb	r2, [r6, r2]
ARM GAS  main.s 			page 43


 488:main.c        **** 	      RIOT[player1y+Gfxindex],
 1573              		.loc 1 488 30 view .LVU494
 1574 03d2 7618     		adds	r6, r6, r1
 1575 03d4 3100     		movs	r1, r6
 1576 03d6 4D31     		adds	r1, r1, #77
 488:main.c        **** 	      RIOT[player1y+Gfxindex],
 1577              		.loc 1 488 57 view .LVU495
 1578 03d8 0978     		ldrb	r1, [r1]
 488:main.c        **** 	      RIOT[player1y+Gfxindex],
 1579              		.loc 1 488 66 view .LVU496
 1580 03da 4C36     		adds	r6, r6, #76
 1581 03dc 3678     		ldrb	r6, [r6]
 488:main.c        **** 	      RIOT[player1y+Gfxindex],
 1582              		.loc 1 488 57 view .LVU497
 1583 03de 0902     		lsls	r1, r1, #8
 488:main.c        **** 	      RIOT[player1y+Gfxindex],
 1584              		.loc 1 488 61 view .LVU498
 1585 03e0 8E19     		adds	r6, r1, r6
 1586 03e2 B968     		ldr	r1, [r7, #8]
 1587 03e4 8919     		adds	r1, r1, r6
 487:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 1588              		.loc 1 487 22 view .LVU499
 1589 03e6 049E     		ldr	r6, [sp, #16]
 1590 03e8 3018     		adds	r0, r6, r0
 487:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 1591              		.loc 1 487 7 view .LVU500
 1592 03ea FFF7FEFF 		bl	my_memcpy
 1593              	.LVL115:
 492:main.c        ****     temp4=(RIOT[player1y+Gfxindex]+RIOT[player1height+Gfxindex])&255; // &255 to allow for wrapped 
 1594              		.loc 1 492 5 is_stmt 1 view .LVU501
 492:main.c        ****     temp4=(RIOT[player1y+Gfxindex]+RIOT[player1height+Gfxindex])&255; // &255 to allow for wrapped 
 1595              		.loc 1 492 10 is_stmt 0 view .LVU502
 1596 03ee 6369     		ldr	r3, [r4, #20]
 493:main.c        ****     Gfxindex=myGfxIndex[count+1];
 1597              		.loc 1 493 65 view .LVU503
 1598 03f0 019A     		ldr	r2, [sp, #4]
 492:main.c        ****     temp4=(RIOT[player1y+Gfxindex]+RIOT[player1height+Gfxindex])&255; // &255 to allow for wrapped 
 1599              		.loc 1 492 10 view .LVU504
 1600 03f2 A360     		str	r3, [r4, #8]
 493:main.c        ****     Gfxindex=myGfxIndex[count+1];
 1601              		.loc 1 493 5 is_stmt 1 view .LVU505
 493:main.c        ****     Gfxindex=myGfxIndex[count+1];
 1602              		.loc 1 493 16 is_stmt 0 view .LVU506
 1603 03f4 3B68     		ldr	r3, [r7]
 493:main.c        ****     Gfxindex=myGfxIndex[count+1];
 1604              		.loc 1 493 65 view .LVU507
 1605 03f6 595D     		ldrb	r1, [r3, r5]
 1606 03f8 9A5C     		ldrb	r2, [r3, r2]
 494:main.c        ****     if ((count == temp3) || (RIOT[player1y+Gfxindex]>175) )
 1607              		.loc 1 494 30 view .LVU508
 1608 03fa A569     		ldr	r5, [r4, #24]
 1609              	.LVL116:
 493:main.c        ****     Gfxindex=myGfxIndex[count+1];
 1610              		.loc 1 493 65 view .LVU509
 1611 03fc 5218     		adds	r2, r2, r1
 1612 03fe D2B2     		uxtb	r2, r2
 1613 0400 6261     		str	r2, [r4, #20]
ARM GAS  main.s 			page 44


 494:main.c        ****     if ((count == temp3) || (RIOT[player1y+Gfxindex]>175) )
 1614              		.loc 1 494 5 is_stmt 1 view .LVU510
 494:main.c        ****     if ((count == temp3) || (RIOT[player1y+Gfxindex]>175) )
 1615              		.loc 1 494 24 is_stmt 0 view .LVU511
 1616 0402 7A19     		adds	r2, r7, r5
 494:main.c        ****     if ((count == temp3) || (RIOT[player1y+Gfxindex]>175) )
 1617              		.loc 1 494 13 view .LVU512
 1618 0404 567D     		ldrb	r6, [r2, #21]
 1619              	.LVL117:
 495:main.c        ****     {
 1620              		.loc 1 495 5 is_stmt 1 view .LVU513
 495:main.c        ****     {
 1621              		.loc 1 495 8 is_stmt 0 view .LVU514
 1622 0406 029A     		ldr	r2, [sp, #8]
 1623 0408 AA42     		cmp	r2, r5
 1624 040a 03D0     		beq	.L78
 495:main.c        ****     {
 1625              		.loc 1 495 34 discriminator 1 view .LVU515
 1626 040c 9B19     		adds	r3, r3, r6
 495:main.c        ****     {
 1627              		.loc 1 495 26 discriminator 1 view .LVU516
 1628 040e 5B7D     		ldrb	r3, [r3, #21]
 1629 0410 AF2B     		cmp	r3, #175
 1630 0412 03D9     		bls	.L79
 1631              	.L78:
 497:main.c        ****       temp5=0;
 1632              		.loc 1 497 7 is_stmt 1 view .LVU517
 497:main.c        ****       temp5=0;
 1633              		.loc 1 497 12 is_stmt 0 view .LVU518
 1634 0414 354B     		ldr	r3, .L106+12
 1635 0416 6361     		str	r3, [r4, #20]
 498:main.c        ****     }
 1636              		.loc 1 498 7 is_stmt 1 view .LVU519
 498:main.c        ****     }
 1637              		.loc 1 498 12 is_stmt 0 view .LVU520
 1638 0418 0023     		movs	r3, #0
 1639 041a A360     		str	r3, [r4, #8]
 1640              	.L79:
 504:main.c        **** 
 1641              		.loc 1 504 6 is_stmt 1 view .LVU521
 504:main.c        **** 
 1642              		.loc 1 504 11 is_stmt 0 view .LVU522
 1643 041c 7B68     		ldr	r3, [r7, #4]
 504:main.c        **** 
 1644              		.loc 1 504 12 view .LVU523
 1645 041e 0420     		movs	r0, #4
 504:main.c        **** 
 1646              		.loc 1 504 11 view .LVU524
 1647 0420 0193     		str	r3, [sp, #4]
 504:main.c        **** 
 1648              		.loc 1 504 12 view .LVU525
 1649 0422 FFF7FEFF 		bl	get32bitdf
 1650              	.LVL118:
 504:main.c        **** 
 1651              		.loc 1 504 11 view .LVU526
 1652 0426 019B     		ldr	r3, [sp, #4]
 504:main.c        **** 
ARM GAS  main.s 			page 45


 1653              		.loc 1 504 25 view .LVU527
 1654 0428 2818     		adds	r0, r5, r0
 504:main.c        **** 
 1655              		.loc 1 504 39 view .LVU528
 1656 042a A268     		ldr	r2, [r4, #8]
 504:main.c        **** 
 1657              		.loc 1 504 11 view .LVU529
 1658 042c 1818     		adds	r0, r3, r0
 504:main.c        **** 
 1659              		.loc 1 504 39 view .LVU530
 1660 042e 6369     		ldr	r3, [r4, #20]
 504:main.c        **** 
 1661              		.loc 1 504 52 view .LVU531
 1662 0430 6D10     		asrs	r5, r5, #1
 504:main.c        **** 
 1663              		.loc 1 504 39 view .LVU532
 1664 0432 9B1A     		subs	r3, r3, r2
 504:main.c        **** 
 1665              		.loc 1 504 45 view .LVU533
 1666 0434 5B1B     		subs	r3, r3, r5
 504:main.c        **** 
 1667              		.loc 1 504 57 view .LVU534
 1668 0436 5B10     		asrs	r3, r3, #1
 504:main.c        **** 
 1669              		.loc 1 504 32 view .LVU535
 1670 0438 DBB2     		uxtb	r3, r3
 1671 043a 0370     		strb	r3, [r0]
 506:main.c        ****       RIOT[player1x+Gfxindex]-=(RIOT[player1x+Gfxindex]>208)?96:160;
 1672              		.loc 1 506 5 is_stmt 1 view .LVU536
 506:main.c        ****       RIOT[player1x+Gfxindex]-=(RIOT[player1x+Gfxindex]>208)?96:160;
 1673              		.loc 1 506 22 is_stmt 0 view .LVU537
 1674 043c 3300     		movs	r3, r6
 1675 043e 0B33     		adds	r3, r3, #11
 1676 0440 0193     		str	r3, [sp, #4]
 506:main.c        ****       RIOT[player1x+Gfxindex]-=(RIOT[player1x+Gfxindex]>208)?96:160;
 1677              		.loc 1 506 13 view .LVU538
 1678 0442 019A     		ldr	r2, [sp, #4]
 1679 0444 3B68     		ldr	r3, [r7]
 1680 0446 9918     		adds	r1, r3, r2
 1681 0448 9B5C     		ldrb	r3, [r3, r2]
 506:main.c        ****       RIOT[player1x+Gfxindex]-=(RIOT[player1x+Gfxindex]>208)?96:160;
 1682              		.loc 1 506 8 view .LVU539
 1683 044a 9F2B     		cmp	r3, #159
 1684 044c 05D9     		bls	.L80
 507:main.c        ****     queue[get32bitdff(5)+count]=RIOT[_NUSIZ1+Gfxindex];
 1685              		.loc 1 507 7 is_stmt 1 view .LVU540
 507:main.c        ****     queue[get32bitdff(5)+count]=RIOT[_NUSIZ1+Gfxindex];
 1686              		.loc 1 507 30 is_stmt 0 view .LVU541
 1687 044e 6022     		movs	r2, #96
 1688 0450 D02B     		cmp	r3, #208
 1689 0452 00D8     		bhi	.L81
 1690 0454 4032     		adds	r2, r2, #64
 1691              	.L81:
 507:main.c        ****     queue[get32bitdff(5)+count]=RIOT[_NUSIZ1+Gfxindex];
 1692              		.loc 1 507 30 discriminator 4 view .LVU542
 1693 0456 9B1A     		subs	r3, r3, r2
 1694 0458 0B70     		strb	r3, [r1]
ARM GAS  main.s 			page 46


 1695              	.L80:
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1696              		.loc 1 508 5 is_stmt 1 view .LVU543
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1697              		.loc 1 508 37 is_stmt 0 view .LVU544
 1698 045a 3B68     		ldr	r3, [r7]
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1699              		.loc 1 508 11 view .LVU545
 1700 045c 0520     		movs	r0, #5
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1701              		.loc 1 508 45 view .LVU546
 1702 045e 2A36     		adds	r6, r6, #42
 1703              	.LVL119:
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1704              		.loc 1 508 37 view .LVU547
 1705 0460 9E19     		adds	r6, r3, r6
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1706              		.loc 1 508 11 view .LVU548
 1707 0462 FFF7FEFF 		bl	get32bitdff
 1708              	.LVL120:
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1709              		.loc 1 508 25 view .LVU549
 1710 0466 204C     		ldr	r4, .L106+8
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1711              		.loc 1 508 10 view .LVU550
 1712 0468 7D68     		ldr	r5, [r7, #4]
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1713              		.loc 1 508 25 view .LVU551
 1714 046a A369     		ldr	r3, [r4, #24]
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1715              		.loc 1 509 50 view .LVU552
 1716 046c 019A     		ldr	r2, [sp, #4]
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1717              		.loc 1 508 25 view .LVU553
 1718 046e C018     		adds	r0, r0, r3
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1719              		.loc 1 508 37 view .LVU554
 1720 0470 3378     		ldrb	r3, [r6]
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1721              		.loc 1 508 10 view .LVU555
 1722 0472 2D18     		adds	r5, r5, r0
 508:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1723              		.loc 1 508 32 view .LVU556
 1724 0474 2B70     		strb	r3, [r5]
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1725              		.loc 1 509 5 is_stmt 1 view .LVU557
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1726              		.loc 1 509 50 is_stmt 0 view .LVU558
 1727 0476 3B68     		ldr	r3, [r7]
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1728              		.loc 1 509 44 view .LVU559
 1729 0478 6668     		ldr	r6, [r4, #4]
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1730              		.loc 1 509 50 view .LVU560
 1731 047a 9B5C     		ldrb	r3, [r3, r2]
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1732              		.loc 1 509 11 view .LVU561
ARM GAS  main.s 			page 47


 1733 047c 0720     		movs	r0, #7
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1734              		.loc 1 509 44 view .LVU562
 1735 047e 4233     		adds	r3, r3, #66
 1736 0480 F618     		adds	r6, r6, r3
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1737              		.loc 1 509 11 view .LVU563
 1738 0482 FFF7FEFF 		bl	get32bitdff
 1739              	.LVL121:
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1740              		.loc 1 509 25 view .LVU564
 1741 0486 A369     		ldr	r3, [r4, #24]
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1742              		.loc 1 509 10 view .LVU565
 1743 0488 7D68     		ldr	r5, [r7, #4]
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1744              		.loc 1 509 25 view .LVU566
 1745 048a C018     		adds	r0, r0, r3
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1746              		.loc 1 509 44 view .LVU567
 1747 048c 3378     		ldrb	r3, [r6]
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1748              		.loc 1 509 10 view .LVU568
 1749 048e 2D18     		adds	r5, r5, r0
 509:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1750              		.loc 1 509 32 view .LVU569
 1751 0490 2B70     		strb	r3, [r5]
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1752              		.loc 1 511 5 is_stmt 1 view .LVU570
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1753              		.loc 1 511 55 is_stmt 0 view .LVU571
 1754 0492 3B68     		ldr	r3, [r7]
 1755 0494 019A     		ldr	r2, [sp, #4]
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1756              		.loc 1 511 50 view .LVU572
 1757 0496 164D     		ldr	r5, .L106+16
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1758              		.loc 1 511 55 view .LVU573
 1759 0498 9B5C     		ldrb	r3, [r3, r2]
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1760              		.loc 1 511 43 view .LVU574
 1761 049a 6268     		ldr	r2, [r4, #4]
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1762              		.loc 1 511 50 view .LVU575
 1763 049c 5B5D     		ldrb	r3, [r3, r5]
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1764              		.loc 1 511 11 view .LVU576
 1765 049e 0520     		movs	r0, #5
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1766              		.loc 1 511 43 view .LVU577
 1767 04a0 D318     		adds	r3, r2, r3
 1768 04a2 0393     		str	r3, [sp, #12]
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1769              		.loc 1 511 11 view .LVU578
 1770 04a4 FFF7FEFF 		bl	get32bitdf
 1771              	.LVL122:
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
ARM GAS  main.s 			page 48


 1772              		.loc 1 511 24 view .LVU579
 1773 04a8 A369     		ldr	r3, [r4, #24]
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1774              		.loc 1 511 10 view .LVU580
 1775 04aa 7E68     		ldr	r6, [r7, #4]
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1776              		.loc 1 511 24 view .LVU581
 1777 04ac C018     		adds	r0, r0, r3
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1778              		.loc 1 511 43 view .LVU582
 1779 04ae 039B     		ldr	r3, [sp, #12]
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1780              		.loc 1 511 10 view .LVU583
 1781 04b0 3618     		adds	r6, r6, r0
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1782              		.loc 1 511 43 view .LVU584
 1783 04b2 1B78     		ldrb	r3, [r3]
 513:main.c        ****     count++;
 1784              		.loc 1 513 55 view .LVU585
 1785 04b4 019A     		ldr	r2, [sp, #4]
 511:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1786              		.loc 1 511 31 view .LVU586
 1787 04b6 3370     		strb	r3, [r6]
 513:main.c        ****     count++;
 1788              		.loc 1 513 5 is_stmt 1 view .LVU587
 513:main.c        ****     count++;
 1789              		.loc 1 513 55 is_stmt 0 view .LVU588
 1790 04b8 3B68     		ldr	r3, [r7]
 513:main.c        ****     count++;
 1791              		.loc 1 513 11 view .LVU589
 1792 04ba 0620     		movs	r0, #6
 513:main.c        ****     count++;
 1793              		.loc 1 513 55 view .LVU590
 1794 04bc 9B5C     		ldrb	r3, [r3, r2]
 513:main.c        ****     count++;
 1795              		.loc 1 513 10 view .LVU591
 1796 04be 7E68     		ldr	r6, [r7, #4]
 513:main.c        ****     count++;
 1797              		.loc 1 513 50 view .LVU592
 1798 04c0 5B5D     		ldrb	r3, [r3, r5]
 513:main.c        ****     count++;
 1799              		.loc 1 513 43 view .LVU593
 1800 04c2 6568     		ldr	r5, [r4, #4]
 1801 04c4 0B33     		adds	r3, r3, #11
 1802 04c6 ED18     		adds	r5, r5, r3
 513:main.c        ****     count++;
 1803              		.loc 1 513 11 view .LVU594
 1804 04c8 FFF7FEFF 		bl	get32bitdf
 1805              	.LVL123:
 513:main.c        ****     count++;
 1806              		.loc 1 513 24 view .LVU595
 1807 04cc A369     		ldr	r3, [r4, #24]
 1808 04ce C018     		adds	r0, r0, r3
 513:main.c        ****     count++;
 1809              		.loc 1 513 43 view .LVU596
 1810 04d0 2B78     		ldrb	r3, [r5]
 513:main.c        ****     count++;
ARM GAS  main.s 			page 49


 1811              		.loc 1 513 10 view .LVU597
 1812 04d2 3618     		adds	r6, r6, r0
 513:main.c        ****     count++;
 1813              		.loc 1 513 31 view .LVU598
 1814 04d4 3370     		strb	r3, [r6]
 514:main.c        ****   }
 1815              		.loc 1 514 5 is_stmt 1 view .LVU599
 514:main.c        ****   }
 1816              		.loc 1 514 10 is_stmt 0 view .LVU600
 1817 04d6 A369     		ldr	r3, [r4, #24]
 1818 04d8 0133     		adds	r3, r3, #1
 1819 04da A361     		str	r3, [r4, #24]
 1820 04dc 1CE6     		b	.L76
 1821              	.L107:
 1822 04de C046     		.align	2
 1823              	.L106:
 1824 04e0 00000000 		.word	.LANCHOR2
 1825 04e4 00000000 		.word	.LANCHOR1
 1826 04e8 00000000 		.word	.LANCHOR0
 1827 04ec FF010000 		.word	511
 1828 04f0 001C0020 		.word	536878080
 1829              		.cfi_endproc
 1830              	.LFE10:
 1832              		.global	maxsprites
 1833              		.global	myGfxIndex
 1834              		.global	spritesort
 1835              		.global	maskdata
 1836              		.global	mask
 1837              		.global	temp5
 1838              		.global	temp4
 1839              		.global	count
 1840              		.global	pfpixel
 1841              		.global	fetcheraddr
 1842              		.global	RIOT
 1843              		.global	fetcher_address_table
 1844              		.global	C_function
 1845              		.global	queue_int
 1846              		.global	flashdata
 1847              		.global	queue
 1848              		.section	.rodata
 1849              		.set	.LANCHOR2,. + 0
 1852              	maskdata:
 1853 0000 00010307 		.ascii	"\000\001\003\007\017\037?\177\376\374\370\360\340\300"
 1853      0F1F3F7F 
 1853      FEFCF8F0 
 1853      E0C0
 1854 000e 80000080 		.ascii	"\200\000\000\200\300\340\360\370\374\376\177?\037\017"
 1854      C0E0F0F8 
 1854      FCFE7F3F 
 1854      1F0F
 1855 001c 07030100 		.ascii	"\007\003\001\000"
 1856              		.data
 1857              		.align	2
 1858              		.set	.LANCHOR1,. + 0
 1861              	RIOT:
 1862 0000 A80D0010 		.word	268438952
 1865              	queue:
ARM GAS  main.s 			page 50


 1866 0004 000C0010 		.word	268438528
 1869              	flashdata:
 1870 0008 000C0020 		.word	536873984
 1873              	C_function:
 1874 000c A40D0010 		.word	268438948
 1877              	fetcher_address_table:
 1878 0010 A06D0020 		.word	536898976
 1881              	myGfxIndex:
 1882 0014 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\000"
 1882      04050607 
 1882      0800
 1885              	spritesort:
 1886 001e 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\000"
 1886      04050607 
 1886      0800
 1889              	queue_int:
 1890 0028 000C0010 		.word	268438528
 1891              		.bss
 1892              		.align	2
 1893              		.set	.LANCHOR0,. + 0
 1896              	mask:
 1897 0000 00000000 		.space	4
 1900              	fetcheraddr:
 1901 0004 00000000 		.space	4
 1904              	temp5:
 1905 0008 00000000 		.space	4
 1908              	pfpixel:
 1909 000c 00000000 		.space	4
 1912              	maxsprites:
 1913 0010 00       		.space	1
 1914 0011 000000   		.space	3
 1917              	temp4:
 1918 0014 00000000 		.space	4
 1921              	count:
 1922 0018 00000000 		.space	4
 1923              		.text
 1924              	.Letext0:
 1925              		.file 2 "src/custom.h"
 1926              		.file 3 "<built-in>"
ARM GAS  main.s 			page 51


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
              main.s:18     .text.my_memcpy:0000000000000000 $t
              main.s:24     .text.my_memcpy:0000000000000000 my_memcpy
              main.s:85     .text.my_memcpy:0000000000000024 $d
              main.s:90     .text.my_memset:0000000000000000 $t
              main.s:96     .text.my_memset:0000000000000000 my_memset
              main.s:129    .text.reverse:0000000000000000 $t
              main.s:135    .text.reverse:0000000000000000 reverse
              main.s:183    .text.memscroll:0000000000000000 $t
              main.s:189    .text.memscroll:0000000000000000 memscroll
              main.s:239    .text.get32bitdff:0000000000000000 $t
              main.s:245    .text.get32bitdff:0000000000000000 get32bitdff
              main.s:277    .text.get32bitdff:0000000000000018 $d
              main.s:282    .text.get32bitdf:0000000000000000 $t
              main.s:288    .text.get32bitdf:0000000000000000 get32bitdf
              main.s:317    .text.get32bitdf:0000000000000010 $d
              main.s:322    .text.checkwrap:0000000000000000 $t
              main.s:328    .text.checkwrap:0000000000000000 checkwrap
              main.s:354    .text.checkswap:0000000000000000 $t
              main.s:360    .text.checkswap:0000000000000000 checkswap
              main.s:463    .text.checkswap:0000000000000044 $d
              main.s:468    .text.copynybble:0000000000000000 $t
              main.s:474    .text.copynybble:0000000000000000 copynybble
              main.s:578    .text.copynybble:0000000000000054 $d
              main.s:584    .text.on_off_flip:0000000000000000 $t
              main.s:590    .text.on_off_flip:0000000000000000 on_off_flip
              main.s:648    .text.on_off_flip:0000000000000038 $d
              main.s:659    .text.startup.main:0000000000000000 $t
              main.s:665    .text.startup.main:0000000000000000 main
              main.s:1447   .text.startup.main:0000000000000330 $d
              main.s:1457   .text.startup.main:0000000000000348 $t
              main.s:1824   .text.startup.main:00000000000004e0 $d
              main.s:1912   .bss:0000000000000010 maxsprites
              main.s:1881   .data:0000000000000014 myGfxIndex
              main.s:1885   .data:000000000000001e spritesort
              main.s:1852   .rodata:0000000000000000 maskdata
              main.s:1896   .bss:0000000000000000 mask
              main.s:1904   .bss:0000000000000008 temp5
              main.s:1917   .bss:0000000000000014 temp4
              main.s:1921   .bss:0000000000000018 count
              main.s:1908   .bss:000000000000000c pfpixel
              main.s:1900   .bss:0000000000000004 fetcheraddr
              main.s:1861   .data:0000000000000000 RIOT
              main.s:1877   .data:0000000000000010 fetcher_address_table
              main.s:1873   .data:000000000000000c C_function
              main.s:1889   .data:0000000000000028 queue_int
              main.s:1869   .data:0000000000000008 flashdata
              main.s:1865   .data:0000000000000004 queue
              main.s:1857   .data:0000000000000000 $d
              main.s:1892   .bss:0000000000000000 $d

UNDEFINED SYMBOLS
memcpy
