ARM GAS  main.s 			page 1


   1              		.arch armv6-m
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.file 1 "main.c"
  17              		.section	.text.my_memcpy,"ax",%progbits
  18              		.align	1
  19              		.global	my_memcpy
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	my_memcpy:
  25              	.LVL0:
  26              	.LFB0:
   1:main.c        **** // Provided under the GPL v2 license. See the included LICENSE.txt for details.
   2:main.c        **** 
   3:main.c        **** // src/custom.h defines the following:
   4:main.c        **** //
   5:main.c        **** // queue[]     - points to the 4K Display Data Bank
   6:main.c        **** //             - treat as RAM
   7:main.c        **** //             - Any data passed to/from the ARM and 6507 must be done via queue[]
   8:main.c        **** //
   9:main.c        **** // flashdata[] - points to the 24K that comprises the six 4K banks.
  10:main.c        **** //             - treat as ROM
  11:main.c        **** #include "src/custom.h"
  12:main.c        **** 
  13:main.c        **** 
  14:main.c        **** // types of variables, storage used and range
  15:main.c        **** // const              = constant, which is compiled into the ROM section and cannot be changed duri
  16:main.c        **** // char               =  8 bit, 1 byte  per value.  Range is           -128 to           127
  17:main.c        **** // unsigned char      =  8 bit, 1 byte  per value.  Range is              0 to           255
  18:main.c        **** // short int          = 16 bit, 2 bytes per value.  Range is        -32,768 to        32,767
  19:main.c        **** // unsigned short int = 16 bit, 2 bytes per value.  Range is              0 to        65,535
  20:main.c        **** // int                = 32 bit, 4 bytes per value.  Range is -2,147,483,648 to 2,147,483,647
  21:main.c        **** // unsigned int       = 32 bit, 4 bytes per value.  Range is              0 to 4,294,967,295
  22:main.c        **** // long int           = same as int
  23:main.c        **** // float              = 32 bit, 4 bytes.  Not Supported#
  24:main.c        **** // double             = 64 bit, 8 bytes.  Not Supported#
  25:main.c        **** // *                  = 32 bit, 4 bytes, pointer (ie: char*, int*)
  26:main.c        **** //
  27:main.c        **** // # - at least not supported with the compiler under OS X.  It might be supported by the Linux/Win
  28:main.c        **** //     compiler - but support would be implemented via software as the ARM in the Harmony Cartridge
  29:main.c        **** //     have an FPU (floating point unit).  As such, performance will most likely be as good as usin
  30:main.c        **** //     integer math based routines.
  31:main.c        **** //
  32:main.c        **** // NOTE : Only 448 bytes are allocated for use by variables (the rest of the 512 byte section is us
ARM GAS  main.s 			page 2


  33:main.c        **** //        as the stack).  If you use too many variables, you'll get a compile time error:  "region 
  34:main.c        **** //        You can use RAM in the Display Data to store values, see defines.h for queue[xxx] defines
  35:main.c        **** //
  36:main.c        **** // NOTE : Compiled code can be significantly smaller if you use INTs for your variables instead of
  37:main.c        **** //        SHORTs or CHARs.
  38:main.c        **** 
  39:main.c        **** volatile unsigned char *queue=(unsigned char *)0x10000C00;
  40:main.c        **** volatile unsigned char *flashdata=(unsigned char *)0x20000C00;
  41:main.c        **** volatile int *queue_int=(int *)0x10000C00;
  42:main.c        **** enum {
  43:main.c        **** SpriteGfxIndex,
  44:main.c        **** junk1,
  45:main.c        **** junk2,
  46:main.c        **** junk3,
  47:main.c        **** junk4, // placeholders
  48:main.c        **** junk5a, // placeholders
  49:main.c        **** junk6a, // placeholders
  50:main.c        **** junk78, // placeholders
  51:main.c        **** junk8a, // placeholders
  52:main.c        **** spritedisplay,
  53:main.c        **** player0x,
  54:main.c        **** player1x,
  55:main.c        **** player2x,
  56:main.c        **** player3x,
  57:main.c        **** player4x,
  58:main.c        **** player5x,
  59:main.c        **** player6x,
  60:main.c        **** player7x,
  61:main.c        **** player8x,
  62:main.c        **** player9x,
  63:main.c        **** player0y,
  64:main.c        **** player1y,
  65:main.c        **** player2y,
  66:main.c        **** player3y,
  67:main.c        **** player4y,
  68:main.c        **** player5y,
  69:main.c        **** player6y,
  70:main.c        **** player7y,
  71:main.c        **** player8y,
  72:main.c        **** player9y,
  73:main.c        **** player0color, junk5,
  74:main.c        **** player0height,
  75:main.c        **** player1height,
  76:main.c        **** player2height,
  77:main.c        **** player3height,
  78:main.c        **** player4height,
  79:main.c        **** player5height,
  80:main.c        **** player6height,
  81:main.c        **** player7height,
  82:main.c        **** player8height,
  83:main.c        **** player9height,
  84:main.c        **** _NUSIZ1,
  85:main.c        **** NUSIZ2,
  86:main.c        **** NUSIZ3,
  87:main.c        **** NUSIZ4,
  88:main.c        **** NUSIZ5,
  89:main.c        **** NUSIZ6,
ARM GAS  main.s 			page 3


  90:main.c        **** NUSIZ7,
  91:main.c        **** NUSIZ8,
  92:main.c        **** NUSIZ9,
  93:main.c        **** score,score2,score3,
  94:main.c        **** COLUM0,
  95:main.c        **** COLUM1,
  96:main.c        **** player0pointerlo,
  97:main.c        **** player0pointerhi,
  98:main.c        **** // end of RAM, start of playerpointers
  99:main.c        **** player1pointerlo,
 100:main.c        **** player1pointerhi,
 101:main.c        **** player2pointerlo,
 102:main.c        **** player2pointerhi,
 103:main.c        **** player3pointerlo,
 104:main.c        **** player3pointerhi,
 105:main.c        **** player4pointerlo,
 106:main.c        **** player4pointerhi,
 107:main.c        **** player5pointerlo,
 108:main.c        **** player5pointerhi,
 109:main.c        **** player6pointerlo,
 110:main.c        **** player6pointerhi,
 111:main.c        **** player7pointerlo,
 112:main.c        **** player7pointerhi,
 113:main.c        **** player8pointerlo,
 114:main.c        **** player8pointerhi,
 115:main.c        **** player9pointerlo,
 116:main.c        **** player9pointerhi,
 117:main.c        **** player1color, junk6,
 118:main.c        **** player2color, junk7,
 119:main.c        **** player3color, junk8,
 120:main.c        **** player4color, junk9,
 121:main.c        **** player5color, junk10,
 122:main.c        **** player6color, junk11,
 123:main.c        **** player7color, junk12,
 124:main.c        **** player8color, junk13,
 125:main.c        **** player9color, junk14
 126:main.c        **** };
 127:main.c        **** 
 128:main.c        ****  enum {SKIP,OVERLAP,NOOVERLAP};
 129:main.c        **** 
 130:main.c        **** // global variables are those found outside of any function.  They can be used by any function.
 131:main.c        **** // The Harmony Cartridge preserves these values for you between ARM code calls.
 132:main.c        **** 
 133:main.c        **** unsigned char *C_function=(unsigned int *)(0x10000C00 + 0x1A4);
 134:main.c        **** unsigned short *fetcher_address_table=(unsigned short *)(0x20000C00 + 0x61A0);
 135:main.c        **** unsigned char *RIOT=(unsigned char *)(0x10000C00 + 0x1A8);
 136:main.c        **** //unsigned char *HMdiv=(unsigned char *)(0x20000c00+0x1000);
 137:main.c        **** unsigned char *fetcheraddr;
 138:main.c        **** unsigned char *pfpixel;
 139:main.c        **** int count;
 140:main.c        **** //int Gfxindex;
 141:main.c        **** //signed int temp1;
 142:main.c        **** //int temp2; 
 143:main.c        **** //int temp3;
 144:main.c        **** int temp4;
 145:main.c        **** int temp5;
 146:main.c        **** unsigned int mask;
ARM GAS  main.s 			page 4


 147:main.c        **** 
 148:main.c        ****  // masking: NUSIZ bit 7=off/on, NUSIZ 6=L/R
 149:main.c        ****  // no-mask entries replaced by later if...then which is a bit smaller.
 150:main.c        ****  // in their place is masking for reflected sprites.
 151:main.c        **** const unsigned char maskdata[32]=
 152:main.c        **** 	{
 153:main.c        **** 	 0,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,
 154:main.c        **** 	 0xFE,0xFC,0xF8,0xF0,0xE0,0xC0,0x80,0,
 155:main.c        ****          0,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,
 156:main.c        ****          0x7F,0x3F,0x1F,0x0F,0x07,0x03,0x01,0
 157:main.c        ****           };
 158:main.c        **** 
 159:main.c        **** char spritesort[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 160:main.c        **** char myGfxIndex[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 161:main.c        **** 
 162:main.c        **** // changed maxsprites to a variable value, so unused sprite memory can be claimed
 163:main.c        **** char maxsprites;
 164:main.c        **** 
 165:main.c        **** #define    kernello(a) fetcheraddr[(a)]
 166:main.c        **** #define    kernelhi(a) fetcheraddr[(a)+11]
 167:main.c        **** #define    dflow(a) fetcheraddr[(a)+22]
 168:main.c        **** #define    dfhigh(a)  fetcheraddr[(a)+30]
 169:main.c        **** #define    dffraclo(a)  fetcheraddr[(a)+38]
 170:main.c        **** #define    dffrachi(a)  fetcheraddr[(a)+46]
 171:main.c        **** #define    scoregraphics(a)  fetcheraddr[(a)+54]
 172:main.c        **** #define    scorepointer(a)  fetcheraddr[(a)+56]
 173:main.c        **** #define    Hmval(a)  fetcheraddr[(a)+58]
 174:main.c        **** #define    Hmval74(a)  fetcheraddr[(a)+66]
 175:main.c        **** 
 176:main.c        **** void my_memcpy(unsigned char* destination, unsigned char* source, int offset, int count)
 177:main.c        **** { 
  27              		.loc 1 177 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
 178:main.c        ****         int i; //saves a few bytes
  31              		.loc 1 178 9 view .LVU1
 179:main.c        ****         for(i=0;i<count;i++)
  32              		.loc 1 179 9 view .LVU2
 177:main.c        ****         int i; //saves a few bytes
  33              		.loc 1 177 1 is_stmt 0 view .LVU3
  34 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
  35              		.cfi_def_cfa_offset 32
  36              		.cfi_offset 0, -32
  37              		.cfi_offset 1, -28
  38              		.cfi_offset 2, -24
  39              		.cfi_offset 4, -20
  40              		.cfi_offset 5, -16
  41              		.cfi_offset 6, -12
  42              		.cfi_offset 7, -8
  43              		.cfi_offset 14, -4
 177:main.c        ****         int i; //saves a few bytes
  44              		.loc 1 177 1 view .LVU4
  45 0002 0193     		str	r3, [sp, #4]
  46              		.loc 1 179 14 view .LVU5
  47 0004 0023     		movs	r3, #0
  48              	.LVL1:
ARM GAS  main.s 			page 5


 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  49              		.loc 1 180 56 view .LVU6
  50 0006 074F     		ldr	r7, .L4
  51              	.LVL2:
  52              	.L2:
 179:main.c        ****         for(i=0;i<count;i++)
  53              		.loc 1 179 18 is_stmt 1 discriminator 1 view .LVU7
  54 0008 019C     		ldr	r4, [sp, #4]
  55 000a A342     		cmp	r3, r4
  56 000c 00DB     		blt	.L3
 181:main.c        **** } 
  57              		.loc 1 181 1 is_stmt 0 view .LVU8
  58              		@ sp needed
  59 000e F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  60              	.L3:
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  61              		.loc 1 180 17 is_stmt 1 discriminator 3 view .LVU9
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  62              		.loc 1 180 28 is_stmt 0 discriminator 3 view .LVU10
  63 0010 FF25     		movs	r5, #255
  64 0012 D418     		adds	r4, r2, r3
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  65              		.loc 1 180 56 discriminator 3 view .LVU11
  66 0014 CE5C     		ldrb	r6, [r1, r3]
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  67              		.loc 1 180 28 discriminator 3 view .LVU12
  68 0016 2C40     		ands	r4, r5
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  69              		.loc 1 180 56 discriminator 3 view .LVU13
  70 0018 3D68     		ldr	r5, [r7]
 179:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  71              		.loc 1 179 26 discriminator 3 view .LVU14
  72 001a 0133     		adds	r3, r3, #1
  73              	.LVL3:
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  74              		.loc 1 180 56 discriminator 3 view .LVU15
  75 001c 3540     		ands	r5, r6
 180:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  76              		.loc 1 180 45 discriminator 3 view .LVU16
  77 001e 0555     		strb	r5, [r0, r4]
 179:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  78              		.loc 1 179 26 is_stmt 1 discriminator 3 view .LVU17
  79              	.LVL4:
 179:main.c        ****                 destination[(i+offset)&255] = source[i]&mask;
  80              		.loc 1 179 26 is_stmt 0 discriminator 3 view .LVU18
  81 0020 F2E7     		b	.L2
  82              	.L5:
  83 0022 C046     		.align	2
  84              	.L4:
  85 0024 00000000 		.word	.LANCHOR0
  86              		.cfi_endproc
  87              	.LFE0:
  89              		.section	.text.my_memset,"ax",%progbits
  90              		.align	1
  91              		.global	my_memset
  92              		.syntax unified
  93              		.code	16
ARM GAS  main.s 			page 6


  94              		.thumb_func
  96              	my_memset:
  97              	.LVL5:
  98              	.LFB1:
 182:main.c        **** 
 183:main.c        **** void my_memset(unsigned char* destination, int fill_value, int count)
 184:main.c        **** {
  99              		.loc 1 184 1 is_stmt 1 view -0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 185:main.c        ****         int i; //saves a few bytes
 104              		.loc 1 185 9 view .LVU20
 186:main.c        ****         for (i=0;i<count;i++)
 105              		.loc 1 186 9 view .LVU21
 106              		.loc 1 186 15 is_stmt 0 view .LVU22
 107 0000 0023     		movs	r3, #0
 108              	.LVL6:
 109              	.L7:
 110              		.loc 1 186 19 is_stmt 1 discriminator 1 view .LVU23
 111 0002 9342     		cmp	r3, r2
 112 0004 00DB     		blt	.L8
 187:main.c        ****                 destination[i]=fill_value;
 188:main.c        **** }
 113              		.loc 1 188 1 is_stmt 0 view .LVU24
 114              		@ sp needed
 115 0006 7047     		bx	lr
 116              	.L8:
 187:main.c        ****                 destination[i]=fill_value;
 117              		.loc 1 187 17 is_stmt 1 discriminator 3 view .LVU25
 187:main.c        ****                 destination[i]=fill_value;
 118              		.loc 1 187 31 is_stmt 0 discriminator 3 view .LVU26
 119 0008 C154     		strb	r1, [r0, r3]
 186:main.c        ****         for (i=0;i<count;i++)
 120              		.loc 1 186 27 is_stmt 1 discriminator 3 view .LVU27
 121 000a 0133     		adds	r3, r3, #1
 122              	.LVL7:
 186:main.c        ****         for (i=0;i<count;i++)
 123              		.loc 1 186 27 is_stmt 0 discriminator 3 view .LVU28
 124 000c F9E7     		b	.L7
 125              		.cfi_endproc
 126              	.LFE1:
 128              		.section	.text.reverse,"ax",%progbits
 129              		.align	1
 130              		.global	reverse
 131              		.syntax unified
 132              		.code	16
 133              		.thumb_func
 135              	reverse:
 136              	.LVL8:
 137              	.LFB2:
 189:main.c        **** 
 190:main.c        **** void reverse(int i, int j, unsigned char* x)
 191:main.c        **** { 
 138              		.loc 1 191 1 is_stmt 1 view -0
 139              		.cfi_startproc
ARM GAS  main.s 			page 7


 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		.loc 1 191 1 is_stmt 0 view .LVU30
 143 0000 10B5     		push	{r4, lr}
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 4, -8
 146              		.cfi_offset 14, -4
 192:main.c        ****         int t;
 147              		.loc 1 192 9 is_stmt 1 view .LVU31
 193:main.c        ****         while (i < j) 
 148              		.loc 1 193 9 view .LVU32
 149              	.L10:
 150              		.loc 1 193 18 view .LVU33
 151 0002 8842     		cmp	r0, r1
 152 0004 00DB     		blt	.L11
 194:main.c        ****         {
 195:main.c        ****               t = x[i]; x[i] = x[j]; x[j] = t;
 196:main.c        ****               i++;
 197:main.c        ****               j--;
 198:main.c        ****         }
 199:main.c        **** }
 153              		.loc 1 199 1 is_stmt 0 view .LVU34
 154              		@ sp needed
 155 0006 10BD     		pop	{r4, pc}
 156              	.L11:
 195:main.c        ****               i++;
 157              		.loc 1 195 15 is_stmt 1 view .LVU35
 195:main.c        ****               i++;
 158              		.loc 1 195 20 is_stmt 0 view .LVU36
 159 0008 135C     		ldrb	r3, [r2, r0]
 160              	.LVL9:
 195:main.c        ****               i++;
 161              		.loc 1 195 25 is_stmt 1 view .LVU37
 195:main.c        ****               i++;
 162              		.loc 1 195 33 is_stmt 0 view .LVU38
 163 000a 545C     		ldrb	r4, [r2, r1]
 195:main.c        ****               i++;
 164              		.loc 1 195 30 view .LVU39
 165 000c 1454     		strb	r4, [r2, r0]
 195:main.c        ****               i++;
 166              		.loc 1 195 38 is_stmt 1 view .LVU40
 195:main.c        ****               i++;
 167              		.loc 1 195 43 is_stmt 0 view .LVU41
 168 000e 5354     		strb	r3, [r2, r1]
 196:main.c        ****               j--;
 169              		.loc 1 196 15 is_stmt 1 view .LVU42
 196:main.c        ****               j--;
 170              		.loc 1 196 16 is_stmt 0 view .LVU43
 171 0010 0130     		adds	r0, r0, #1
 172              	.LVL10:
 197:main.c        ****         }
 173              		.loc 1 197 15 is_stmt 1 view .LVU44
 197:main.c        ****         }
 174              		.loc 1 197 16 is_stmt 0 view .LVU45
 175 0012 0139     		subs	r1, r1, #1
 176              	.LVL11:
 197:main.c        ****         }
ARM GAS  main.s 			page 8


 177              		.loc 1 197 16 view .LVU46
 178 0014 F5E7     		b	.L10
 179              		.cfi_endproc
 180              	.LFE2:
 182              		.section	.text.memscroll,"ax",%progbits
 183              		.align	1
 184              		.global	memscroll
 185              		.syntax unified
 186              		.code	16
 187              		.thumb_func
 189              	memscroll:
 190              	.LVL12:
 191              	.LFB3:
 200:main.c        **** 
 201:main.c        **** void memscroll(unsigned char* qmemory, unsigned char offset)
 202:main.c        **** {
 192              		.loc 1 202 1 is_stmt 1 view -0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 203:main.c        ****         // the classic "shift N elements through reversal" algorithm
 204:main.c        ****         reverse(0,offset-1,qmemory);
 196              		.loc 1 204 9 view .LVU48
 202:main.c        ****         // the classic "shift N elements through reversal" algorithm
 197              		.loc 1 202 1 is_stmt 0 view .LVU49
 198 0000 70B5     		push	{r4, r5, r6, lr}
 199              		.cfi_def_cfa_offset 16
 200              		.cfi_offset 4, -16
 201              		.cfi_offset 5, -12
 202              		.cfi_offset 6, -8
 203              		.cfi_offset 14, -4
 202:main.c        ****         // the classic "shift N elements through reversal" algorithm
 204              		.loc 1 202 1 view .LVU50
 205 0002 0400     		movs	r4, r0
 205:main.c        ****         reverse(offset,255,qmemory);
 206:main.c        ****         reverse(0,255,qmemory);
 207:main.c        **** }
 206              		.loc 1 207 1 view .LVU51
 207              		@ sp needed
 202:main.c        ****         // the classic "shift N elements through reversal" algorithm
 208              		.loc 1 202 1 view .LVU52
 209 0004 0D00     		movs	r5, r1
 204:main.c        ****         reverse(offset,255,qmemory);
 210              		.loc 1 204 9 view .LVU53
 211 0006 0200     		movs	r2, r0
 212 0008 0139     		subs	r1, r1, #1
 213              	.LVL13:
 204:main.c        ****         reverse(offset,255,qmemory);
 214              		.loc 1 204 9 view .LVU54
 215 000a 0020     		movs	r0, #0
 216              	.LVL14:
 204:main.c        ****         reverse(offset,255,qmemory);
 217              		.loc 1 204 9 view .LVU55
 218 000c FFF7FEFF 		bl	reverse
 219              	.LVL15:
 205:main.c        ****         reverse(offset,255,qmemory);
 220              		.loc 1 205 9 is_stmt 1 view .LVU56
ARM GAS  main.s 			page 9


 221 0010 2800     		movs	r0, r5
 222 0012 2200     		movs	r2, r4
 223 0014 FF21     		movs	r1, #255
 224 0016 FFF7FEFF 		bl	reverse
 225              	.LVL16:
 206:main.c        **** }
 226              		.loc 1 206 9 view .LVU57
 227 001a 2200     		movs	r2, r4
 228 001c FF21     		movs	r1, #255
 229 001e 0020     		movs	r0, #0
 230 0020 FFF7FEFF 		bl	reverse
 231              	.LVL17:
 232              	.LVL18:
 233              		.loc 1 207 1 is_stmt 0 view .LVU58
 234 0024 70BD     		pop	{r4, r5, r6, pc}
 235              		.cfi_endproc
 236              	.LFE3:
 238              		.section	.text.get32bitdff,"ax",%progbits
 239              		.align	1
 240              		.global	get32bitdff
 241              		.syntax unified
 242              		.code	16
 243              		.thumb_func
 245              	get32bitdff:
 246              	.LVL19:
 247              	.LFB4:
 208:main.c        **** 
 209:main.c        **** unsigned int get32bitdff(int offset)
 210:main.c        **** {
 248              		.loc 1 210 1 is_stmt 1 view -0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 211:main.c        ****   return((dffrachi(offset)<<8)+dffraclo(offset));
 253              		.loc 1 211 3 view .LVU60
 254              		.loc 1 211 22 is_stmt 0 view .LVU61
 255 0000 054B     		ldr	r3, .L14
 212:main.c        **** }
 256              		.loc 1 212 1 view .LVU62
 257              		@ sp needed
 211:main.c        ****   return((dffrachi(offset)<<8)+dffraclo(offset));
 258              		.loc 1 211 22 view .LVU63
 259 0002 5B68     		ldr	r3, [r3, #4]
 260 0004 1B18     		adds	r3, r3, r0
 261 0006 1A00     		movs	r2, r3
 262 0008 2E32     		adds	r2, r2, #46
 263 000a 1078     		ldrb	r0, [r2]
 264              	.LVL20:
 211:main.c        ****   return((dffrachi(offset)<<8)+dffraclo(offset));
 265              		.loc 1 211 51 view .LVU64
 266 000c 0733     		adds	r3, r3, #7
 267 000e DB7F     		ldrb	r3, [r3, #31]
 211:main.c        ****   return((dffrachi(offset)<<8)+dffraclo(offset));
 268              		.loc 1 211 35 view .LVU65
 269 0010 0002     		lsls	r0, r0, #8
 211:main.c        ****   return((dffrachi(offset)<<8)+dffraclo(offset));
ARM GAS  main.s 			page 10


 270              		.loc 1 211 39 view .LVU66
 271 0012 C018     		adds	r0, r0, r3
 272              		.loc 1 212 1 view .LVU67
 273 0014 7047     		bx	lr
 274              	.L15:
 275 0016 C046     		.align	2
 276              	.L14:
 277 0018 00000000 		.word	.LANCHOR0
 278              		.cfi_endproc
 279              	.LFE4:
 281              		.section	.text.get32bitdf,"ax",%progbits
 282              		.align	1
 283              		.global	get32bitdf
 284              		.syntax unified
 285              		.code	16
 286              		.thumb_func
 288              	get32bitdf:
 289              	.LVL21:
 290              	.LFB5:
 213:main.c        **** 
 214:main.c        **** unsigned int get32bitdf(int offset)
 215:main.c        **** {
 291              		.loc 1 215 1 is_stmt 1 view -0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 216:main.c        ****   return((dfhigh(offset)<<8)+dflow(offset));
 296              		.loc 1 216 3 view .LVU69
 297              		.loc 1 216 22 is_stmt 0 view .LVU70
 298 0000 034B     		ldr	r3, .L17
 217:main.c        **** }
 299              		.loc 1 217 1 view .LVU71
 300              		@ sp needed
 216:main.c        ****   return((dfhigh(offset)<<8)+dflow(offset));
 301              		.loc 1 216 22 view .LVU72
 302 0002 5B68     		ldr	r3, [r3, #4]
 303 0004 1B18     		adds	r3, r3, r0
 304 0006 987F     		ldrb	r0, [r3, #30]
 305              	.LVL22:
 216:main.c        ****   return((dfhigh(offset)<<8)+dflow(offset));
 306              		.loc 1 216 51 view .LVU73
 307 0008 9B7D     		ldrb	r3, [r3, #22]
 216:main.c        ****   return((dfhigh(offset)<<8)+dflow(offset));
 308              		.loc 1 216 35 view .LVU74
 309 000a 0002     		lsls	r0, r0, #8
 216:main.c        ****   return((dfhigh(offset)<<8)+dflow(offset));
 310              		.loc 1 216 39 view .LVU75
 311 000c C018     		adds	r0, r0, r3
 312              		.loc 1 217 1 view .LVU76
 313 000e 7047     		bx	lr
 314              	.L18:
 315              		.align	2
 316              	.L17:
 317 0010 00000000 		.word	.LANCHOR0
 318              		.cfi_endproc
 319              	.LFE5:
ARM GAS  main.s 			page 11


 321              		.section	.text.shiftnumbers,"ax",%progbits
 322              		.align	1
 323              		.global	shiftnumbers
 324              		.syntax unified
 325              		.code	16
 326              		.thumb_func
 328              	shiftnumbers:
 329              	.LVL23:
 330              	.LFB6:
 218:main.c        **** 
 219:main.c        **** void shiftnumbers(int xreg)
 220:main.c        **** {
 331              		.loc 1 220 1 is_stmt 1 view -0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 221:main.c        ****   while (xreg!=maxsprites-1)
 335              		.loc 1 221 3 view .LVU78
 220:main.c        ****   while (xreg!=maxsprites-1)
 336              		.loc 1 220 1 is_stmt 0 view .LVU79
 337 0000 10B5     		push	{r4, lr}
 338              		.cfi_def_cfa_offset 8
 339              		.cfi_offset 4, -8
 340              		.cfi_offset 14, -4
 341              		.loc 1 221 26 view .LVU80
 342 0002 054B     		ldr	r3, .L20
 222:main.c        ****   {
 223:main.c        ****     myGfxIndex[xreg]=myGfxIndex[xreg+1];
 343              		.loc 1 223 21 view .LVU81
 344 0004 411C     		adds	r1, r0, #1
 345 0006 1A7A     		ldrb	r2, [r3, #8]
 346 0008 044B     		ldr	r3, .L20+4
 347 000a 013A     		subs	r2, r2, #1
 348 000c 121A     		subs	r2, r2, r0
 349 000e 5918     		adds	r1, r3, r1
 350 0010 1818     		adds	r0, r3, r0
 351              	.LVL24:
 352              		.loc 1 223 21 view .LVU82
 353 0012 FFF7FEFF 		bl	memmove
 354              	.LVL25:
 224:main.c        ****     xreg++;
 225:main.c        ****   }
 226:main.c        ****   
 227:main.c        **** }
 355              		.loc 1 227 1 view .LVU83
 356              		@ sp needed
 357 0016 10BD     		pop	{r4, pc}
 358              	.L21:
 359              		.align	2
 360              	.L20:
 361 0018 00000000 		.word	.LANCHOR0
 362 001c 00000000 		.word	.LANCHOR1
 363              		.cfi_endproc
 364              	.LFE6:
 366              		.section	.text.checkswap,"ax",%progbits
 367              		.align	1
 368              		.global	checkswap
ARM GAS  main.s 			page 12


 369              		.syntax unified
 370              		.code	16
 371              		.thumb_func
 373              	checkswap:
 374              	.LVL26:
 375              	.LFB7:
 228:main.c        **** 
 229:main.c        **** /* char checkwrap(char a, char b) */
 230:main.c        **** /* { */
 231:main.c        **** /*   if (((a+b)&255)<b) return 0; */
 232:main.c        **** /*   return a; */
 233:main.c        **** /* } */
 234:main.c        **** 
 235:main.c        **** int checkswap(int a, int b)
 236:main.c        **** {
 376              		.loc 1 236 1 is_stmt 1 view -0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 237:main.c        ****   signed int temp1;
 380              		.loc 1 237 3 view .LVU85
 238:main.c        ****   char s1,s2;
 381              		.loc 1 238 3 view .LVU86
 239:main.c        **** 
 240:main.c        ****   /* s1=checkwrap(RIOT[player1y+a],RIOT[player1height+a]); */
 241:main.c        ****   if ((RIOT[player1y+a]+RIOT[player1height+a]&255) < RIOT[player1height+a]) {
 382              		.loc 1 241 3 view .LVU87
 236:main.c        ****   signed int temp1;
 383              		.loc 1 236 1 is_stmt 0 view .LVU88
 384 0000 10B5     		push	{r4, lr}
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 4, -8
 387              		.cfi_offset 14, -4
 388              		.loc 1 241 12 view .LVU89
 389 0002 104B     		ldr	r3, .L29
 390 0004 DA68     		ldr	r2, [r3, #12]
 391 0006 1018     		adds	r0, r2, r0
 392              	.LVL27:
 393              		.loc 1 241 12 view .LVU90
 394 0008 437D     		ldrb	r3, [r0, #21]
 395              		.loc 1 241 29 view .LVU91
 396 000a 0230     		adds	r0, r0, #2
 397 000c C47F     		ldrb	r4, [r0, #31]
 398              		.loc 1 241 46 view .LVU92
 399 000e 1819     		adds	r0, r3, r4
 400              		.loc 1 241 6 view .LVU93
 401 0010 C0B2     		uxtb	r0, r0
 402 0012 8442     		cmp	r4, r0
 403 0014 00D9     		bls	.L23
 242:main.c        **** 	  s1 = 0;
 404              		.loc 1 242 7 view .LVU94
 405 0016 0023     		movs	r3, #0
 406              	.L23:
 407              	.LVL28:
 243:main.c        ****   } else {
 244:main.c        **** 	  s1 = RIOT[player1y+a];
 245:main.c        ****   }
ARM GAS  main.s 			page 13


 246:main.c        **** 
 247:main.c        ****   /* s2=checkwrap(RIOT[player1y+b],RIOT[player1height+b]); */
 248:main.c        ****   if ((RIOT[player1y+b]+RIOT[player1height+b]&255) < RIOT[player1height+b]) {
 408              		.loc 1 248 3 is_stmt 1 view .LVU95
 409              		.loc 1 248 12 is_stmt 0 view .LVU96
 410 0018 5218     		adds	r2, r2, r1
 411 001a 517D     		ldrb	r1, [r2, #21]
 412              	.LVL29:
 413              		.loc 1 248 29 view .LVU97
 414 001c 0232     		adds	r2, r2, #2
 415 001e D27F     		ldrb	r2, [r2, #31]
 416              		.loc 1 248 46 view .LVU98
 417 0020 8818     		adds	r0, r1, r2
 418              		.loc 1 248 6 view .LVU99
 419 0022 C0B2     		uxtb	r0, r0
 420 0024 8242     		cmp	r2, r0
 421 0026 00D9     		bls	.L24
 249:main.c        **** 	  s2 = 0;
 422              		.loc 1 249 7 view .LVU100
 423 0028 0021     		movs	r1, #0
 424              	.L24:
 425              	.LVL30:
 250:main.c        ****   } else {
 251:main.c        **** 	  s2 = RIOT[player1y+b];
 252:main.c        ****   }
 253:main.c        **** 
 254:main.c        ****   temp1=s1-s2;
 426              		.loc 1 254 3 is_stmt 1 view .LVU101
 255:main.c        ****   if (temp1>0)
 256:main.c        ****   { // larger is higher
 257:main.c        ****     if ((temp1-=5)>0)
 258:main.c        ****     {// not overlapping
 259:main.c        ****       if (temp1>RIOT[player1height+b])
 260:main.c        **** 	return SKIP;
 261:main.c        ****       else return OVERLAP;
 427              		.loc 1 261 19 is_stmt 0 view .LVU102
 428 002a 0120     		movs	r0, #1
 254:main.c        ****   if (temp1>0)
 429              		.loc 1 254 8 view .LVU103
 430 002c 5B1A     		subs	r3, r3, r1
 431              	.LVL31:
 255:main.c        ****   if (temp1>0)
 432              		.loc 1 255 3 is_stmt 1 view .LVU104
 255:main.c        ****   if (temp1>0)
 433              		.loc 1 255 6 is_stmt 0 view .LVU105
 434 002e 002B     		cmp	r3, #0
 435 0030 06DD     		ble	.L22
 257:main.c        ****     {// not overlapping
 436              		.loc 1 257 5 is_stmt 1 view .LVU106
 257:main.c        ****     {// not overlapping
 437              		.loc 1 257 15 is_stmt 0 view .LVU107
 438 0032 053B     		subs	r3, r3, #5
 439              	.LVL32:
 257:main.c        ****     {// not overlapping
 440              		.loc 1 257 8 view .LVU108
 441 0034 002B     		cmp	r3, #0
 442 0036 03DD     		ble	.L22
ARM GAS  main.s 			page 14


 259:main.c        **** 	return SKIP;
 443              		.loc 1 259 7 is_stmt 1 view .LVU109
 259:main.c        **** 	return SKIP;
 444              		.loc 1 259 10 is_stmt 0 view .LVU110
 445 0038 D017     		asrs	r0, r2, #31
 446 003a D90F     		lsrs	r1, r3, #31
 447              	.LVL33:
 259:main.c        **** 	return SKIP;
 448              		.loc 1 259 10 view .LVU111
 449 003c 9A42     		cmp	r2, r3
 450 003e 4841     		adcs	r0, r0, r1
 451              	.L22:
 262:main.c        ****     }
 263:main.c        ****     else
 264:main.c        ****       return OVERLAP;
 265:main.c        ****   }
 266:main.c        ****   else // largerXislower
 267:main.c        ****   {
 268:main.c        ****     if ((temp1=(temp1^0xFF)-5)>0)
 269:main.c        ****       return OVERLAP;
 270:main.c        ****     else
 271:main.c        ****     {//notoverlapping
 272:main.c        ****       if (temp1>RIOT[player1height+b])
 273:main.c        ****         return NOOVERLAP;
 274:main.c        ****       else return OVERLAP;
 275:main.c        ****     }
 276:main.c        ****   }
 277:main.c        **** }
 452              		.loc 1 277 1 view .LVU112
 453              		@ sp needed
 454 0040 10BD     		pop	{r4, pc}
 455              	.L30:
 456 0042 C046     		.align	2
 457              	.L29:
 458 0044 00000000 		.word	.LANCHOR1
 459              		.cfi_endproc
 460              	.LFE7:
 462              		.section	.text.copynybble,"ax",%progbits
 463              		.align	1
 464              		.global	copynybble
 465              		.syntax unified
 466              		.code	16
 467              		.thumb_func
 469              	copynybble:
 470              	.LVL34:
 471              	.LFB8:
 278:main.c        **** 
 279:main.c        **** void copynybble(unsigned char num)
 280:main.c        **** {
 472              		.loc 1 280 1 is_stmt 1 view -0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 8
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 281:main.c        ****     int i;
 476              		.loc 1 281 5 view .LVU114
 282:main.c        ****     unsigned char *destination;
 477              		.loc 1 282 5 view .LVU115
ARM GAS  main.s 			page 15


 283:main.c        ****     unsigned char *source;
 478              		.loc 1 283 5 view .LVU116
 284:main.c        ****     destination=queue+(scorepointer(1)<<8)+scorepointer(0)+((temp5++)<<3);
 479              		.loc 1 284 5 view .LVU117
 280:main.c        ****     int i;
 480              		.loc 1 280 1 is_stmt 0 view .LVU118
 481 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 482              		.cfi_def_cfa_offset 32
 483              		.cfi_offset 0, -32
 484              		.cfi_offset 1, -28
 485              		.cfi_offset 2, -24
 486              		.cfi_offset 4, -20
 487              		.cfi_offset 5, -16
 488              		.cfi_offset 6, -12
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491              		.loc 1 284 35 view .LVU119
 492 0002 144A     		ldr	r2, .L34
 493              		.loc 1 284 67 view .LVU120
 494 0004 144F     		ldr	r7, .L34+4
 495              		.loc 1 284 35 view .LVU121
 496 0006 5168     		ldr	r1, [r2, #4]
 280:main.c        ****     int i;
 497              		.loc 1 280 1 view .LVU122
 498 0008 0190     		str	r0, [sp, #4]
 499              		.loc 1 284 35 view .LVU123
 500 000a 0B00     		movs	r3, r1
 501 000c 3933     		adds	r3, r3, #57
 502              		.loc 1 284 43 view .LVU124
 503 000e 1D78     		ldrb	r5, [r3]
 504              		.loc 1 284 59 view .LVU125
 505 0010 013B     		subs	r3, r3, #1
 506 0012 1E78     		ldrb	r6, [r3]
 507              		.loc 1 284 75 view .LVU126
 508 0014 D368     		ldr	r3, [r2, #12]
 509              		.loc 1 284 67 view .LVU127
 510 0016 3C69     		ldr	r4, [r7, #16]
 511              		.loc 1 284 75 view .LVU128
 512 0018 581C     		adds	r0, r3, #1
 513              	.LVL35:
 514              		.loc 1 284 75 view .LVU129
 515 001a D060     		str	r0, [r2, #12]
 285:main.c        ****     source=flashdata+(scoregraphics(1)<<8)+scoregraphics(0)+((num&0x0F)<<3);
 516              		.loc 1 285 66 view .LVU130
 517 001c 7A69     		ldr	r2, [r7, #20]
 518              		.loc 1 285 78 view .LVU131
 519 001e 7827     		movs	r7, #120
 520 0020 0198     		ldr	r0, [sp, #4]
 284:main.c        ****     destination=queue+(scorepointer(1)<<8)+scorepointer(0)+((temp5++)<<3);
 521              		.loc 1 284 78 view .LVU132
 522 0022 DB00     		lsls	r3, r3, #3
 523              		.loc 1 285 78 view .LVU133
 524 0024 C000     		lsls	r0, r0, #3
 525 0026 3840     		ands	r0, r7
 526              		.loc 1 285 46 view .LVU134
 527 0028 0F00     		movs	r7, r1
 528 002a 3731     		adds	r1, r1, #55
ARM GAS  main.s 			page 16


 529 002c 0978     		ldrb	r1, [r1]
 530 002e 3637     		adds	r7, r7, #54
 531 0030 3F78     		ldrb	r7, [r7]
 532 0032 0902     		lsls	r1, r1, #8
 533 0034 3943     		orrs	r1, r7
 534              		.loc 1 285 66 view .LVU135
 535 0036 4018     		adds	r0, r0, r1
 284:main.c        ****     destination=queue+(scorepointer(1)<<8)+scorepointer(0)+((temp5++)<<3);
 536              		.loc 1 284 43 view .LVU136
 537 0038 2D02     		lsls	r5, r5, #8
 538              		.loc 1 285 5 is_stmt 1 view .LVU137
 539              	.LVL36:
 286:main.c        ****         for(i=0;i<8;i++)
 540              		.loc 1 286 9 view .LVU138
 541              		.loc 1 286 18 view .LVU139
 284:main.c        ****     source=flashdata+(scoregraphics(1)<<8)+scoregraphics(0)+((num&0x0F)<<3);
 542              		.loc 1 284 67 is_stmt 0 view .LVU140
 543 003a 9B19     		adds	r3, r3, r6
 544 003c 1118     		adds	r1, r2, r0
 545              	.LVL37:
 284:main.c        ****     source=flashdata+(scoregraphics(1)<<8)+scoregraphics(0)+((num&0x0F)<<3);
 546              		.loc 1 284 67 view .LVU141
 547 003e 5B19     		adds	r3, r3, r5
 548 0040 083A     		subs	r2, r2, #8
 549 0042 E418     		adds	r4, r4, r3
 550 0044 1218     		adds	r2, r2, r0
 551              	.LVL38:
 552              	.L32:
 287:main.c        ****                 destination[i] = source[7-i];
 553              		.loc 1 287 17 is_stmt 1 discriminator 3 view .LVU142
 554              		.loc 1 287 40 is_stmt 0 discriminator 3 view .LVU143
 555 0046 CB79     		ldrb	r3, [r1, #7]
 286:main.c        ****         for(i=0;i<8;i++)
 556              		.loc 1 286 18 discriminator 3 view .LVU144
 557 0048 0139     		subs	r1, r1, #1
 558              		.loc 1 287 32 discriminator 3 view .LVU145
 559 004a 2370     		strb	r3, [r4]
 286:main.c        ****         for(i=0;i<8;i++)
 560              		.loc 1 286 22 is_stmt 1 discriminator 3 view .LVU146
 286:main.c        ****         for(i=0;i<8;i++)
 561              		.loc 1 286 18 discriminator 3 view .LVU147
 562 004c 0134     		adds	r4, r4, #1
 286:main.c        ****         for(i=0;i<8;i++)
 563              		.loc 1 286 18 is_stmt 0 discriminator 3 view .LVU148
 564 004e 9142     		cmp	r1, r2
 565 0050 F9D1     		bne	.L32
 288:main.c        **** 
 289:main.c        **** }
 566              		.loc 1 289 1 view .LVU149
 567              		@ sp needed
 568              		.loc 1 289 1 view .LVU150
 569 0052 F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 570              	.L35:
 571              		.align	2
 572              	.L34:
 573 0054 00000000 		.word	.LANCHOR0
 574 0058 00000000 		.word	.LANCHOR1
ARM GAS  main.s 			page 17


 575              		.cfi_endproc
 576              	.LFE8:
 578              		.section	.text.on_off_flip,"ax",%progbits
 579              		.align	1
 580              		.global	on_off_flip
 581              		.syntax unified
 582              		.code	16
 583              		.thumb_func
 585              	on_off_flip:
 586              	.LVL39:
 587              	.LFB9:
 290:main.c        **** 
 291:main.c        **** void on_off_flip(unsigned int loc, unsigned int fnmask)
 292:main.c        **** {
 588              		.loc 1 292 1 is_stmt 1 view -0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 0
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 592              		@ link register save eliminated.
 293:main.c        ****   switch(C_function[0]&3)
 593              		.loc 1 293 3 view .LVU152
 594 0000 0322     		movs	r2, #3
 595              		.loc 1 293 20 is_stmt 0 view .LVU153
 596 0002 0D4B     		ldr	r3, .L41
 597 0004 9B69     		ldr	r3, [r3, #24]
 598 0006 1B78     		ldrb	r3, [r3]
 599 0008 1340     		ands	r3, r2
 600              		.loc 1 293 3 view .LVU154
 601 000a 012B     		cmp	r3, #1
 602 000c 09D0     		beq	.L37
 603 000e 022B     		cmp	r3, #2
 604 0010 0CD0     		beq	.L38
 605 0012 002B     		cmp	r3, #0
 606 0014 04D1     		bne	.L36
 294:main.c        ****   {
 295:main.c        ****     case 0://on
 296:main.c        ****       pfpixel[loc]|=fnmask;
 607              		.loc 1 296 7 is_stmt 1 view .LVU155
 608              		.loc 1 296 14 is_stmt 0 view .LVU156
 609 0016 094B     		ldr	r3, .L41+4
 610 0018 1A69     		ldr	r2, [r3, #16]
 611              		.loc 1 296 19 view .LVU157
 612 001a 135C     		ldrb	r3, [r2, r0]
 613 001c 0B43     		orrs	r3, r1
 614              	.L40:
 297:main.c        ****       return;
 298:main.c        ****     case 1://off
 299:main.c        ****       pfpixel[loc]&=~fnmask;
 300:main.c        ****       return;
 301:main.c        ****     case 2://flip
 302:main.c        ****       pfpixel[loc]^=fnmask;
 615              		.loc 1 302 19 view .LVU158
 616 001e 1354     		strb	r3, [r2, r0]
 303:main.c        ****       return;
 617              		.loc 1 303 7 is_stmt 1 view .LVU159
 618              	.L36:
 304:main.c        ****     default://reserved (for what?)
ARM GAS  main.s 			page 18


 305:main.c        ****       break;
 306:main.c        ****   }
 307:main.c        **** }
 619              		.loc 1 307 1 is_stmt 0 view .LVU160
 620              		@ sp needed
 621 0020 7047     		bx	lr
 622              	.L37:
 299:main.c        ****       return;
 623              		.loc 1 299 7 is_stmt 1 view .LVU161
 299:main.c        ****       return;
 624              		.loc 1 299 14 is_stmt 0 view .LVU162
 625 0022 064B     		ldr	r3, .L41+4
 626 0024 1A69     		ldr	r2, [r3, #16]
 299:main.c        ****       return;
 627              		.loc 1 299 19 view .LVU163
 628 0026 135C     		ldrb	r3, [r2, r0]
 629 0028 8B43     		bics	r3, r1
 630 002a F8E7     		b	.L40
 631              	.L38:
 302:main.c        ****       return;
 632              		.loc 1 302 7 is_stmt 1 view .LVU164
 302:main.c        ****       return;
 633              		.loc 1 302 14 is_stmt 0 view .LVU165
 634 002c 034B     		ldr	r3, .L41+4
 635 002e 1A69     		ldr	r2, [r3, #16]
 302:main.c        ****       return;
 636              		.loc 1 302 19 view .LVU166
 637 0030 135C     		ldrb	r3, [r2, r0]
 638 0032 4B40     		eors	r3, r1
 639 0034 F3E7     		b	.L40
 640              	.L42:
 641 0036 C046     		.align	2
 642              	.L41:
 643 0038 00000000 		.word	.LANCHOR1
 644 003c 00000000 		.word	.LANCHOR0
 645              		.cfi_endproc
 646              	.LFE9:
 648              		.section	.rodata.str1.1,"aMS",%progbits,1
 649              	.LC13:
 650 0000 80402010 		.ascii	"\200@ \020\010\004\002\001\001\002\004\010\020 @\200"
 650      08040201 
 650      01020408 
 650      10204080 
 651 0010 80402010 		.ascii	"\200@ \020\010\004\002\001\001\002\004\010\020 @\200"
 651      08040201 
 651      01020408 
 651      10204080 
 652 0020 00       		.ascii	"\000"
 653              		.section	.text.startup.main,"ax",%progbits
 654              		.align	1
 655              		.global	main
 656              		.syntax unified
 657              		.code	16
 658              		.thumb_func
 660              	main:
 661              	.LFB10:
 308:main.c        **** 
ARM GAS  main.s 			page 19


 309:main.c        **** // main() is what gets called when you store 0xFF into DPC+ register CALLFUNCTION in your 6507 code
 310:main.c        **** int main()
 311:main.c        **** {
 662              		.loc 1 311 1 is_stmt 1 view -0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 64
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 312:main.c        **** 
 313:main.c        ****   int i;
 666              		.loc 1 313 3 view .LVU168
 314:main.c        **** 
 315:main.c        ****   // moving the the scope of these variables saved a *lot* of space. 
 316:main.c        ****   int temp2;
 667              		.loc 1 316 3 view .LVU169
 317:main.c        ****   int temp3;
 668              		.loc 1 317 3 view .LVU170
 318:main.c        ****   int Gfxindex;
 669              		.loc 1 318 3 view .LVU171
 319:main.c        ****   unsigned char *HMdiv=(unsigned char *)(0x20000c00+0x1000);
 670              		.loc 1 319 3 view .LVU172
 671              	.LVL40:
 320:main.c        ****   const unsigned char setbyte[32]=
 672              		.loc 1 320 3 view .LVU173
 311:main.c        **** 
 673              		.loc 1 311 1 is_stmt 0 view .LVU174
 674 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 675              		.cfi_def_cfa_offset 20
 676              		.cfi_offset 4, -20
 677              		.cfi_offset 5, -16
 678              		.cfi_offset 6, -12
 679              		.cfi_offset 7, -8
 680              		.cfi_offset 14, -4
 681 0002 91B0     		sub	sp, sp, #68
 682              		.cfi_def_cfa_offset 88
 683              		.loc 1 320 23 view .LVU175
 684 0004 2022     		movs	r2, #32
 685 0006 C949     		ldr	r1, .L96
 686 0008 08A8     		add	r0, sp, #32
 687 000a FFF7FEFF 		bl	memcpy
 688              	.LVL41:
 321:main.c        **** 	{0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01,
 322:main.c        **** 	 0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
 323:main.c        **** 	 0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01,
 324:main.c        **** 	 0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
 325:main.c        **** 
 326:main.c        ****   fetcheraddr=flashdata+fetcher_address_table[0];
 689              		.loc 1 326 3 is_stmt 1 view .LVU176
 690              		.loc 1 326 24 is_stmt 0 view .LVU177
 691 000e C84C     		ldr	r4, .L96+4
 692              		.loc 1 326 14 view .LVU178
 693 0010 C84E     		ldr	r6, .L96+8
 694              		.loc 1 326 46 view .LVU179
 695 0012 E369     		ldr	r3, [r4, #28]
 696 0014 1A88     		ldrh	r2, [r3]
 697              		.loc 1 326 24 view .LVU180
 698 0016 6369     		ldr	r3, [r4, #20]
 699 0018 9B18     		adds	r3, r3, r2
ARM GAS  main.s 			page 20


 700 001a 0322     		movs	r2, #3
 701              		.loc 1 326 14 view .LVU181
 702 001c 7360     		str	r3, [r6, #4]
 327:main.c        **** 
 328:main.c        ****   // preindex these to save some space...
 329:main.c        ****   unsigned char C_function1=C_function[1];
 703              		.loc 1 329 3 is_stmt 1 view .LVU182
 704              		.loc 1 329 17 is_stmt 0 view .LVU183
 705 001e A369     		ldr	r3, [r4, #24]
 706 0020 0293     		str	r3, [sp, #8]
 707 0022 5B78     		ldrb	r3, [r3, #1]
 708 0024 0193     		str	r3, [sp, #4]
 709              	.LVL42:
 330:main.c        ****   unsigned char C_function2=C_function[2];
 710              		.loc 1 330 3 is_stmt 1 view .LVU184
 711              		.loc 1 330 17 is_stmt 0 view .LVU185
 712 0026 029B     		ldr	r3, [sp, #8]
 713 0028 9D78     		ldrb	r5, [r3, #2]
 714              	.LVL43:
 331:main.c        ****   unsigned char C_function3=C_function[3];
 715              		.loc 1 331 3 is_stmt 1 view .LVU186
 716              		.loc 1 331 17 is_stmt 0 view .LVU187
 717 002a DF78     		ldrb	r7, [r3, #3]
 718              	.LVL44:
 332:main.c        **** 
 333:main.c        ****   switch (C_function[0]&0xFC)
 719              		.loc 1 333 3 is_stmt 1 view .LVU188
 720 002c 1B78     		ldrb	r3, [r3]
 721 002e 9343     		bics	r3, r2
 722 0030 142B     		cmp	r3, #20
 723 0032 00D1     		bne	.LCB578
 724 0034 EFE0     		b	.L44	@long jump
 725              	.LCB578:
 726 0036 00D9     		bls	.LCB580
 727 0038 A2E0     		b	.L45	@long jump
 728              	.LCB580:
 729 003a 0C2B     		cmp	r3, #12
 730 003c 00D1     		bne	.LCB582
 731 003e DEE0     		b	.L46	@long jump
 732              	.LCB582:
 733 0040 00D9     		bls	.LCB584
 734 0042 93E0     		b	.L47	@long jump
 735              	.LCB584:
 736 0044 042B     		cmp	r3, #4
 737 0046 00D1     		bne	.LCB586
 738 0048 B5E0     		b	.L48	@long jump
 739              	.LCB586:
 740 004a 082B     		cmp	r3, #8
 741 004c 00D1     		bne	.LCB588
 742 004e D2E0     		b	.L58	@long jump
 743              	.LCB588:
 744              	.L50:
 334:main.c        ****   {
 335:main.c        ****     case 4: // pfvline xpos ypos endypos function
 336:main.c        ****     {
 337:main.c        ****       pfpixel=queue+get32bitdff(C_function3>>3); // physical addy of xpos (pf)
 338:main.c        ****       for (i=C_function2;i<=C_function1;++i)
ARM GAS  main.s 			page 21


 339:main.c        ****       {
 340:main.c        ****         on_off_flip(i,setbyte[C_function3]);
 341:main.c        ****       }
 342:main.c        ****       return;
 343:main.c        ****     }
 344:main.c        ****     case 8: // pfhline
 345:main.c        ****     {
 346:main.c        ****       for (i=C_function3;i<=C_function1;++i)
 347:main.c        ****       {
 348:main.c        ****         pfpixel=queue+get32bitdff(i>>3); // physical addy of xpos (pf)
 349:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 350:main.c        ****       }
 351:main.c        ****       return;
 352:main.c        ****     }
 353:main.c        ****     case 12: // pfpixel
 354:main.c        ****     {
 355:main.c        ****       pfpixel=queue+get32bitdff(C_function3>>3); // physical addy of xpos (pf)
 356:main.c        ****       on_off_flip(C_function2,setbyte[C_function3]);
 357:main.c        ****       return;
 358:main.c        ****     }
 359:main.c        ****     case 16: // zero-fill
 360:main.c        ****     {
 361:main.c        ****       my_memset(RIOT+player1pointerlo,0,4096-0x1a8-player1pointerlo);
 362:main.c        ****       return;
 363:main.c        ****     }
 364:main.c        ****     case 20: // collision check
 365:main.c        ****     {
 366:main.c        ****       // takes virtual sprite, returns coll
 367:main.c        ****       // syntax: sprite[1], sprite[2] (missiles, ball not yet, pf done another way)
 368:main.c        ****       // draw sprites in virtual area
 369:main.c        ****       C_function[3]=0;
 370:main.c        ****       temp2=0;
 371:main.c        ****       for (i=RIOT[player0y+C_function2];i<RIOT[player0y+C_function2]+RIOT[player0height+C_function2
 372:main.c        ****       {
 373:main.c        ****         if ((i>=RIOT[player0y+C_function1]) && (i<RIOT[player0y+C_function1]+RIOT[player0height+C_f
 374:main.c        **** 	{
 375:main.c        **** 
 376:main.c        ****           temp3=RIOT[player0x+C_function2]-RIOT[player0x+C_function1]+7; //-7 to +7 -> 0 to 14
 377:main.c        ****           if (temp3<15)
 378:main.c        **** 	  {
 379:main.c        ****             temp2=((flashdata[(RIOT[player0pointerhi+C_function2*2]<<8)+RIOT[player0pointerlo+C_fun
 380:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 381:main.c        **** 	  }
 382:main.c        **** 	  if (temp2) 
 383:main.c        **** 	  {
 384:main.c        **** 	    C_function[3]=255;
 385:main.c        **** 	    return;
 386:main.c        **** 	  }
 387:main.c        **** 	}
 388:main.c        ****       }
 389:main.c        ****       return;
 390:main.c        ****     }
 391:main.c        ****     case 24: // pfread 
 392:main.c        ****     {
 393:main.c        ****       pfpixel=queue+get32bitdff(C_function1>>3); // physical addy of xpos (pf)
 394:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 395:main.c        ****       return;
ARM GAS  main.s 			page 22


 396:main.c        ****     }
 397:main.c        ****     case 28: // pfclear
 398:main.c        ****     {
 399:main.c        ****       my_memset(queue+get32bitdff(0),C_function1,1024);
 400:main.c        ****       return;
 401:main.c        ****     }
 402:main.c        ****     case 32: // pfscroll
 403:main.c        ****     {
 404:main.c        ****       for(temp3=C_function2;temp3<C_function3;temp3++)
 405:main.c        ****         memscroll(queue+get32bitdff(temp3),C_function1);
 406:main.c        ****       return;
 407:main.c        ****     }
 408:main.c        **** 
 409:main.c        ****   default: // everything else
 410:main.c        ****    break;
 745              		.loc 1 410 4 view .LVU189
 411:main.c        ****   }
 412:main.c        **** 
 413:main.c        ****   //passed the sprite max as a parameter instead
 414:main.c        ****   maxsprites=C_function1;
 746              		.loc 1 414 3 view .LVU190
 415:main.c        **** 
 416:main.c        ****   for (i=0;i<maxsprites;i++)
 417:main.c        ****   {
 418:main.c        ****     myGfxIndex[i]=spritesort[i];
 747              		.loc 1 418 18 is_stmt 0 view .LVU191
 748 0050 2700     		movs	r7, r4
 749              	.LVL45:
 414:main.c        **** 
 750              		.loc 1 414 13 view .LVU192
 751 0052 019B     		ldr	r3, [sp, #4]
 752              		.loc 1 418 18 view .LVU193
 753 0054 2037     		adds	r7, r7, #32
 754 0056 1A00     		movs	r2, r3
 755 0058 3900     		movs	r1, r7
 756 005a 2000     		movs	r0, r4
 414:main.c        **** 
 757              		.loc 1 414 13 view .LVU194
 758 005c 3372     		strb	r3, [r6, #8]
 416:main.c        ****   {
 759              		.loc 1 416 3 is_stmt 1 view .LVU195
 760              	.LVL46:
 761              		.loc 1 418 18 is_stmt 0 view .LVU196
 762 005e FFF7FEFF 		bl	memcpy
 763              	.LVL47:
 419:main.c        ****   }
 420:main.c        **** //loop
 421:main.c        ****   temp3=maxsprites-1;
 764              		.loc 1 421 3 is_stmt 1 view .LVU197
 765              		.loc 1 421 8 is_stmt 0 view .LVU198
 766 0062 019B     		ldr	r3, [sp, #4]
 767 0064 013B     		subs	r3, r3, #1
 768 0066 0293     		str	r3, [sp, #8]
 769              	.LVL48:
 422:main.c        ****   temp2=maxsprites-2;
 770              		.loc 1 422 3 is_stmt 1 view .LVU199
 423:main.c        ****  while (temp2>=0)
ARM GAS  main.s 			page 23


 771              		.loc 1 423 2 view .LVU200
 772 0068 019B     		ldr	r3, [sp, #4]
 773              	.LVL49:
 774              		.loc 1 423 2 is_stmt 0 view .LVU201
 775 006a 9D1E     		subs	r5, r3, #2
 776              	.LVL50:
 777              		.loc 1 423 2 view .LVU202
 778 006c 7F19     		adds	r7, r7, r5
 779              	.LVL51:
 780              	.L66:
 781              		.loc 1 423 14 is_stmt 1 view .LVU203
 782 006e 002D     		cmp	r5, #0
 783 0070 00DB     		blt	.LCB627
 784 0072 3DE1     		b	.L70	@long jump
 785              	.LCB627:
 424:main.c        ****  {
 425:main.c        ****   switch(checkswap(spritesort[temp2+1],spritesort[temp2]))
 426:main.c        ****   {
 427:main.c        ****     case OVERLAP:
 428:main.c        ****       temp3--;
 429:main.c        ****       shiftnumbers(temp2);
 430:main.c        ****       break;
 431:main.c        ****     case NOOVERLAP:
 432:main.c        ****       break;
 433:main.c        ****     case SKIP:
 434:main.c        ****       temp2--;
 435:main.c        ****     default:
 436:main.c        ****       continue;
 437:main.c        ****   }
 438:main.c        ****   // skipswapgfxtable
 439:main.c        ****   i=spritesort[temp2+1];
 440:main.c        ****   spritesort[temp2+1]=spritesort[temp2];
 441:main.c        ****   spritesort[temp2]=i;
 442:main.c        ****   temp2--;
 443:main.c        ****  }
 444:main.c        ****   for (i=0;i<maxsprites;i++)
 786              		.loc 1 444 9 is_stmt 0 view .LVU204
 787 0074 0023     		movs	r3, #0
 788              	.L71:
 789              	.LVL52:
 790              		.loc 1 444 13 is_stmt 1 discriminator 1 view .LVU205
 791 0076 317A     		ldrb	r1, [r6, #8]
 445:main.c        ****     RIOT[SpriteGfxIndex+i]=myGfxIndex[i];
 792              		.loc 1 445 9 is_stmt 0 discriminator 1 view .LVU206
 793 0078 E268     		ldr	r2, [r4, #12]
 444:main.c        ****     RIOT[SpriteGfxIndex+i]=myGfxIndex[i];
 794              		.loc 1 444 13 discriminator 1 view .LVU207
 795 007a 9942     		cmp	r1, r3
 796 007c 00DD     		ble	.LCB636
 797 007e 51E1     		b	.L72	@long jump
 798              	.LCB636:
 446:main.c        ****   RIOT[spritedisplay]=temp3;
 799              		.loc 1 446 3 is_stmt 1 view .LVU208
 800              		.loc 1 446 22 is_stmt 0 view .LVU209
 801 0080 029B     		ldr	r3, [sp, #8]
 802              	.LVL53:
 447:main.c        ****   // fetcher setup
ARM GAS  main.s 			page 24


 448:main.c        ****   //my_memset(queue+(dfhigh(3)<<8)+dflow(3),0,192);
 449:main.c        ****   my_memset(queue+get32bitdf(3),0,192);
 803              		.loc 1 449 19 view .LVU210
 804 0082 0320     		movs	r0, #3
 446:main.c        ****   RIOT[spritedisplay]=temp3;
 805              		.loc 1 446 22 view .LVU211
 806 0084 5372     		strb	r3, [r2, #9]
 807              		.loc 1 449 3 is_stmt 1 view .LVU212
 808              		.loc 1 449 19 is_stmt 0 view .LVU213
 809 0086 FFF7FEFF 		bl	get32bitdf
 810              	.LVL54:
 811              		.loc 1 449 3 view .LVU214
 812 008a 2569     		ldr	r5, [r4, #16]
 813              	.LVL55:
 814              		.loc 1 449 3 view .LVU215
 815 008c C022     		movs	r2, #192
 816 008e 0021     		movs	r1, #0
 817              		.loc 1 449 18 view .LVU216
 818 0090 2818     		adds	r0, r5, r0
 819              		.loc 1 449 3 view .LVU217
 820 0092 FFF7FEFF 		bl	my_memset
 821              	.LVL56:
 450:main.c        **** 
 451:main.c        ****   //my_memset(queue+(dfhigh(1)<<8)+dflow(1),RIOT[COLUM1],192); // clear multiplexed sprites and fil
 452:main.c        ****   my_memset(queue+get32bitdf(1),RIOT[COLUM1],192); // clear multiplexed sprites and fill colors
 822              		.loc 1 452 3 is_stmt 1 view .LVU218
 823              		.loc 1 452 19 is_stmt 0 view .LVU219
 824 0096 0120     		movs	r0, #1
 825 0098 FFF7FEFF 		bl	get32bitdf
 826              	.LVL57:
 827              		.loc 1 452 37 view .LVU220
 828 009c E368     		ldr	r3, [r4, #12]
 829              		.loc 1 452 3 view .LVU221
 830 009e 2569     		ldr	r5, [r4, #16]
 831              		.loc 1 452 37 view .LVU222
 832 00a0 3733     		adds	r3, r3, #55
 833              		.loc 1 452 3 view .LVU223
 834 00a2 1978     		ldrb	r1, [r3]
 835 00a4 C022     		movs	r2, #192
 836              		.loc 1 452 18 view .LVU224
 837 00a6 2818     		adds	r0, r5, r0
 838              		.loc 1 452 3 view .LVU225
 839 00a8 FFF7FEFF 		bl	my_memset
 840              	.LVL58:
 453:main.c        ****   //my_memset(queue+(dfhigh(0)<<8)+dflow(0)-1,RIOT[COLUM0],193); // fill COLUM0 colors
 454:main.c        ****   my_memset(queue+get32bitdf(0)-1,RIOT[COLUM0],193); // fill COLUM0 colors
 841              		.loc 1 454 3 is_stmt 1 view .LVU226
 842              		.loc 1 454 19 is_stmt 0 view .LVU227
 843 00ac 0020     		movs	r0, #0
 844 00ae FFF7FEFF 		bl	get32bitdf
 845              	.LVL59:
 846              		.loc 1 454 39 view .LVU228
 847 00b2 E368     		ldr	r3, [r4, #12]
 848              		.loc 1 454 3 view .LVU229
 849 00b4 2569     		ldr	r5, [r4, #16]
 850              		.loc 1 454 39 view .LVU230
 851 00b6 3633     		adds	r3, r3, #54
ARM GAS  main.s 			page 25


 852              		.loc 1 454 32 view .LVU231
 853 00b8 0138     		subs	r0, r0, #1
 854              		.loc 1 454 3 view .LVU232
 855 00ba 1978     		ldrb	r1, [r3]
 856 00bc C122     		movs	r2, #193
 857              		.loc 1 454 32 view .LVU233
 858 00be 2818     		adds	r0, r5, r0
 859              		.loc 1 454 3 view .LVU234
 860 00c0 FFF7FEFF 		bl	my_memset
 861              	.LVL60:
 455:main.c        **** 
 456:main.c        ****   // fill color from player0, wrapping if necessary...
 457:main.c        ****   //my_memcpy(queue+(dfhigh(0)<<8)+dflow(0),
 458:main.c        ****   my_memcpy(queue+get32bitdf(0),
 862              		.loc 1 458 3 is_stmt 1 view .LVU235
 863              		.loc 1 458 19 is_stmt 0 view .LVU236
 864 00c4 0020     		movs	r0, #0
 865 00c6 FFF7FEFF 		bl	get32bitdf
 866              	.LVL61:
 459:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 867              		.loc 1 459 28 view .LVU237
 868 00ca E168     		ldr	r1, [r4, #12]
 458:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 869              		.loc 1 458 3 view .LVU238
 870 00cc 2569     		ldr	r5, [r4, #16]
 871 00ce 0A7D     		ldrb	r2, [r1, #20]
 872              		.loc 1 459 48 view .LVU239
 873 00d0 8F7F     		ldrb	r7, [r1, #30]
 460:main.c        ****             RIOT[player0height]);
 874              		.loc 1 460 17 view .LVU240
 875 00d2 4B1C     		adds	r3, r1, #1
 459:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 876              		.loc 1 459 48 view .LVU241
 877 00d4 C97F     		ldrb	r1, [r1, #31]
 458:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 878              		.loc 1 458 3 view .LVU242
 879 00d6 DB7F     		ldrb	r3, [r3, #31]
 459:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 880              		.loc 1 459 48 view .LVU243
 881 00d8 0902     		lsls	r1, r1, #8
 882 00da 3943     		orrs	r1, r7
 883 00dc 6769     		ldr	r7, [r4, #20]
 458:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 884              		.loc 1 458 18 view .LVU244
 885 00de 2818     		adds	r0, r5, r0
 459:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 886              		.loc 1 459 48 view .LVU245
 887 00e0 7918     		adds	r1, r7, r1
 458:main.c        ****             flashdata+(RIOT[player0color+1]<<8)+RIOT[player0color], RIOT[player0y],
 888              		.loc 1 458 3 view .LVU246
 889 00e2 FFF7FEFF 		bl	my_memcpy
 890              	.LVL62:
 461:main.c        **** 
 462:main.c        ****   //my_memcpy(queue+(dfhigh(2)<<8)+dflow(2),
 463:main.c        ****   my_memcpy(queue+get32bitdf(2),
 891              		.loc 1 463 3 is_stmt 1 view .LVU247
 892              		.loc 1 463 19 is_stmt 0 view .LVU248
ARM GAS  main.s 			page 26


 893 00e6 0220     		movs	r0, #2
 894 00e8 FFF7FEFF 		bl	get32bitdf
 895              	.LVL63:
 464:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 896              		.loc 1 464 28 view .LVU249
 897 00ec E268     		ldr	r2, [r4, #12]
 463:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 898              		.loc 1 463 3 view .LVU250
 899 00ee 2569     		ldr	r5, [r4, #16]
 900              		.loc 1 464 50 view .LVU251
 901 00f0 1100     		movs	r1, r2
 465:main.c        ****             RIOT[player0height]);
 902              		.loc 1 465 17 view .LVU252
 903 00f2 531C     		adds	r3, r2, #1
 464:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 904              		.loc 1 464 50 view .LVU253
 905 00f4 3932     		adds	r2, r2, #57
 906 00f6 1278     		ldrb	r2, [r2]
 907 00f8 3831     		adds	r1, r1, #56
 908 00fa 0978     		ldrb	r1, [r1]
 909 00fc 1202     		lsls	r2, r2, #8
 910 00fe 0A43     		orrs	r2, r1
 911 0100 6169     		ldr	r1, [r4, #20]
 463:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 912              		.loc 1 463 3 view .LVU254
 913 0102 DB7F     		ldrb	r3, [r3, #31]
 464:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 914              		.loc 1 464 50 view .LVU255
 915 0104 8918     		adds	r1, r1, r2
 463:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 916              		.loc 1 463 18 view .LVU256
 917 0106 2818     		adds	r0, r5, r0
 463:main.c        ****             flashdata+(RIOT[player0pointerhi]<<8)+RIOT[player0pointerlo], 0,
 918              		.loc 1 463 3 view .LVU257
 919 0108 0022     		movs	r2, #0
 920 010a FFF7FEFF 		bl	my_memcpy
 921              	.LVL64:
 466:main.c        **** 
 467:main.c        ****   count=0;
 922              		.loc 1 467 3 is_stmt 1 view .LVU258
 923              		.loc 1 467 8 is_stmt 0 view .LVU259
 924 010e 0023     		movs	r3, #0
 925 0110 7361     		str	r3, [r6, #20]
 468:main.c        ****   temp4=0;
 926              		.loc 1 468 3 is_stmt 1 view .LVU260
 927              		.loc 1 468 8 is_stmt 0 view .LVU261
 928 0112 B361     		str	r3, [r6, #24]
 469:main.c        ****   while (temp4 != 511)
 929              		.loc 1 469 3 is_stmt 1 view .LVU262
 930              	.LVL65:
 931              	.L73:
 932              		.loc 1 469 16 view .LVU263
 933 0114 8749     		ldr	r1, .L96+8
 470:main.c        ****   {
 471:main.c        ****     Gfxindex=myGfxIndex[count];
 472:main.c        **** //check if on screen, copy only if it is
 473:main.c        **** //    if (RIOT[player1y+Gfxindex]<175)
ARM GAS  main.s 			page 27


 474:main.c        ****   //  {
 475:main.c        **** 
 476:main.c        ****  // masking: NUSIZ bit 7=on/off, NUSIZ 6=L/R
 477:main.c        ****  // appears to happen @ 0x99-0x9F
 478:main.c        ****       mask = 0xFF;
 479:main.c        ****       if (RIOT[_NUSIZ1+Gfxindex]>127)
 934              		.loc 1 479 15 is_stmt 0 view .LVU264
 935 0116 864D     		ldr	r5, .L96+4
 469:main.c        ****   while (temp4 != 511)
 936              		.loc 1 469 16 view .LVU265
 937 0118 8B69     		ldr	r3, [r1, #24]
 938 011a 874A     		ldr	r2, .L96+12
 939              		.loc 1 479 15 view .LVU266
 940 011c EC68     		ldr	r4, [r5, #12]
 469:main.c        ****   while (temp4 != 511)
 941              		.loc 1 469 16 view .LVU267
 942 011e 9342     		cmp	r3, r2
 943 0120 00D0     		beq	.LCB731
 944 0122 0DE1     		b	.L79	@long jump
 945              	.LCB731:
 480:main.c        ****       {
 481:main.c        ****         if (RIOT[player1x+Gfxindex]>=0x99)
 482:main.c        ****         {
 483:main.c        ****            // modified to work with reflected sprites
 484:main.c        ****            mask=maskdata[((RIOT[_NUSIZ1+Gfxindex]&64)>>3)^((RIOT[_NUSIZ1+Gfxindex]&8)<<1)|(RIOT[pla
 485:main.c        ****         }
 486:main.c        ****       }
 487:main.c        ****       //my_memcpy(queue+(dfhigh(3)<<8)+dflow(3),
 488:main.c        ****       my_memcpy(queue+get32bitdf(3),
 489:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 490:main.c        ****               RIOT[player1y+Gfxindex],
 491:main.c        ****               RIOT[player1height+Gfxindex]);
 492:main.c        ****       mask = 0xFF;
 493:main.c        ****       //my_memcpy(queue+(dfhigh(1)<<8)+dflow(1),
 494:main.c        ****       my_memcpy(queue+get32bitdf(1),
 495:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 496:main.c        **** 	      RIOT[player1y+Gfxindex],
 497:main.c        ****               RIOT[player1height+Gfxindex]);
 498:main.c        ****     //}
 499:main.c        ****     temp5=temp4;
 500:main.c        ****     temp4=(RIOT[player1y+Gfxindex]+RIOT[player1height+Gfxindex])&255; // &255 to allow for wrapped 
 501:main.c        ****     Gfxindex=myGfxIndex[count+1];
 502:main.c        ****     if ((count == temp3) || (RIOT[player1y+Gfxindex]>175) )
 503:main.c        ****     {
 504:main.c        ****       temp4=511;
 505:main.c        ****       temp5=0;
 506:main.c        ****     }
 507:main.c        **** 
 508:main.c        ****     // it looks like if vertical positioning is tight, cumulative round-off 
 509:main.c        ****     // can occur and eventually coarse positioning will happen during sprite display...
 510:main.c        ****      //queue[(dfhigh(4)<<8)+dflow(4)+count]=(temp4-temp5-(count>>1))>>1;
 511:main.c        ****      queue[get32bitdf(4)+count]=(temp4-temp5-(count>>1))>>1;
 512:main.c        **** 
 513:main.c        ****     if (RIOT[player1x+Gfxindex]>159)
 514:main.c        ****       RIOT[player1x+Gfxindex]-=(RIOT[player1x+Gfxindex]>208)?96:160;
 515:main.c        ****     queue[get32bitdff(5)+count]=RIOT[_NUSIZ1+Gfxindex];
 516:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
ARM GAS  main.s 			page 28


 517:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 518:main.c        ****     queue[get32bitdf(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 519:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 520:main.c        ****     queue[get32bitdf(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 521:main.c        ****     count++;
 522:main.c        ****   }
 523:main.c        ****   temp5=1;
 946              		.loc 1 523 3 is_stmt 1 view .LVU268
 947              		.loc 1 523 8 is_stmt 0 view .LVU269
 948 0124 0123     		movs	r3, #1
 524:main.c        ****     copynybble(RIOT[score]);//+i
 949              		.loc 1 524 5 view .LVU270
 950 0126 3334     		adds	r4, r4, #51
 951 0128 2078     		ldrb	r0, [r4]
 523:main.c        ****     copynybble(RIOT[score]);//+i
 952              		.loc 1 523 8 view .LVU271
 953 012a CB60     		str	r3, [r1, #12]
 954              		.loc 1 524 5 is_stmt 1 view .LVU272
 955 012c FFF7FEFF 		bl	copynybble
 956              	.LVL66:
 525:main.c        ****     copynybble(RIOT[score] >> 4);
 957              		.loc 1 525 5 view .LVU273
 958              		.loc 1 525 20 is_stmt 0 view .LVU274
 959 0130 EB68     		ldr	r3, [r5, #12]
 960 0132 3333     		adds	r3, r3, #51
 961              		.loc 1 525 5 view .LVU275
 962 0134 1878     		ldrb	r0, [r3]
 963 0136 0009     		lsrs	r0, r0, #4
 964 0138 FFF7FEFF 		bl	copynybble
 965              	.LVL67:
 526:main.c        ****     copynybble(RIOT[score2]);
 966              		.loc 1 526 5 is_stmt 1 view .LVU276
 967 013c EB68     		ldr	r3, [r5, #12]
 968 013e 3433     		adds	r3, r3, #52
 969 0140 1878     		ldrb	r0, [r3]
 970 0142 FFF7FEFF 		bl	copynybble
 971              	.LVL68:
 527:main.c        ****     copynybble(RIOT[score2] >> 4);
 972              		.loc 1 527 5 view .LVU277
 973              		.loc 1 527 20 is_stmt 0 view .LVU278
 974 0146 EB68     		ldr	r3, [r5, #12]
 975 0148 3433     		adds	r3, r3, #52
 976              		.loc 1 527 5 view .LVU279
 977 014a 1878     		ldrb	r0, [r3]
 978 014c 0009     		lsrs	r0, r0, #4
 979 014e FFF7FEFF 		bl	copynybble
 980              	.LVL69:
 528:main.c        ****     copynybble(RIOT[score3]);
 981              		.loc 1 528 5 is_stmt 1 view .LVU280
 982 0152 EB68     		ldr	r3, [r5, #12]
 983 0154 3533     		adds	r3, r3, #53
 984 0156 1878     		ldrb	r0, [r3]
 985 0158 FFF7FEFF 		bl	copynybble
 986              	.LVL70:
 529:main.c        ****     copynybble(RIOT[score3] >> 4);
 987              		.loc 1 529 5 view .LVU281
 988              		.loc 1 529 20 is_stmt 0 view .LVU282
ARM GAS  main.s 			page 29


 989 015c EB68     		ldr	r3, [r5, #12]
 990 015e 3533     		adds	r3, r3, #53
 991              		.loc 1 529 5 view .LVU283
 992 0160 1878     		ldrb	r0, [r3]
 993 0162 0009     		lsrs	r0, r0, #4
 994 0164 FFF7FEFF 		bl	copynybble
 995              	.LVL71:
 530:main.c        **** 
 531:main.c        ****   return 0;
 996              		.loc 1 531 3 is_stmt 1 view .LVU284
 532:main.c        **** }
 997              		.loc 1 532 1 is_stmt 0 view .LVU285
 998 0168 0020     		movs	r0, #0
 999 016a 2DE0     		b	.L43
 1000              	.LVL72:
 1001              	.L47:
 333:main.c        ****   {
 1002              		.loc 1 333 3 view .LVU286
 1003 016c 102B     		cmp	r3, #16
 1004 016e 00D0     		beq	.LCB783
 1005 0170 6EE7     		b	.L50	@long jump
 1006              	.LCB783:
 361:main.c        ****       return;
 1007              		.loc 1 361 7 is_stmt 1 view .LVU287
 1008 0172 0021     		movs	r1, #0
 1009 0174 E068     		ldr	r0, [r4, #12]
 1010 0176 714A     		ldr	r2, .L96+16
 1011 0178 3A30     		adds	r0, r0, #58
 1012              	.L95:
 399:main.c        ****       return;
 1013              		.loc 1 399 7 is_stmt 0 view .LVU288
 1014 017a FFF7FEFF 		bl	my_memset
 1015              	.LVL73:
 400:main.c        ****     }
 1016              		.loc 1 400 7 is_stmt 1 view .LVU289
 1017 017e 23E0     		b	.L43
 1018              	.L45:
 333:main.c        ****   {
 1019              		.loc 1 333 3 is_stmt 0 view .LVU290
 1020 0180 1C2B     		cmp	r3, #28
 1021 0182 00D1     		bne	.LCB798
 1022 0184 9CE0     		b	.L52	@long jump
 1023              	.LCB798:
 404:main.c        ****         memscroll(queue+get32bitdff(temp3),C_function1);
 1024              		.loc 1 404 16 view .LVU291
 1025 0186 0395     		str	r5, [sp, #12]
 333:main.c        ****   {
 1026              		.loc 1 333 3 view .LVU292
 1027 0188 202B     		cmp	r3, #32
 1028 018a 00D1     		bne	.LCB801
 1029 018c ACE0     		b	.L64	@long jump
 1030              	.LCB801:
 333:main.c        ****   {
 1031              		.loc 1 333 3 view .LVU293
 1032 018e 182B     		cmp	r3, #24
 1033 0190 00D0     		beq	.LCB804
 1034 0192 5DE7     		b	.L50	@long jump
ARM GAS  main.s 			page 30


 1035              	.LCB804:
 393:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 1036              		.loc 1 393 7 is_stmt 1 view .LVU294
 393:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 1037              		.loc 1 393 21 is_stmt 0 view .LVU295
 1038 0194 019B     		ldr	r3, [sp, #4]
 393:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 1039              		.loc 1 393 20 view .LVU296
 1040 0196 2469     		ldr	r4, [r4, #16]
 393:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 1041              		.loc 1 393 21 view .LVU297
 1042 0198 D808     		lsrs	r0, r3, #3
 1043 019a FFF7FEFF 		bl	get32bitdff
 1044              	.LVL74:
 394:main.c        ****       return;
 1045              		.loc 1 394 22 view .LVU298
 1046 019e 0199     		ldr	r1, [sp, #4]
 393:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 1047              		.loc 1 393 20 view .LVU299
 1048 01a0 2418     		adds	r4, r4, r0
 393:main.c        ****       C_function[3]=(!(pfpixel[C_function2]&setbyte[C_function1]));
 1049              		.loc 1 393 14 view .LVU300
 1050 01a2 3461     		str	r4, [r6, #16]
 394:main.c        ****       return;
 1051              		.loc 1 394 7 is_stmt 1 view .LVU301
 394:main.c        ****       return;
 1052              		.loc 1 394 22 is_stmt 0 view .LVU302
 1053 01a4 08AB     		add	r3, sp, #32
 1054 01a6 625D     		ldrb	r2, [r4, r5]
 1055 01a8 5B5C     		ldrb	r3, [r3, r1]
 1056 01aa 1340     		ands	r3, r2
 1057 01ac 5A42     		rsbs	r2, r3, #0
 1058 01ae 5341     		adcs	r3, r3, r2
 1059 01b0 029A     		ldr	r2, [sp, #8]
 1060 01b2 D370     		strb	r3, [r2, #3]
 395:main.c        ****     }
 1061              		.loc 1 395 7 is_stmt 1 view .LVU303
 1062 01b4 08E0     		b	.L43
 1063              	.L48:
 337:main.c        ****       for (i=C_function2;i<=C_function1;++i)
 1064              		.loc 1 337 7 view .LVU304
 337:main.c        ****       for (i=C_function2;i<=C_function1;++i)
 1065              		.loc 1 337 21 is_stmt 0 view .LVU305
 1066 01b6 F808     		lsrs	r0, r7, #3
 1067 01b8 FFF7FEFF 		bl	get32bitdff
 1068              	.LVL75:
 337:main.c        ****       for (i=C_function2;i<=C_function1;++i)
 1069              		.loc 1 337 20 view .LVU306
 1070 01bc 2469     		ldr	r4, [r4, #16]
 1071 01be 2418     		adds	r4, r4, r0
 337:main.c        ****       for (i=C_function2;i<=C_function1;++i)
 1072              		.loc 1 337 14 view .LVU307
 1073 01c0 3461     		str	r4, [r6, #16]
 338:main.c        ****       {
 1074              		.loc 1 338 7 is_stmt 1 view .LVU308
 1075              	.LVL76:
 1076              	.L55:
ARM GAS  main.s 			page 31


 338:main.c        ****       {
 1077              		.loc 1 338 27 discriminator 1 view .LVU309
 1078 01c2 019B     		ldr	r3, [sp, #4]
 1079 01c4 AB42     		cmp	r3, r5
 1080 01c6 01DA     		bge	.L56
 1081              	.LVL77:
 1082              	.L43:
 1083              		.loc 1 532 1 is_stmt 0 view .LVU310
 1084 01c8 11B0     		add	sp, sp, #68
 1085              		@ sp needed
 1086 01ca F0BD     		pop	{r4, r5, r6, r7, pc}
 1087              	.LVL78:
 1088              	.L56:
 340:main.c        ****       }
 1089              		.loc 1 340 9 is_stmt 1 discriminator 3 view .LVU311
 1090 01cc 08AB     		add	r3, sp, #32
 1091 01ce 2800     		movs	r0, r5
 1092 01d0 D95D     		ldrb	r1, [r3, r7]
 1093 01d2 FFF7FEFF 		bl	on_off_flip
 1094              	.LVL79:
 338:main.c        ****       {
 1095              		.loc 1 338 41 discriminator 3 view .LVU312
 1096 01d6 0135     		adds	r5, r5, #1
 1097              	.LVL80:
 338:main.c        ****       {
 1098              		.loc 1 338 41 is_stmt 0 discriminator 3 view .LVU313
 1099 01d8 F3E7     		b	.L55
 1100              	.LVL81:
 1101              	.L59:
 348:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1102              		.loc 1 348 9 is_stmt 1 discriminator 3 view .LVU314
 348:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1103              		.loc 1 348 22 is_stmt 0 discriminator 3 view .LVU315
 1104 01da 2369     		ldr	r3, [r4, #16]
 348:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1105              		.loc 1 348 23 discriminator 3 view .LVU316
 1106 01dc F810     		asrs	r0, r7, #3
 348:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1107              		.loc 1 348 22 discriminator 3 view .LVU317
 1108 01de 0293     		str	r3, [sp, #8]
 348:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1109              		.loc 1 348 23 discriminator 3 view .LVU318
 1110 01e0 FFF7FEFF 		bl	get32bitdff
 1111              	.LVL82:
 348:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1112              		.loc 1 348 22 discriminator 3 view .LVU319
 1113 01e4 029B     		ldr	r3, [sp, #8]
 1114 01e6 1818     		adds	r0, r3, r0
 349:main.c        ****       }
 1115              		.loc 1 349 9 discriminator 3 view .LVU320
 1116 01e8 08AB     		add	r3, sp, #32
 1117 01ea D95D     		ldrb	r1, [r3, r7]
 348:main.c        ****         on_off_flip(C_function2,setbyte[i]);
 1118              		.loc 1 348 16 discriminator 3 view .LVU321
 1119 01ec 3061     		str	r0, [r6, #16]
 349:main.c        ****       }
 1120              		.loc 1 349 9 is_stmt 1 discriminator 3 view .LVU322
ARM GAS  main.s 			page 32


 1121 01ee 2800     		movs	r0, r5
 1122 01f0 FFF7FEFF 		bl	on_off_flip
 1123              	.LVL83:
 346:main.c        ****       {
 1124              		.loc 1 346 41 discriminator 3 view .LVU323
 1125 01f4 0137     		adds	r7, r7, #1
 1126              	.LVL84:
 1127              	.L58:
 346:main.c        ****       {
 1128              		.loc 1 346 27 discriminator 1 view .LVU324
 1129 01f6 019B     		ldr	r3, [sp, #4]
 1130 01f8 BB42     		cmp	r3, r7
 1131 01fa EEDA     		bge	.L59
 1132 01fc E4E7     		b	.L43
 1133              	.LVL85:
 1134              	.L46:
 355:main.c        ****       on_off_flip(C_function2,setbyte[C_function3]);
 1135              		.loc 1 355 7 view .LVU325
 355:main.c        ****       on_off_flip(C_function2,setbyte[C_function3]);
 1136              		.loc 1 355 21 is_stmt 0 view .LVU326
 1137 01fe F808     		lsrs	r0, r7, #3
 1138 0200 FFF7FEFF 		bl	get32bitdff
 1139              	.LVL86:
 355:main.c        ****       on_off_flip(C_function2,setbyte[C_function3]);
 1140              		.loc 1 355 20 view .LVU327
 1141 0204 2469     		ldr	r4, [r4, #16]
 356:main.c        ****       return;
 1142              		.loc 1 356 7 view .LVU328
 1143 0206 08AB     		add	r3, sp, #32
 355:main.c        ****       on_off_flip(C_function2,setbyte[C_function3]);
 1144              		.loc 1 355 20 view .LVU329
 1145 0208 2418     		adds	r4, r4, r0
 356:main.c        ****       return;
 1146              		.loc 1 356 7 view .LVU330
 1147 020a D95D     		ldrb	r1, [r3, r7]
 1148 020c 2800     		movs	r0, r5
 355:main.c        ****       on_off_flip(C_function2,setbyte[C_function3]);
 1149              		.loc 1 355 14 view .LVU331
 1150 020e 3461     		str	r4, [r6, #16]
 356:main.c        ****       return;
 1151              		.loc 1 356 7 is_stmt 1 view .LVU332
 1152 0210 FFF7FEFF 		bl	on_off_flip
 1153              	.LVL87:
 357:main.c        ****     }
 1154              		.loc 1 357 7 view .LVU333
 1155 0214 D8E7     		b	.L43
 1156              	.L44:
 369:main.c        ****       temp2=0;
 1157              		.loc 1 369 7 view .LVU334
 369:main.c        ****       temp2=0;
 1158              		.loc 1 369 20 is_stmt 0 view .LVU335
 1159 0216 0023     		movs	r3, #0
 1160 0218 029A     		ldr	r2, [sp, #8]
 1161 021a D370     		strb	r3, [r2, #3]
 370:main.c        ****       for (i=RIOT[player0y+C_function2];i<RIOT[player0y+C_function2]+RIOT[player0height+C_function2
 1162              		.loc 1 370 7 is_stmt 1 view .LVU336
 1163              	.LVL88:
ARM GAS  main.s 			page 33


 371:main.c        ****       {
 1164              		.loc 1 371 7 view .LVU337
 371:main.c        ****       {
 1165              		.loc 1 371 18 is_stmt 0 view .LVU338
 1166 021c E268     		ldr	r2, [r4, #12]
 1167 021e 5719     		adds	r7, r2, r5
 1168              	.LVL89:
 371:main.c        ****       {
 1169              		.loc 1 371 74 view .LVU339
 1170 0220 7B1C     		adds	r3, r7, #1
 371:main.c        ****       {
 1171              		.loc 1 371 13 view .LVU340
 1172 0222 3E7D     		ldrb	r6, [r7, #20]
 1173              	.LVL90:
 371:main.c        ****       {
 1174              		.loc 1 371 74 view .LVU341
 1175 0224 DB7F     		ldrb	r3, [r3, #31]
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1176              		.loc 1 379 65 view .LVU342
 1177 0226 6D00     		lsls	r5, r5, #1
 1178              	.LVL91:
 371:main.c        ****       {
 1179              		.loc 1 371 69 view .LVU343
 1180 0228 9B19     		adds	r3, r3, r6
 1181 022a 0693     		str	r3, [sp, #24]
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1182              		.loc 1 379 30 view .LVU344
 1183 022c 6369     		ldr	r3, [r4, #20]
 1184 022e 9C46     		mov	ip, r3
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1185              		.loc 1 379 53 view .LVU345
 1186 0230 2B00     		movs	r3, r5
 1187 0232 3933     		adds	r3, r3, #57
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1188              		.loc 1 379 36 view .LVU346
 1189 0234 D318     		adds	r3, r2, r3
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1190              		.loc 1 379 94 view .LVU347
 1191 0236 3835     		adds	r5, r5, #56
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1192              		.loc 1 379 36 view .LVU348
 1193 0238 0293     		str	r3, [sp, #8]
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1194              		.loc 1 379 77 view .LVU349
 1195 023a 5319     		adds	r3, r2, r5
 1196 023c 0393     		str	r3, [sp, #12]
 380:main.c        **** 	  }
 1197              		.loc 1 380 65 view .LVU350
 1198 023e 019B     		ldr	r3, [sp, #4]
 1199 0240 5B00     		lsls	r3, r3, #1
 380:main.c        **** 	  }
 1200              		.loc 1 380 53 view .LVU351
 1201 0242 1900     		movs	r1, r3
 1202 0244 3931     		adds	r1, r1, #57
 380:main.c        **** 	  }
 1203              		.loc 1 380 36 view .LVU352
 1204 0246 5118     		adds	r1, r2, r1
ARM GAS  main.s 			page 34


 1205 0248 0491     		str	r1, [sp, #16]
 371:main.c        ****       {
 1206              		.loc 1 371 13 view .LVU353
 1207 024a 3100     		movs	r1, r6
 380:main.c        **** 	  }
 1208              		.loc 1 380 94 view .LVU354
 1209 024c 3833     		adds	r3, r3, #56
 380:main.c        **** 	  }
 1210              		.loc 1 380 77 view .LVU355
 1211 024e D318     		adds	r3, r2, r3
 1212 0250 0593     		str	r3, [sp, #20]
 373:main.c        **** 	{
 1213              		.loc 1 373 21 view .LVU356
 1214 0252 019B     		ldr	r3, [sp, #4]
 1215 0254 D218     		adds	r2, r2, r3
 373:main.c        **** 	{
 1216              		.loc 1 373 82 view .LVU357
 1217 0256 531C     		adds	r3, r2, #1
 1218 0258 0793     		str	r3, [sp, #28]
 1219              	.LVL92:
 1220              	.L61:
 371:main.c        ****       {
 1221              		.loc 1 371 42 is_stmt 1 discriminator 1 view .LVU358
 1222 025a 069B     		ldr	r3, [sp, #24]
 1223 025c 8B42     		cmp	r3, r1
 1224 025e B3DD     		ble	.L43
 373:main.c        **** 	{
 1225              		.loc 1 373 9 view .LVU359
 373:main.c        **** 	{
 1226              		.loc 1 373 21 is_stmt 0 view .LVU360
 1227 0260 157D     		ldrb	r5, [r2, #20]
 373:main.c        **** 	{
 1228              		.loc 1 373 12 view .LVU361
 1229 0262 8D42     		cmp	r5, r1
 1230 0264 2ADC     		bgt	.L62
 373:main.c        **** 	{
 1231              		.loc 1 373 82 discriminator 1 view .LVU362
 1232 0266 079B     		ldr	r3, [sp, #28]
 1233 0268 DB7F     		ldrb	r3, [r3, #31]
 373:main.c        **** 	{
 1234              		.loc 1 373 77 discriminator 1 view .LVU363
 1235 026a 5B19     		adds	r3, r3, r5
 373:main.c        **** 	{
 1236              		.loc 1 373 45 discriminator 1 view .LVU364
 1237 026c 8B42     		cmp	r3, r1
 1238 026e 25DD     		ble	.L62
 376:main.c        ****           if (temp3<15)
 1239              		.loc 1 376 11 is_stmt 1 view .LVU365
 376:main.c        ****           if (temp3<15)
 1240              		.loc 1 376 21 is_stmt 0 view .LVU366
 1241 0270 B87A     		ldrb	r0, [r7, #10]
 376:main.c        ****           if (temp3<15)
 1242              		.loc 1 376 48 view .LVU367
 1243 0272 937A     		ldrb	r3, [r2, #10]
 376:main.c        ****           if (temp3<15)
 1244              		.loc 1 376 43 view .LVU368
 1245 0274 C01A     		subs	r0, r0, r3
ARM GAS  main.s 			page 35


 376:main.c        ****           if (temp3<15)
 1246              		.loc 1 376 16 view .LVU369
 1247 0276 0730     		adds	r0, r0, #7
 1248              	.LVL93:
 377:main.c        **** 	  {
 1249              		.loc 1 377 11 is_stmt 1 view .LVU370
 377:main.c        **** 	  {
 1250              		.loc 1 377 14 is_stmt 0 view .LVU371
 1251 0278 0E28     		cmp	r0, #14
 1252 027a 1FDC     		bgt	.L62
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1253              		.loc 1 379 13 is_stmt 1 view .LVU372
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1254              		.loc 1 379 36 is_stmt 0 view .LVU373
 1255 027c 029B     		ldr	r3, [sp, #8]
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1256              		.loc 1 379 77 view .LVU374
 1257 027e 039C     		ldr	r4, [sp, #12]
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1258              		.loc 1 379 36 view .LVU375
 1259 0280 1B78     		ldrb	r3, [r3]
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1260              		.loc 1 379 77 view .LVU376
 1261 0282 2478     		ldrb	r4, [r4]
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1262              		.loc 1 379 68 view .LVU377
 1263 0284 1B02     		lsls	r3, r3, #8
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1264              		.loc 1 379 72 view .LVU378
 1265 0286 1B19     		adds	r3, r3, r4
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1266              		.loc 1 379 109 view .LVU379
 1267 0288 5B18     		adds	r3, r3, r1
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1268              		.loc 1 379 111 view .LVU380
 1269 028a 9B1B     		subs	r3, r3, r6
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1270              		.loc 1 379 30 view .LVU381
 1271 028c 6344     		add	r3, r3, ip
 1272 028e 1B78     		ldrb	r3, [r3]
 1273 0290 0193     		str	r3, [sp, #4]
 380:main.c        **** 	  }
 1274              		.loc 1 380 36 view .LVU382
 1275 0292 049B     		ldr	r3, [sp, #16]
 1276 0294 1B78     		ldrb	r3, [r3]
 380:main.c        **** 	  }
 1277              		.loc 1 380 68 view .LVU383
 1278 0296 1B02     		lsls	r3, r3, #8
 1279 0298 1C00     		movs	r4, r3
 380:main.c        **** 	  }
 1280              		.loc 1 380 77 view .LVU384
 1281 029a 059B     		ldr	r3, [sp, #20]
 1282 029c 1B78     		ldrb	r3, [r3]
 380:main.c        **** 	  }
 1283              		.loc 1 380 72 view .LVU385
 1284 029e E318     		adds	r3, r4, r3
 380:main.c        **** 	  }
ARM GAS  main.s 			page 36


 1285              		.loc 1 380 109 view .LVU386
 1286 02a0 5B18     		adds	r3, r3, r1
 380:main.c        **** 	  }
 1287              		.loc 1 380 111 view .LVU387
 1288 02a2 5B1B     		subs	r3, r3, r5
 380:main.c        **** 	  }
 1289              		.loc 1 380 30 view .LVU388
 1290 02a4 6344     		add	r3, r3, ip
 1291 02a6 1B78     		ldrb	r3, [r3]
 1292              	.LVL94:
 382:main.c        **** 	  {
 1293              		.loc 1 382 4 is_stmt 1 view .LVU389
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1294              		.loc 1 379 140 is_stmt 0 view .LVU390
 1295 02a8 019C     		ldr	r4, [sp, #4]
 380:main.c        **** 	  }
 1296              		.loc 1 380 140 view .LVU391
 1297 02aa 8340     		lsls	r3, r3, r0
 1298              	.LVL95:
 379:main.c        ****                 & ((flashdata[(RIOT[player0pointerhi+C_function1*2]<<8)+RIOT[player0pointerlo+C_fun
 1299              		.loc 1 379 140 view .LVU392
 1300 02ac E401     		lsls	r4, r4, #7
 382:main.c        **** 	  {
 1301              		.loc 1 382 7 view .LVU393
 1302 02ae 2342     		tst	r3, r4
 1303 02b0 04D0     		beq	.L62
 384:main.c        **** 	    return;
 1304              		.loc 1 384 6 is_stmt 1 view .LVU394
 384:main.c        **** 	    return;
 1305              		.loc 1 384 19 is_stmt 0 view .LVU395
 1306 02b2 FF22     		movs	r2, #255
 384:main.c        **** 	    return;
 1307              		.loc 1 384 16 view .LVU396
 1308 02b4 1E4B     		ldr	r3, .L96+4
 1309 02b6 9B69     		ldr	r3, [r3, #24]
 384:main.c        **** 	    return;
 1310              		.loc 1 384 19 view .LVU397
 1311 02b8 DA70     		strb	r2, [r3, #3]
 385:main.c        **** 	  }
 1312              		.loc 1 385 6 is_stmt 1 view .LVU398
 1313 02ba 85E7     		b	.L43
 1314              	.LVL96:
 1315              	.L62:
 371:main.c        ****       {
 1316              		.loc 1 371 102 discriminator 2 view .LVU399
 1317 02bc 0131     		adds	r1, r1, #1
 1318              	.LVL97:
 371:main.c        ****       {
 1319              		.loc 1 371 102 is_stmt 0 discriminator 2 view .LVU400
 1320 02be CCE7     		b	.L61
 1321              	.LVL98:
 1322              	.L52:
 399:main.c        ****       return;
 1323              		.loc 1 399 7 is_stmt 1 view .LVU401
 399:main.c        ****       return;
 1324              		.loc 1 399 23 is_stmt 0 view .LVU402
 1325 02c0 0020     		movs	r0, #0
ARM GAS  main.s 			page 37


 1326 02c2 FFF7FEFF 		bl	get32bitdff
 1327              	.LVL99:
 399:main.c        ****       return;
 1328              		.loc 1 399 7 view .LVU403
 1329 02c6 8022     		movs	r2, #128
 1330 02c8 2469     		ldr	r4, [r4, #16]
 1331 02ca 0199     		ldr	r1, [sp, #4]
 399:main.c        ****       return;
 1332              		.loc 1 399 22 view .LVU404
 1333 02cc 2018     		adds	r0, r4, r0
 399:main.c        ****       return;
 1334              		.loc 1 399 7 view .LVU405
 1335 02ce D200     		lsls	r2, r2, #3
 1336 02d0 53E7     		b	.L95
 1337              	.LVL100:
 1338              	.L65:
 405:main.c        ****       return;
 1339              		.loc 1 405 9 is_stmt 1 discriminator 3 view .LVU406
 405:main.c        ****       return;
 1340              		.loc 1 405 25 is_stmt 0 discriminator 3 view .LVU407
 1341 02d2 0398     		ldr	r0, [sp, #12]
 1342 02d4 FFF7FEFF 		bl	get32bitdff
 1343              	.LVL101:
 405:main.c        ****       return;
 1344              		.loc 1 405 9 discriminator 3 view .LVU408
 1345 02d8 2569     		ldr	r5, [r4, #16]
 1346 02da 0199     		ldr	r1, [sp, #4]
 405:main.c        ****       return;
 1347              		.loc 1 405 24 discriminator 3 view .LVU409
 1348 02dc 2818     		adds	r0, r5, r0
 405:main.c        ****       return;
 1349              		.loc 1 405 9 discriminator 3 view .LVU410
 1350 02de FFF7FEFF 		bl	memscroll
 1351              	.LVL102:
 404:main.c        ****         memscroll(queue+get32bitdff(temp3),C_function1);
 1352              		.loc 1 404 52 is_stmt 1 discriminator 3 view .LVU411
 1353 02e2 039B     		ldr	r3, [sp, #12]
 1354 02e4 0133     		adds	r3, r3, #1
 1355 02e6 0393     		str	r3, [sp, #12]
 1356              	.LVL103:
 1357              	.L64:
 404:main.c        ****         memscroll(queue+get32bitdff(temp3),C_function1);
 1358              		.loc 1 404 34 discriminator 1 view .LVU412
 1359 02e8 039B     		ldr	r3, [sp, #12]
 1360 02ea 9F42     		cmp	r7, r3
 1361 02ec F1DC     		bgt	.L65
 1362 02ee 6BE7     		b	.L43
 1363              	.LVL104:
 1364              	.L70:
 425:main.c        ****   {
 1365              		.loc 1 425 3 view .LVU413
 425:main.c        ****   {
 1366              		.loc 1 425 10 is_stmt 0 view .LVU414
 1367 02f0 3978     		ldrb	r1, [r7]
 1368 02f2 7878     		ldrb	r0, [r7, #1]
 1369 02f4 FFF7FEFF 		bl	checkswap
 1370              	.LVL105:
ARM GAS  main.s 			page 38


 425:main.c        ****   {
 1371              		.loc 1 425 3 view .LVU415
 1372 02f8 0128     		cmp	r0, #1
 1373 02fa 06D0     		beq	.L67
 1374 02fc 0228     		cmp	r0, #2
 1375 02fe 0AD0     		beq	.L68
 1376 0300 0028     		cmp	r0, #0
 1377 0302 F5D1     		bne	.L70
 1378              	.L69:
 1379 0304 013F     		subs	r7, r7, #1
 1380 0306 013D     		subs	r5, r5, #1
 1381 0308 B1E6     		b	.L66
 1382              	.L67:
 428:main.c        ****       shiftnumbers(temp2);
 1383              		.loc 1 428 7 is_stmt 1 view .LVU416
 428:main.c        ****       shiftnumbers(temp2);
 1384              		.loc 1 428 12 is_stmt 0 view .LVU417
 1385 030a 029B     		ldr	r3, [sp, #8]
 429:main.c        ****       break;
 1386              		.loc 1 429 7 view .LVU418
 1387 030c 2800     		movs	r0, r5
 428:main.c        ****       shiftnumbers(temp2);
 1388              		.loc 1 428 12 view .LVU419
 1389 030e 013B     		subs	r3, r3, #1
 1390 0310 0293     		str	r3, [sp, #8]
 1391              	.LVL106:
 429:main.c        ****       break;
 1392              		.loc 1 429 7 is_stmt 1 view .LVU420
 1393 0312 FFF7FEFF 		bl	shiftnumbers
 1394              	.LVL107:
 430:main.c        ****     case NOOVERLAP:
 1395              		.loc 1 430 7 view .LVU421
 1396              	.L68:
 439:main.c        ****   spritesort[temp2+1]=spritesort[temp2];
 1397              		.loc 1 439 3 view .LVU422
 439:main.c        ****   spritesort[temp2+1]=spritesort[temp2];
 1398              		.loc 1 439 15 is_stmt 0 view .LVU423
 1399 0316 6319     		adds	r3, r4, r5
 1400 0318 0233     		adds	r3, r3, #2
 1401 031a DA7F     		ldrb	r2, [r3, #31]
 1402              	.LVL108:
 440:main.c        ****   spritesort[temp2]=i;
 1403              		.loc 1 440 3 is_stmt 1 view .LVU424
 440:main.c        ****   spritesort[temp2]=i;
 1404              		.loc 1 440 33 is_stmt 0 view .LVU425
 1405 031c 3978     		ldrb	r1, [r7]
 440:main.c        ****   spritesort[temp2]=i;
 1406              		.loc 1 440 22 view .LVU426
 1407 031e D977     		strb	r1, [r3, #31]
 441:main.c        ****   temp2--;
 1408              		.loc 1 441 3 is_stmt 1 view .LVU427
 441:main.c        ****   temp2--;
 1409              		.loc 1 441 20 is_stmt 0 view .LVU428
 1410 0320 3A70     		strb	r2, [r7]
 442:main.c        ****  }
 1411              		.loc 1 442 3 is_stmt 1 view .LVU429
 1412 0322 EFE7     		b	.L69
ARM GAS  main.s 			page 39


 1413              	.LVL109:
 1414              	.L72:
 445:main.c        ****   RIOT[spritedisplay]=temp3;
 1415              		.loc 1 445 5 discriminator 3 view .LVU430
 445:main.c        ****   RIOT[spritedisplay]=temp3;
 1416              		.loc 1 445 38 is_stmt 0 discriminator 3 view .LVU431
 1417 0324 E15C     		ldrb	r1, [r4, r3]
 445:main.c        ****   RIOT[spritedisplay]=temp3;
 1418              		.loc 1 445 27 discriminator 3 view .LVU432
 1419 0326 D154     		strb	r1, [r2, r3]
 444:main.c        ****     RIOT[SpriteGfxIndex+i]=myGfxIndex[i];
 1420              		.loc 1 444 26 is_stmt 1 discriminator 3 view .LVU433
 1421 0328 0133     		adds	r3, r3, #1
 1422              	.LVL110:
 444:main.c        ****     RIOT[SpriteGfxIndex+i]=myGfxIndex[i];
 1423              		.loc 1 444 26 is_stmt 0 discriminator 3 view .LVU434
 1424 032a A4E6     		b	.L71
 1425              	.L97:
 1426              		.align	2
 1427              	.L96:
 1428 032c 00000000 		.word	.LC13
 1429 0330 00000000 		.word	.LANCHOR1
 1430 0334 00000000 		.word	.LANCHOR0
 1431 0338 FF010000 		.word	511
 1432 033c 1E0E0000 		.word	3614
 1433              	.LVL111:
 1434              	.L79:
 471:main.c        **** //check if on screen, copy only if it is
 1435              		.loc 1 471 5 is_stmt 1 view .LVU435
 471:main.c        **** //check if on screen, copy only if it is
 1436              		.loc 1 471 24 is_stmt 0 view .LVU436
 1437 0340 4B69     		ldr	r3, [r1, #20]
 471:main.c        **** //check if on screen, copy only if it is
 1438              		.loc 1 471 13 view .LVU437
 1439 0342 ED5C     		ldrb	r5, [r5, r3]
 1440              	.LVL112:
 478:main.c        ****       if (RIOT[_NUSIZ1+Gfxindex]>127)
 1441              		.loc 1 478 7 is_stmt 1 view .LVU438
 478:main.c        ****       if (RIOT[_NUSIZ1+Gfxindex]>127)
 1442              		.loc 1 478 12 is_stmt 0 view .LVU439
 1443 0344 FF23     		movs	r3, #255
 1444 0346 0B60     		str	r3, [r1]
 479:main.c        ****       {
 1445              		.loc 1 479 7 is_stmt 1 view .LVU440
 479:main.c        ****       {
 1446              		.loc 1 479 15 is_stmt 0 view .LVU441
 1447 0348 6319     		adds	r3, r4, r5
 1448 034a 1800     		movs	r0, r3
 1449 034c 2A30     		adds	r0, r0, #42
 1450 034e 0278     		ldrb	r2, [r0]
 479:main.c        ****       {
 1451              		.loc 1 479 10 view .LVU442
 1452 0350 0078     		ldrb	r0, [r0]
 1453 0352 40B2     		sxtb	r0, r0
 1454 0354 0028     		cmp	r0, #0
 1455 0356 0EDA     		bge	.L74
 481:main.c        ****         {
ARM GAS  main.s 			page 40


 1456              		.loc 1 481 9 is_stmt 1 view .LVU443
 481:main.c        ****         {
 1457              		.loc 1 481 17 is_stmt 0 view .LVU444
 1458 0358 DE7A     		ldrb	r6, [r3, #11]
 481:main.c        ****         {
 1459              		.loc 1 481 12 view .LVU445
 1460 035a 982E     		cmp	r6, #152
 1461 035c 0BD9     		bls	.L74
 484:main.c        ****         }
 1462              		.loc 1 484 12 is_stmt 1 view .LVU446
 484:main.c        ****         }
 1463              		.loc 1 484 54 is_stmt 0 view .LVU447
 1464 035e 0827     		movs	r7, #8
 1465 0360 D310     		asrs	r3, r2, #3
 1466 0362 3B40     		ands	r3, r7
 484:main.c        ****         }
 1467              		.loc 1 484 86 view .LVU448
 1468 0364 5200     		lsls	r2, r2, #1
 1469 0366 FF19     		adds	r7, r7, r7
 1470 0368 3A40     		ands	r2, r7
 484:main.c        ****         }
 1471              		.loc 1 484 25 view .LVU449
 1472 036a 5A48     		ldr	r0, .L98
 484:main.c        ****         }
 1473              		.loc 1 484 58 view .LVU450
 1474 036c 1343     		orrs	r3, r2
 484:main.c        ****         }
 1475              		.loc 1 484 115 view .LVU451
 1476 036e 993E     		subs	r6, r6, #153
 484:main.c        ****         }
 1477              		.loc 1 484 90 view .LVU452
 1478 0370 3343     		orrs	r3, r6
 484:main.c        ****         }
 1479              		.loc 1 484 25 view .LVU453
 1480 0372 C35C     		ldrb	r3, [r0, r3]
 1481 0374 0B60     		str	r3, [r1]
 1482              	.L74:
 488:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1483              		.loc 1 488 7 is_stmt 1 view .LVU454
 488:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1484              		.loc 1 488 23 is_stmt 0 view .LVU455
 1485 0376 0320     		movs	r0, #3
 1486 0378 FFF7FEFF 		bl	get32bitdf
 1487              	.LVL113:
 489:main.c        ****               RIOT[player1y+Gfxindex],
 1488              		.loc 1 489 56 view .LVU456
 1489 037c 6B00     		lsls	r3, r5, #1
 1490 037e 0393     		str	r3, [sp, #12]
 490:main.c        ****               RIOT[player1height+Gfxindex]);
 1491              		.loc 1 490 28 view .LVU457
 1492 0380 2B00     		movs	r3, r5
 1493 0382 1533     		adds	r3, r3, #21
 1494 0384 0193     		str	r3, [sp, #4]
 489:main.c        ****               RIOT[player1y+Gfxindex],
 1495              		.loc 1 489 30 view .LVU458
 1496 0386 0399     		ldr	r1, [sp, #12]
 488:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
ARM GAS  main.s 			page 41


 1497              		.loc 1 488 7 view .LVU459
 1498 0388 019A     		ldr	r2, [sp, #4]
 491:main.c        ****       mask = 0xFF;
 1499              		.loc 1 491 33 view .LVU460
 1500 038a 2135     		adds	r5, r5, #33
 1501              	.LVL114:
 488:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1502              		.loc 1 488 7 view .LVU461
 1503 038c 635D     		ldrb	r3, [r4, r5]
 1504 038e A25C     		ldrb	r2, [r4, r2]
 489:main.c        ****               RIOT[player1y+Gfxindex],
 1505              		.loc 1 489 30 view .LVU462
 1506 0390 6418     		adds	r4, r4, r1
 1507 0392 2100     		movs	r1, r4
 1508 0394 3B31     		adds	r1, r1, #59
 489:main.c        ****               RIOT[player1y+Gfxindex],
 1509              		.loc 1 489 59 view .LVU463
 1510 0396 0978     		ldrb	r1, [r1]
 489:main.c        ****               RIOT[player1y+Gfxindex],
 1511              		.loc 1 489 68 view .LVU464
 1512 0398 3A34     		adds	r4, r4, #58
 488:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1513              		.loc 1 488 7 view .LVU465
 1514 039a 4F4F     		ldr	r7, .L98+4
 489:main.c        ****               RIOT[player1y+Gfxindex],
 1515              		.loc 1 489 68 view .LVU466
 1516 039c 2478     		ldrb	r4, [r4]
 489:main.c        ****               RIOT[player1y+Gfxindex],
 1517              		.loc 1 489 59 view .LVU467
 1518 039e 0902     		lsls	r1, r1, #8
 488:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1519              		.loc 1 488 7 view .LVU468
 1520 03a0 3E69     		ldr	r6, [r7, #16]
 489:main.c        ****               RIOT[player1y+Gfxindex],
 1521              		.loc 1 489 63 view .LVU469
 1522 03a2 0919     		adds	r1, r1, r4
 1523 03a4 7C69     		ldr	r4, [r7, #20]
 488:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1524              		.loc 1 488 22 view .LVU470
 1525 03a6 3018     		adds	r0, r6, r0
 489:main.c        ****               RIOT[player1y+Gfxindex],
 1526              		.loc 1 489 63 view .LVU471
 1527 03a8 6118     		adds	r1, r4, r1
 488:main.c        ****               flashdata+(RIOT[player1pointerhi+Gfxindex*2]<<8)+RIOT[player1pointerlo+Gfxindex*2],
 1528              		.loc 1 488 7 view .LVU472
 1529 03aa FFF7FEFF 		bl	my_memcpy
 1530              	.LVL115:
 492:main.c        ****       //my_memcpy(queue+(dfhigh(1)<<8)+dflow(1),
 1531              		.loc 1 492 7 is_stmt 1 view .LVU473
 492:main.c        ****       //my_memcpy(queue+(dfhigh(1)<<8)+dflow(1),
 1532              		.loc 1 492 12 is_stmt 0 view .LVU474
 1533 03ae FF23     		movs	r3, #255
 1534 03b0 4A4C     		ldr	r4, .L98+8
 494:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 1535              		.loc 1 494 23 view .LVU475
 1536 03b2 0120     		movs	r0, #1
 492:main.c        ****       //my_memcpy(queue+(dfhigh(1)<<8)+dflow(1),
ARM GAS  main.s 			page 42


 1537              		.loc 1 492 12 view .LVU476
 1538 03b4 2360     		str	r3, [r4]
 494:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 1539              		.loc 1 494 7 is_stmt 1 view .LVU477
 1540 03b6 3B69     		ldr	r3, [r7, #16]
 1541 03b8 0493     		str	r3, [sp, #16]
 494:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 1542              		.loc 1 494 23 is_stmt 0 view .LVU478
 1543 03ba FFF7FEFF 		bl	get32bitdf
 1544              	.LVL116:
 495:main.c        **** 	      RIOT[player1y+Gfxindex],
 1545              		.loc 1 495 30 view .LVU479
 1546 03be FE68     		ldr	r6, [r7, #12]
 1547 03c0 0399     		ldr	r1, [sp, #12]
 494:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 1548              		.loc 1 494 7 view .LVU480
 1549 03c2 019A     		ldr	r2, [sp, #4]
 1550 03c4 735D     		ldrb	r3, [r6, r5]
 1551 03c6 B25C     		ldrb	r2, [r6, r2]
 495:main.c        **** 	      RIOT[player1y+Gfxindex],
 1552              		.loc 1 495 30 view .LVU481
 1553 03c8 7618     		adds	r6, r6, r1
 1554 03ca 3100     		movs	r1, r6
 1555 03cc 4D31     		adds	r1, r1, #77
 495:main.c        **** 	      RIOT[player1y+Gfxindex],
 1556              		.loc 1 495 57 view .LVU482
 1557 03ce 0978     		ldrb	r1, [r1]
 495:main.c        **** 	      RIOT[player1y+Gfxindex],
 1558              		.loc 1 495 66 view .LVU483
 1559 03d0 4C36     		adds	r6, r6, #76
 1560 03d2 3678     		ldrb	r6, [r6]
 495:main.c        **** 	      RIOT[player1y+Gfxindex],
 1561              		.loc 1 495 57 view .LVU484
 1562 03d4 0902     		lsls	r1, r1, #8
 495:main.c        **** 	      RIOT[player1y+Gfxindex],
 1563              		.loc 1 495 61 view .LVU485
 1564 03d6 8E19     		adds	r6, r1, r6
 1565 03d8 7969     		ldr	r1, [r7, #20]
 1566 03da 8919     		adds	r1, r1, r6
 494:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 1567              		.loc 1 494 22 view .LVU486
 1568 03dc 049E     		ldr	r6, [sp, #16]
 1569 03de 3018     		adds	r0, r6, r0
 494:main.c        ****               flashdata+(RIOT[player1color+Gfxindex*2+1]<<8)+RIOT[player1color+Gfxindex*2],
 1570              		.loc 1 494 7 view .LVU487
 1571 03e0 FFF7FEFF 		bl	my_memcpy
 1572              	.LVL117:
 499:main.c        ****     temp4=(RIOT[player1y+Gfxindex]+RIOT[player1height+Gfxindex])&255; // &255 to allow for wrapped 
 1573              		.loc 1 499 5 is_stmt 1 view .LVU488
 499:main.c        ****     temp4=(RIOT[player1y+Gfxindex]+RIOT[player1height+Gfxindex])&255; // &255 to allow for wrapped 
 1574              		.loc 1 499 10 is_stmt 0 view .LVU489
 1575 03e4 A369     		ldr	r3, [r4, #24]
 500:main.c        ****     Gfxindex=myGfxIndex[count+1];
 1576              		.loc 1 500 65 view .LVU490
 1577 03e6 019A     		ldr	r2, [sp, #4]
 499:main.c        ****     temp4=(RIOT[player1y+Gfxindex]+RIOT[player1height+Gfxindex])&255; // &255 to allow for wrapped 
 1578              		.loc 1 499 10 view .LVU491
ARM GAS  main.s 			page 43


 1579 03e8 E360     		str	r3, [r4, #12]
 500:main.c        ****     Gfxindex=myGfxIndex[count+1];
 1580              		.loc 1 500 5 is_stmt 1 view .LVU492
 500:main.c        ****     Gfxindex=myGfxIndex[count+1];
 1581              		.loc 1 500 16 is_stmt 0 view .LVU493
 1582 03ea FB68     		ldr	r3, [r7, #12]
 500:main.c        ****     Gfxindex=myGfxIndex[count+1];
 1583              		.loc 1 500 65 view .LVU494
 1584 03ec 595D     		ldrb	r1, [r3, r5]
 1585 03ee 9A5C     		ldrb	r2, [r3, r2]
 501:main.c        ****     if ((count == temp3) || (RIOT[player1y+Gfxindex]>175) )
 1586              		.loc 1 501 30 view .LVU495
 1587 03f0 6569     		ldr	r5, [r4, #20]
 1588              	.LVL118:
 500:main.c        ****     Gfxindex=myGfxIndex[count+1];
 1589              		.loc 1 500 65 view .LVU496
 1590 03f2 5218     		adds	r2, r2, r1
 1591 03f4 D2B2     		uxtb	r2, r2
 1592 03f6 A261     		str	r2, [r4, #24]
 501:main.c        ****     if ((count == temp3) || (RIOT[player1y+Gfxindex]>175) )
 1593              		.loc 1 501 5 is_stmt 1 view .LVU497
 501:main.c        ****     if ((count == temp3) || (RIOT[player1y+Gfxindex]>175) )
 1594              		.loc 1 501 24 is_stmt 0 view .LVU498
 1595 03f8 7A19     		adds	r2, r7, r5
 501:main.c        ****     if ((count == temp3) || (RIOT[player1y+Gfxindex]>175) )
 1596              		.loc 1 501 13 view .LVU499
 1597 03fa 5678     		ldrb	r6, [r2, #1]
 1598              	.LVL119:
 502:main.c        ****     {
 1599              		.loc 1 502 5 is_stmt 1 view .LVU500
 502:main.c        ****     {
 1600              		.loc 1 502 8 is_stmt 0 view .LVU501
 1601 03fc 029A     		ldr	r2, [sp, #8]
 1602 03fe 9542     		cmp	r5, r2
 1603 0400 03D0     		beq	.L75
 502:main.c        ****     {
 1604              		.loc 1 502 34 discriminator 1 view .LVU502
 1605 0402 9B19     		adds	r3, r3, r6
 502:main.c        ****     {
 1606              		.loc 1 502 26 discriminator 1 view .LVU503
 1607 0404 5B7D     		ldrb	r3, [r3, #21]
 1608 0406 AF2B     		cmp	r3, #175
 1609 0408 03D9     		bls	.L76
 1610              	.L75:
 504:main.c        ****       temp5=0;
 1611              		.loc 1 504 7 is_stmt 1 view .LVU504
 504:main.c        ****       temp5=0;
 1612              		.loc 1 504 12 is_stmt 0 view .LVU505
 1613 040a 354B     		ldr	r3, .L98+12
 1614 040c A361     		str	r3, [r4, #24]
 505:main.c        ****     }
 1615              		.loc 1 505 7 is_stmt 1 view .LVU506
 505:main.c        ****     }
 1616              		.loc 1 505 12 is_stmt 0 view .LVU507
 1617 040e 0023     		movs	r3, #0
 1618 0410 E360     		str	r3, [r4, #12]
 1619              	.L76:
ARM GAS  main.s 			page 44


 511:main.c        **** 
 1620              		.loc 1 511 6 is_stmt 1 view .LVU508
 511:main.c        **** 
 1621              		.loc 1 511 11 is_stmt 0 view .LVU509
 1622 0412 3B69     		ldr	r3, [r7, #16]
 511:main.c        **** 
 1623              		.loc 1 511 12 view .LVU510
 1624 0414 0420     		movs	r0, #4
 511:main.c        **** 
 1625              		.loc 1 511 11 view .LVU511
 1626 0416 0193     		str	r3, [sp, #4]
 511:main.c        **** 
 1627              		.loc 1 511 12 view .LVU512
 1628 0418 FFF7FEFF 		bl	get32bitdf
 1629              	.LVL120:
 511:main.c        **** 
 1630              		.loc 1 511 11 view .LVU513
 1631 041c 019B     		ldr	r3, [sp, #4]
 511:main.c        **** 
 1632              		.loc 1 511 25 view .LVU514
 1633 041e 2818     		adds	r0, r5, r0
 511:main.c        **** 
 1634              		.loc 1 511 39 view .LVU515
 1635 0420 E268     		ldr	r2, [r4, #12]
 511:main.c        **** 
 1636              		.loc 1 511 11 view .LVU516
 1637 0422 1818     		adds	r0, r3, r0
 511:main.c        **** 
 1638              		.loc 1 511 39 view .LVU517
 1639 0424 A369     		ldr	r3, [r4, #24]
 511:main.c        **** 
 1640              		.loc 1 511 52 view .LVU518
 1641 0426 6D10     		asrs	r5, r5, #1
 511:main.c        **** 
 1642              		.loc 1 511 39 view .LVU519
 1643 0428 9B1A     		subs	r3, r3, r2
 511:main.c        **** 
 1644              		.loc 1 511 45 view .LVU520
 1645 042a 5B1B     		subs	r3, r3, r5
 511:main.c        **** 
 1646              		.loc 1 511 57 view .LVU521
 1647 042c 5B10     		asrs	r3, r3, #1
 511:main.c        **** 
 1648              		.loc 1 511 32 view .LVU522
 1649 042e DBB2     		uxtb	r3, r3
 1650 0430 0370     		strb	r3, [r0]
 513:main.c        ****       RIOT[player1x+Gfxindex]-=(RIOT[player1x+Gfxindex]>208)?96:160;
 1651              		.loc 1 513 5 is_stmt 1 view .LVU523
 513:main.c        ****       RIOT[player1x+Gfxindex]-=(RIOT[player1x+Gfxindex]>208)?96:160;
 1652              		.loc 1 513 22 is_stmt 0 view .LVU524
 1653 0432 3300     		movs	r3, r6
 1654 0434 0B33     		adds	r3, r3, #11
 1655 0436 0193     		str	r3, [sp, #4]
 513:main.c        ****       RIOT[player1x+Gfxindex]-=(RIOT[player1x+Gfxindex]>208)?96:160;
 1656              		.loc 1 513 13 view .LVU525
 1657 0438 019A     		ldr	r2, [sp, #4]
 1658 043a FB68     		ldr	r3, [r7, #12]
ARM GAS  main.s 			page 45


 1659 043c 9918     		adds	r1, r3, r2
 1660 043e 9B5C     		ldrb	r3, [r3, r2]
 513:main.c        ****       RIOT[player1x+Gfxindex]-=(RIOT[player1x+Gfxindex]>208)?96:160;
 1661              		.loc 1 513 8 view .LVU526
 1662 0440 9F2B     		cmp	r3, #159
 1663 0442 05D9     		bls	.L77
 514:main.c        ****     queue[get32bitdff(5)+count]=RIOT[_NUSIZ1+Gfxindex];
 1664              		.loc 1 514 7 is_stmt 1 view .LVU527
 514:main.c        ****     queue[get32bitdff(5)+count]=RIOT[_NUSIZ1+Gfxindex];
 1665              		.loc 1 514 30 is_stmt 0 view .LVU528
 1666 0444 6022     		movs	r2, #96
 1667 0446 D02B     		cmp	r3, #208
 1668 0448 00D8     		bhi	.L78
 1669 044a 4032     		adds	r2, r2, #64
 1670              	.L78:
 514:main.c        ****     queue[get32bitdff(5)+count]=RIOT[_NUSIZ1+Gfxindex];
 1671              		.loc 1 514 30 discriminator 4 view .LVU529
 1672 044c 9B1A     		subs	r3, r3, r2
 1673 044e 0B70     		strb	r3, [r1]
 1674              	.L77:
 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1675              		.loc 1 515 5 is_stmt 1 view .LVU530
 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1676              		.loc 1 515 37 is_stmt 0 view .LVU531
 1677 0450 FB68     		ldr	r3, [r7, #12]
 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1678              		.loc 1 515 11 view .LVU532
 1679 0452 0520     		movs	r0, #5
 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1680              		.loc 1 515 45 view .LVU533
 1681 0454 2A36     		adds	r6, r6, #42
 1682              	.LVL121:
 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1683              		.loc 1 515 37 view .LVU534
 1684 0456 9E19     		adds	r6, r3, r6
 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1685              		.loc 1 515 11 view .LVU535
 1686 0458 FFF7FEFF 		bl	get32bitdff
 1687              	.LVL122:
 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1688              		.loc 1 515 25 view .LVU536
 1689 045c 1F4C     		ldr	r4, .L98+8
 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1690              		.loc 1 515 10 view .LVU537
 1691 045e 3D69     		ldr	r5, [r7, #16]
 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1692              		.loc 1 515 25 view .LVU538
 1693 0460 6369     		ldr	r3, [r4, #20]
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1694              		.loc 1 516 50 view .LVU539
 1695 0462 019A     		ldr	r2, [sp, #4]
 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1696              		.loc 1 515 25 view .LVU540
 1697 0464 C018     		adds	r0, r0, r3
 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1698              		.loc 1 515 37 view .LVU541
 1699 0466 3378     		ldrb	r3, [r6]
ARM GAS  main.s 			page 46


 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1700              		.loc 1 515 10 view .LVU542
 1701 0468 2D18     		adds	r5, r5, r0
 515:main.c        ****     queue[get32bitdff(7)+count]=Hmval74(RIOT[player1x+Gfxindex]);
 1702              		.loc 1 515 32 view .LVU543
 1703 046a 2B70     		strb	r3, [r5]
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1704              		.loc 1 516 5 is_stmt 1 view .LVU544
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1705              		.loc 1 516 50 is_stmt 0 view .LVU545
 1706 046c FB68     		ldr	r3, [r7, #12]
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1707              		.loc 1 516 44 view .LVU546
 1708 046e 6668     		ldr	r6, [r4, #4]
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1709              		.loc 1 516 50 view .LVU547
 1710 0470 9B5C     		ldrb	r3, [r3, r2]
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1711              		.loc 1 516 11 view .LVU548
 1712 0472 0720     		movs	r0, #7
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1713              		.loc 1 516 44 view .LVU549
 1714 0474 4233     		adds	r3, r3, #66
 1715 0476 F618     		adds	r6, r6, r3
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1716              		.loc 1 516 11 view .LVU550
 1717 0478 FFF7FEFF 		bl	get32bitdff
 1718              	.LVL123:
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1719              		.loc 1 516 25 view .LVU551
 1720 047c 6369     		ldr	r3, [r4, #20]
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1721              		.loc 1 516 10 view .LVU552
 1722 047e 3D69     		ldr	r5, [r7, #16]
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1723              		.loc 1 516 25 view .LVU553
 1724 0480 C018     		adds	r0, r0, r3
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1725              		.loc 1 516 44 view .LVU554
 1726 0482 3378     		ldrb	r3, [r6]
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1727              		.loc 1 516 10 view .LVU555
 1728 0484 2D18     		adds	r5, r5, r0
 516:main.c        ****     //queue[(dfhigh(5)<<8)+dflow(5)+count]=kernello(HMdiv[RIOT[player1x+Gfxindex]]);
 1729              		.loc 1 516 32 view .LVU556
 1730 0486 2B70     		strb	r3, [r5]
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1731              		.loc 1 518 5 is_stmt 1 view .LVU557
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1732              		.loc 1 518 55 is_stmt 0 view .LVU558
 1733 0488 FB68     		ldr	r3, [r7, #12]
 1734 048a 019A     		ldr	r2, [sp, #4]
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1735              		.loc 1 518 50 view .LVU559
 1736 048c 154D     		ldr	r5, .L98+16
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1737              		.loc 1 518 55 view .LVU560
ARM GAS  main.s 			page 47


 1738 048e 9B5C     		ldrb	r3, [r3, r2]
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1739              		.loc 1 518 43 view .LVU561
 1740 0490 6268     		ldr	r2, [r4, #4]
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1741              		.loc 1 518 50 view .LVU562
 1742 0492 5B5D     		ldrb	r3, [r3, r5]
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1743              		.loc 1 518 11 view .LVU563
 1744 0494 0520     		movs	r0, #5
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1745              		.loc 1 518 43 view .LVU564
 1746 0496 D318     		adds	r3, r2, r3
 1747 0498 0393     		str	r3, [sp, #12]
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1748              		.loc 1 518 11 view .LVU565
 1749 049a FFF7FEFF 		bl	get32bitdf
 1750              	.LVL124:
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1751              		.loc 1 518 24 view .LVU566
 1752 049e 6369     		ldr	r3, [r4, #20]
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1753              		.loc 1 518 10 view .LVU567
 1754 04a0 3E69     		ldr	r6, [r7, #16]
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1755              		.loc 1 518 24 view .LVU568
 1756 04a2 C018     		adds	r0, r0, r3
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1757              		.loc 1 518 43 view .LVU569
 1758 04a4 039B     		ldr	r3, [sp, #12]
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1759              		.loc 1 518 10 view .LVU570
 1760 04a6 3618     		adds	r6, r6, r0
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1761              		.loc 1 518 43 view .LVU571
 1762 04a8 1B78     		ldrb	r3, [r3]
 520:main.c        ****     count++;
 1763              		.loc 1 520 55 view .LVU572
 1764 04aa 019A     		ldr	r2, [sp, #4]
 518:main.c        ****     //queue[(dfhigh(6)<<8)+dflow(6)+count]=kernelhi(HMdiv[RIOT[player1x+Gfxindex]]);
 1765              		.loc 1 518 31 view .LVU573
 1766 04ac 3370     		strb	r3, [r6]
 520:main.c        ****     count++;
 1767              		.loc 1 520 5 is_stmt 1 view .LVU574
 520:main.c        ****     count++;
 1768              		.loc 1 520 55 is_stmt 0 view .LVU575
 1769 04ae FB68     		ldr	r3, [r7, #12]
 520:main.c        ****     count++;
 1770              		.loc 1 520 11 view .LVU576
 1771 04b0 0620     		movs	r0, #6
 520:main.c        ****     count++;
 1772              		.loc 1 520 55 view .LVU577
 1773 04b2 9B5C     		ldrb	r3, [r3, r2]
 520:main.c        ****     count++;
 1774              		.loc 1 520 10 view .LVU578
 1775 04b4 3E69     		ldr	r6, [r7, #16]
 520:main.c        ****     count++;
ARM GAS  main.s 			page 48


 1776              		.loc 1 520 50 view .LVU579
 1777 04b6 5B5D     		ldrb	r3, [r3, r5]
 520:main.c        ****     count++;
 1778              		.loc 1 520 43 view .LVU580
 1779 04b8 6568     		ldr	r5, [r4, #4]
 1780 04ba 0B33     		adds	r3, r3, #11
 1781 04bc ED18     		adds	r5, r5, r3
 520:main.c        ****     count++;
 1782              		.loc 1 520 11 view .LVU581
 1783 04be FFF7FEFF 		bl	get32bitdf
 1784              	.LVL125:
 520:main.c        ****     count++;
 1785              		.loc 1 520 24 view .LVU582
 1786 04c2 6369     		ldr	r3, [r4, #20]
 1787 04c4 C018     		adds	r0, r0, r3
 520:main.c        ****     count++;
 1788              		.loc 1 520 43 view .LVU583
 1789 04c6 2B78     		ldrb	r3, [r5]
 520:main.c        ****     count++;
 1790              		.loc 1 520 10 view .LVU584
 1791 04c8 3618     		adds	r6, r6, r0
 520:main.c        ****     count++;
 1792              		.loc 1 520 31 view .LVU585
 1793 04ca 3370     		strb	r3, [r6]
 521:main.c        ****   }
 1794              		.loc 1 521 5 is_stmt 1 view .LVU586
 521:main.c        ****   }
 1795              		.loc 1 521 10 is_stmt 0 view .LVU587
 1796 04cc 6369     		ldr	r3, [r4, #20]
 1797 04ce 0133     		adds	r3, r3, #1
 1798 04d0 6361     		str	r3, [r4, #20]
 1799 04d2 1FE6     		b	.L73
 1800              	.L99:
 1801              		.align	2
 1802              	.L98:
 1803 04d4 00000000 		.word	.LANCHOR2
 1804 04d8 00000000 		.word	.LANCHOR1
 1805 04dc 00000000 		.word	.LANCHOR0
 1806 04e0 FF010000 		.word	511
 1807 04e4 001C0020 		.word	536878080
 1808              		.cfi_endproc
 1809              	.LFE10:
 1811              		.global	maxsprites
 1812              		.global	myGfxIndex
 1813              		.global	spritesort
 1814              		.global	maskdata
 1815              		.global	mask
 1816              		.global	temp5
 1817              		.global	temp4
 1818              		.global	count
 1819              		.global	pfpixel
 1820              		.global	fetcheraddr
 1821              		.global	RIOT
 1822              		.global	fetcher_address_table
 1823              		.global	C_function
 1824              		.global	queue_int
 1825              		.global	flashdata
ARM GAS  main.s 			page 49


 1826              		.global	queue
 1827              		.section	.rodata
 1828              		.set	.LANCHOR2,. + 0
 1831              	maskdata:
 1832 0000 00010307 		.ascii	"\000\001\003\007\017\037?\177\376\374\370\360\340\300"
 1832      0F1F3F7F 
 1832      FEFCF8F0 
 1832      E0C0
 1833 000e 80000080 		.ascii	"\200\000\000\200\300\340\360\370\374\376\177?\037\017"
 1833      C0E0F0F8 
 1833      FCFE7F3F 
 1833      1F0F
 1834 001c 07030100 		.ascii	"\007\003\001\000"
 1835              		.data
 1836              		.align	2
 1837              		.set	.LANCHOR1,. + 0
 1840              	myGfxIndex:
 1841 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\000"
 1841      04050607 
 1841      0800
 1842 000a 0000     		.space	2
 1845              	RIOT:
 1846 000c A80D0010 		.word	268438952
 1849              	queue:
 1850 0010 000C0010 		.word	268438528
 1853              	flashdata:
 1854 0014 000C0020 		.word	536873984
 1857              	C_function:
 1858 0018 A40D0010 		.word	268438948
 1861              	fetcher_address_table:
 1862 001c A06D0020 		.word	536898976
 1865              	spritesort:
 1866 0020 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\000"
 1866      04050607 
 1866      0800
 1867 002a 0000     		.space	2
 1870              	queue_int:
 1871 002c 000C0010 		.word	268438528
 1872              		.bss
 1873              		.align	2
 1874              		.set	.LANCHOR0,. + 0
 1877              	mask:
 1878 0000 00000000 		.space	4
 1881              	fetcheraddr:
 1882 0004 00000000 		.space	4
 1885              	maxsprites:
 1886 0008 00       		.space	1
 1887 0009 000000   		.space	3
 1890              	temp5:
 1891 000c 00000000 		.space	4
 1894              	pfpixel:
 1895 0010 00000000 		.space	4
 1898              	count:
 1899 0014 00000000 		.space	4
 1902              	temp4:
 1903 0018 00000000 		.space	4
 1904              		.text
ARM GAS  main.s 			page 50


 1905              	.Letext0:
 1906              		.file 2 "src/custom.h"
 1907              		.file 3 "<built-in>"
ARM GAS  main.s 			page 51


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
              main.s:18     .text.my_memcpy:0000000000000000 $t
              main.s:24     .text.my_memcpy:0000000000000000 my_memcpy
              main.s:85     .text.my_memcpy:0000000000000024 $d
              main.s:90     .text.my_memset:0000000000000000 $t
              main.s:96     .text.my_memset:0000000000000000 my_memset
              main.s:129    .text.reverse:0000000000000000 $t
              main.s:135    .text.reverse:0000000000000000 reverse
              main.s:183    .text.memscroll:0000000000000000 $t
              main.s:189    .text.memscroll:0000000000000000 memscroll
              main.s:239    .text.get32bitdff:0000000000000000 $t
              main.s:245    .text.get32bitdff:0000000000000000 get32bitdff
              main.s:277    .text.get32bitdff:0000000000000018 $d
              main.s:282    .text.get32bitdf:0000000000000000 $t
              main.s:288    .text.get32bitdf:0000000000000000 get32bitdf
              main.s:317    .text.get32bitdf:0000000000000010 $d
              main.s:322    .text.shiftnumbers:0000000000000000 $t
              main.s:328    .text.shiftnumbers:0000000000000000 shiftnumbers
              main.s:361    .text.shiftnumbers:0000000000000018 $d
              main.s:367    .text.checkswap:0000000000000000 $t
              main.s:373    .text.checkswap:0000000000000000 checkswap
              main.s:458    .text.checkswap:0000000000000044 $d
              main.s:463    .text.copynybble:0000000000000000 $t
              main.s:469    .text.copynybble:0000000000000000 copynybble
              main.s:573    .text.copynybble:0000000000000054 $d
              main.s:579    .text.on_off_flip:0000000000000000 $t
              main.s:585    .text.on_off_flip:0000000000000000 on_off_flip
              main.s:643    .text.on_off_flip:0000000000000038 $d
              main.s:654    .text.startup.main:0000000000000000 $t
              main.s:660    .text.startup.main:0000000000000000 main
              main.s:1428   .text.startup.main:000000000000032c $d
              main.s:1437   .text.startup.main:0000000000000340 $t
              main.s:1803   .text.startup.main:00000000000004d4 $d
              main.s:1885   .bss:0000000000000008 maxsprites
              main.s:1840   .data:0000000000000000 myGfxIndex
              main.s:1865   .data:0000000000000020 spritesort
              main.s:1831   .rodata:0000000000000000 maskdata
              main.s:1877   .bss:0000000000000000 mask
              main.s:1890   .bss:000000000000000c temp5
              main.s:1902   .bss:0000000000000018 temp4
              main.s:1898   .bss:0000000000000014 count
              main.s:1894   .bss:0000000000000010 pfpixel
              main.s:1881   .bss:0000000000000004 fetcheraddr
              main.s:1845   .data:000000000000000c RIOT
              main.s:1861   .data:000000000000001c fetcher_address_table
              main.s:1857   .data:0000000000000018 C_function
              main.s:1870   .data:000000000000002c queue_int
              main.s:1853   .data:0000000000000014 flashdata
              main.s:1849   .data:0000000000000010 queue
              main.s:1836   .data:0000000000000000 $d
              main.s:1873   .bss:0000000000000000 $d

UNDEFINED SYMBOLS
memmove
memcpy
